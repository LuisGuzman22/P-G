{"version":3,"file":"static/js/728.fe9c13bc.chunk.js","mappings":"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","sources":["components/loading.jsx","hooks/useFetch.js","hooks/useGetCachedQueryData.js","hooks/useRegisterGeneralData.js","hooks/useGetContracts.js","pages/ContractSelector.jsx"],"sourcesContent":["import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://42c56e69edd041d8afddac6929f0ea8b.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n","import { useQueryClient } from '@tanstack/react-query'\n\nconst useGetCachedQueryData = () => {\n  const queryClient = useQueryClient()\n\n  // First create a helper function\n  const getData = (key) => {\n    // Make sure that the key is wrapped in an array for this to work\n    const data = queryClient.getQueryData([key])\n    return data\n  }\n\n  return { getData }\n}\n\nexport default useGetCachedQueryData\n","import { useEffect, useState } from 'react'\n\nconst useRegisterGeneralData = () => {\n  const saveProject = (data) => {\n    localStorage.setItem('project', JSON.stringify(data))\n  }\n  const saveContract = (data) => {\n    localStorage.setItem('contract', JSON.stringify(data))\n  }\n\n  const getProject = () => {\n    return localStorage.getItem('project')\n  }\n  const getContract = (data) => {\n    return localStorage.getItem('contract')\n  }\n\n  return { saveProject, saveContract, getProject, getContract }\n}\n\nexport default useRegisterGeneralData\n","import { useEffect, useState } from 'react'\nimport { useFetchContract } from './useFetch'\n\nconst useGetContracts = (contractId) => {\n  const { data, isLoading, error } = useFetchContract(contractId)\n\n  return { data, isLoading, error }\n}\n\nexport default useGetContracts\n","import { React, useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\n\nimport CIcon from '@coreui/icons-react'\nimport useGetContracts from 'src/hooks/useGetContracts'\nimport Loading from 'src/components/loading'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\n\nconst ContractSelector = () => {\n  const navigate = useNavigate()\n  const { getProject, saveContract } = useRegisterGeneralData()\n  const [selectedProject, setSelectedProject] = useState()\n  const [contractList, setContractList] = useState()\n  const { getData } = useGetCachedQueryData()\n\n  const projectsQuery = getData('projects')\n  const userType = localStorage.getItem('USER_TYPE')\n  const { data: contractData, isLoading, error } = useGetContracts(1)\n  const projectLS = JSON.parse(getProject())\n\n  const onClickHandler = (contract) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: contract.name,\n        id: contract.id,\n      }\n      saveContract(data)\n      navigate(`/dashboard`)\n    } else {\n      const data = {\n        name: contract.name,\n        id: contract.id,\n      }\n      saveContract(data)\n      navigate(`/project_selector`)\n    }\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      if (projectLS && projectsQuery) {\n        const projectFinded = projectsQuery.projects.find((projectData) => {\n          return projectData.id === projectLS.id\n        })\n        console.log('no es admin')\n        console.log('projectFinded.contracts', projectFinded.contracts)\n        setSelectedProject(projectFinded)\n        setContractList(projectFinded.contracts)\n      } else {\n        navigate(`/project_selector`)\n      }\n    } else {\n      console.log('ir a buscar los contratos')\n    }\n  }, [projectsQuery, projectLS])\n\n  useEffect(() => {\n    userType === 'admin' && contractData?.contract && setContractList(contractData.contract)\n  }, [contractData])\n\n  return (\n    <>\n      <CCol sm={6} className=\"contract-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Contrato</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {/* {isLoading && <Loading />} */}\n              {contractList === undefined && <h3>No se encontraron contratos asociados</h3>}\n              {contractList &&\n                contractList?.map((contract, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(contract)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{contract.name}</span>\n                              </CRow>\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55' }}\n                          values={[\n                            { title: 'Trisemanales', value: contract.trisemanal },\n                            { title: 'Avance', value: contract.progress },\n                          ]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ContractSelector\n"],"names":["Loading","_jsx","Lottie","animationData","loadingjson","loop","width","className","useFetchProyects","projectId","useQuery","queryKey","queryFn","async","axios","get","data","fetchProducts","useFetchContract","contractId","fetchContracts","useGetCachedQueryData","queryClient","useQueryClient","getData","key","getQueryData","useRegisterGeneralData","saveProject","localStorage","setItem","JSON","stringify","saveContract","getProject","getItem","getContract","isLoading","error","ContractSelector","navigate","useNavigate","selectedProject","setSelectedProject","useState","contractList","setContractList","projectsQuery","userType","contractData","useGetContracts","projectLS","parse","useEffect","projectFinded","projects","find","projectData","id","console","log","contracts","contract","_Fragment","children","CCol","sm","_jsxs","CCard","CCardTitle","CCardBody","CCardText","undefined","map","index","CRow","CWidgetStatsD","onClick","name","onClickHandler","icon","CIcon","height","chart","CContainer","style","values","title","value","trisemanal","progress"],"sourceRoot":""}