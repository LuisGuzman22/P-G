{"version":3,"file":"static/js/14.370609be.chunk.js","mappings":"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","sources":["components/ProjectList.jsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","components/ModalAddProject.jsx","components/ModalAddCategories.jsx","pages/ProjectAdministration.jsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx","../node_modules/@coreui/react/src/components/table/CTableFoot.tsx","../node_modules/@coreui/react/src/components/table/CTableCaption.tsx","../node_modules/@coreui/react/src/components/table/CTableResponsiveWrapper.tsx","../node_modules/@coreui/react/src/components/table/utils.ts","../node_modules/@coreui/react/src/components/table/CTable.tsx","../node_modules/@coreui/react/src/components/table/CTableBody.tsx","../node_modules/@coreui/react/src/components/table/CTableDataCell.tsx","../node_modules/@coreui/react/src/components/table/CTableHead.tsx","../node_modules/@coreui/react/src/components/table/CTableHeaderCell.tsx","../node_modules/@coreui/react/src/components/table/CTableRow.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  CAccordion,\n  CAccordionItem,\n  CAccordionHeader,\n  CAccordionBody,\n  CRow,\n  CCol,\n  CButton,\n} from '@coreui/react'\nimport { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst ProjectList = () => {\n  const fetchProducts = async () => {\n    const res = await axios.get('https://run.mocky.io/v3/d32c4c7a-c223-4c99-ae4c-d6c6f7f3dc71')\n    return res.data.data\n  }\n\n  const { data, isLoading } = useQuery({\n    queryKey: ['projects'],\n    queryFn: async () => {\n      return fetchProducts()\n    },\n  })\n\n  return (\n    <>\n      <CRow>\n        <CCol>ID</CCol>\n        <CCol>Proyecto</CCol>\n        <CCol>Contrato</CCol>\n        <CCol>Encargado</CCol>\n        <CCol>Creado por</CCol>\n      </CRow>\n\n      <CAccordion className=\"project-list\">\n        {!isLoading &&\n          data?.map((project, index) => {\n            return (\n              <CAccordionItem itemKey={project.id} key={project.id}>\n                <CAccordionHeader>\n                  <CRow>\n                    <CCol>{project.id}</CCol>\n                    <CCol>{project.projectName}</CCol>\n                    <CCol>{project.contract}</CCol>\n                    <CCol>{project.manager}</CCol>\n                    <CCol>{project.created_by}</CCol>\n                  </CRow>\n                </CAccordionHeader>\n                <CAccordionBody>\n                  <CButton className=\"btn-project-action\">Subir Trisemanal</CButton>\n                  <CButton className=\"btn-project-action\">Ver Trisemanales</CButton>\n                  <CButton className=\"btn-project-action\">Documentos</CButton>\n                  <CButton className=\"btn-project-action\">Archivos</CButton>\n                  <CButton className=\"btn-project-action\">Editar</CButton>\n                  <CButton className=\"btn-project-action\">Curva S</CButton>\n                </CAccordionBody>\n              </CAccordionItem>\n            )\n          })}\n      </CAccordion>\n    </>\n  )\n}\n\nexport default ProjectList\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n} from '@coreui/react'\nconst ModalAddProject = (props) => {\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Proyecto</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"projectName\"\n                label=\"Nombre de proyecto\"\n                placeholder=\"Nombre de proyecto\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n                onChange={(e) => {\n                  console.log(e.target.value)\n                }}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contract\"\n                label=\"Contrato\"\n                placeholder=\"Contrato\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"manager\"\n                label=\"Encargado\"\n                placeholder=\"Encargado\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput type=\"file\" id=\"formFile\" label=\"Elegir archivo\" />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={12}>\n              <CFormTextarea id=\"description\" label=\"Descripción\" rows={3} text=\"\"></CFormTextarea>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"color\"\n                id=\"color\"\n                defaultValue=\"#FFFFFF\"\n                label=\"Color de fondo\"\n                title=\"Color de fondo\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormCheck id=\"active\" label=\"Activo\" />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\">Añadir proyecto</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddProject\n","/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CTable,\n  CTableHeaderCell,\n  CTableHead,\n  CTableRow,\n  CTableBody,\n  CTableDataCell,\n} from '@coreui/react'\nconst ModalAddCategories = (props) => {\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Categorías</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"categoryName\"\n                label=\"Categoría\"\n                placeholder=\"Categoría\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n                onChange={(e) => {\n                  console.log(e.target.value)\n                }}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CButton className=\"btn-add\">Categoría</CButton>\n            </CCol>\n          </CRow>\n        </CForm>\n        <CTable>\n          <CTableHead>\n            <CTableRow>\n              <CTableHeaderCell scope=\"col\">Categoría</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Acción</CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            <CTableRow>\n              <CTableDataCell>Documentación de calidad</CTableDataCell>\n              <CTableDataCell>\n                <CButton className=\"btn-edit\">Editar</CButton>\n                <CButton className=\"btn-del\">Eliminar</CButton>\n              </CTableDataCell>\n            </CTableRow>\n            <CTableRow>\n              <CTableDataCell>Documentación P&C - Contacto</CTableDataCell>\n              <CTableDataCell>\n                <CButton className=\"btn-edit\">Editar</CButton>\n                <CButton className=\"btn-del\">Eliminar</CButton>\n              </CTableDataCell>\n            </CTableRow>\n          </CTableBody>\n        </CTable>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Close\n        </CButton>\n        <CButton color=\"primary\">Save changes</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddCategories\n","import { React, useState } from 'react'\nimport { CCard, CCardBody, CButton } from '@coreui/react'\nimport ProjectList from 'src/components/ProjectList'\nimport ModalAddProject from 'src/components/ModalAddProject'\nimport ModalAddCategories from 'src/components/ModalAddCategories'\n\nconst ProjectAdministration = () => {\n  const [visibleCategories, setVisibleCategories] = useState(false)\n  const [visibleProject, setVisibleProject] = useState(false)\n\n  return (\n    <div className=\"proyect-administration\">\n      <h2>Administrar proyecto</h2>\n\n      {visibleProject && (\n        <ModalAddProject\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleProject(data)\n          }}\n        />\n      )}\n\n      {visibleCategories && (\n        <ModalAddCategories\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleCategories(data)\n          }}\n        />\n      )}\n\n      <CCard className=\"action-buttons\">\n        <CCardBody>\n          <CButton onClick={() => setVisibleProject(!visibleProject)}>Añadir proyecto</CButton>\n          <CButton onClick={() => setVisibleCategories(!visibleCategories)}>Categorias</CButton>\n        </CCardBody>\n      </CCard>\n      <CCard>\n        <CCardBody>\n          <ProjectList />\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nexport default ProjectAdministration\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n","import PropTypes from 'prop-types'\nimport React, { forwardRef, HTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableFootProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableFoot = forwardRef<HTMLTableSectionElement, CTableFootProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tfoot\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tfoot>\n    )\n  },\n)\n\nCTableFoot.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableFoot.displayName = 'CTableFoot'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CTableCaption = forwardRef<\n  HTMLTableCaptionElement,\n  HTMLAttributes<HTMLTableCaptionElement>\n>(({ children, ...props }, ref) => {\n  return (\n    <caption {...props} ref={ref}>\n      {children}\n    </caption>\n  )\n})\n\nCTableCaption.propTypes = {\n  children: PropTypes.node,\n}\n\nCTableCaption.displayName = 'CTableCaption'\n","import React, { FC, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport interface CTableResponsiveWrapperProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n}\n\nexport const CTableResponsiveWrapper: FC<CTableResponsiveWrapperProps> = ({\n  children,\n  responsive,\n  ...rest\n}) => {\n  return responsive ? (\n    <div\n      className={\n        typeof responsive === 'boolean' ? 'table-responsive' : `table-responsive-${responsive}`\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  ) : (\n    <>{children}</>\n  )\n}\n\nCTableResponsiveWrapper.propTypes = {\n  children: PropTypes.node,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n}\n\nCTableResponsiveWrapper.displayName = 'CTableResponsiveWrapper'\n","import type { Column, Item } from './types'\n\nexport const pretifyName = (name: string) => {\n  return name\n    .replace(/[-_.]/g, ' ')\n    .replace(/ +/g, ' ')\n    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\nexport const getColumnLabel = (column: Column | string) =>\n  typeof column === 'object' ? column.label ?? pretifyName(column.key) : pretifyName(column)\n\nexport const getColumnNames = (columns: (string | Column)[] | undefined, items?: Item[]) =>\n  columns\n    ? columns.map((column: Column | string) => {\n        return typeof column === 'object' ? column.key : column\n      })\n    : items && getColumnNamesFromItems(items)\n\nexport const getColumnNamesFromItems = (items: Item[]) =>\n  Object.keys(items[0] || {}).filter((el) => el.charAt(0) !== '_')\n","import React, { forwardRef, TableHTMLAttributes, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTableHead, CTableHeadProps } from './CTableHead'\nimport { CTableHeaderCell } from './CTableHeaderCell'\nimport { CTableBody } from './CTableBody'\nimport { CTableDataCell } from './CTableDataCell'\nimport { CTableRow } from './CTableRow'\nimport { CTableFoot, CTableFootProps } from './CTableFoot'\nimport { CTableCaption } from './CTableCaption'\nimport { CTableResponsiveWrapper } from './CTableResponsiveWrapper'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport { getColumnLabel, getColumnNames } from './utils'\nimport type { Column, FooterItem, Item } from './types'\n\nexport interface CTableProps extends Omit<TableHTMLAttributes<HTMLTableElement>, 'align'> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the caption on the top if you set `caption=\"top\"` of the table or set the text of the table caption.\n   */\n  caption?: 'top' | string\n  /**\n   * Set the text of the table caption and the caption on the top of the table.\n   *\n   * @since 4.3.0\n   */\n  captionTop?: string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Prop for table columns configuration. If prop is not defined, table will display columns based on the first item keys, omitting keys that begins with underscore (e.g. '_props')\n   *\n   * In columns prop each array item represents one column. Item might be specified in two ways:\n   * String: each item define column name equal to item value.\n   * Object: item is object with following keys available as column configuration:\n   * - key (required)(String) - define column name equal to item key.\n   * - label (String) - define visible label of column. If not defined, label will be generated automatically based on column name, by converting kebab-case and snake_case to individual words and capitalization of each word.\n   * - _props (Object) - adds classes to all cels in column, ex. `_props: { scope: 'col', className: 'custom-class' }`,\n   * - _style (Object) - adds styles to the column header (useful for defining widths)\n   *\n   * @since 4.3.0\n   */\n  columns?: (string | Column)[]\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Array of objects or strings, where each element represents one cell in the table footer.\n   *\n   * Example items:\n   * `['FooterCell', 'FooterCell', 'FooterCell']`\n   * or\n   * `[{ label: 'FooterCell', _props: { color: 'success' }, ...]`\n   *\n   * @since 4.3.0\n   */\n  footer?: (FooterItem | string)[]\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Array of objects, where each object represents one item - row in table. Additionally, you can add style classes to each row by passing them by '_props' key and to single cell by '_cellProps'.\n   *\n   * Example item:\n   * `{ name: 'John' , age: 12, _props: { color: 'success' }, _cellProps: { age: { className: 'fw-bold'}}}`\n   *\n   * @since 4.3.0\n   */\n  items?: Item[]\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n  /**\n   * Add zebra-striping to any table column.\n   *\n   * @since 4.3.0\n   */\n  stripedColumns?: boolean\n  /**\n   * Properties that will be passed to the table footer component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablefoot\n   * @since 4.3.0\n   */\n  tableFootProps?: CTableFootProps\n  /**\n   * Properties that will be passed to the table head component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablehead\n   * @since 4.3.0\n   */\n  tableHeadProps?: CTableHeadProps\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      captionTop,\n      className,\n      color,\n      columns,\n      footer,\n      hover,\n      items,\n      responsive,\n      small,\n      striped,\n      stripedColumns,\n      tableFootProps,\n      tableHeadProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const columnNames = useMemo(() => getColumnNames(columns, items), [columns, items])\n\n    return (\n      <CTableResponsiveWrapper responsive={responsive}>\n        <table\n          className={classNames(\n            'table',\n            {\n              [`align-${align}`]: align,\n              [`border-${borderColor}`]: borderColor,\n              [`caption-top`]: captionTop || caption === 'top',\n              'table-bordered': bordered,\n              'table-borderless': borderless,\n              [`table-${color}`]: color,\n              'table-hover': hover,\n              'table-sm': small,\n              'table-striped': striped,\n              'table-striped-columns': stripedColumns,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {((caption && caption !== 'top') || captionTop) && (\n            <CTableCaption>{caption || captionTop}</CTableCaption>\n          )}\n          {columns && (\n            <CTableHead {...tableHeadProps}>\n              <CTableRow>\n                {columns.map((column: Column, index: number) => (\n                  <CTableHeaderCell\n                    {...(column._props && { ...column._props })}\n                    {...(column._style && { style: { ...column._style } })}\n                    key={index}\n                  >\n                    {getColumnLabel(column)}\n                  </CTableHeaderCell>\n                ))}\n              </CTableRow>\n            </CTableHead>\n          )}\n          {items && (\n            <CTableBody>\n              {items.map((item: Item, index: number) => (\n                <CTableRow {...(item._props && { ...item._props })} key={index}>\n                  {columnNames &&\n                    columnNames.map((colName: string, index: number) => {\n                      // eslint-disable-next-line unicorn/no-negated-condition\n                      return item[colName] !== undefined ? (\n                        <CTableDataCell\n                          {...(item._cellProps && {\n                            ...(item._cellProps['all'] && { ...item._cellProps['all'] }),\n                            ...(item._cellProps[colName] && { ...item._cellProps[colName] }),\n                          })}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ) : null\n                    })}\n                </CTableRow>\n              ))}\n            </CTableBody>\n          )}\n          {children}\n          {footer && (\n            <CTableFoot {...tableFootProps}>\n              <CTableRow>\n                {footer.map((item: FooterItem | string, index: number) => (\n                  <CTableDataCell\n                    {...(typeof item === 'object' && item._props && { ...item._props })}\n                    key={index}\n                  >\n                    {typeof item === 'object' ? item.label : item}\n                  </CTableDataCell>\n                ))}\n              </CTableRow>\n            </CTableFoot>\n          )}\n        </table>\n      </CTableResponsiveWrapper>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top'])]),\n  captionTop: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  columns: PropTypes.array,\n  footer: PropTypes.array,\n  hover: PropTypes.bool,\n  items: PropTypes.array,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  stripedColumns: PropTypes.bool,\n  tableFootProps: PropTypes.shape({ ...CTableFoot.propTypes }),\n  tableHeadProps: PropTypes.shape({ ...CTableHead.propTypes }),\n}\n\nCTable.displayName = 'CTable'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableBodyProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableBody = forwardRef<HTMLTableSectionElement, CTableBodyProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tbody\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tbody>\n    )\n  },\n)\n\nCTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableBody.displayName = 'CTableBody'\n","import React, { forwardRef, TdHTMLAttributes, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableDataCellProps\n  extends Omit<TdHTMLAttributes<HTMLTableCellElement>, 'align'>,\n    Omit<ThHTMLAttributes<HTMLTableCellElement>, 'align'> {\n  /**\n   * Highlight a table row or cell.\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * @ignore\n   */\n  colSpan?: number\n}\n\nexport const CTableDataCell = forwardRef<HTMLTableCellElement, CTableDataCellProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    const Component = rest.scope ? 'th' : 'td'\n\n    return (\n      <Component\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCTableDataCell.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableDataCell.displayName = 'CTableDataCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeadProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHead = forwardRef<HTMLTableSectionElement, CTableHeadProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <thead\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </thead>\n    )\n  },\n)\n\nCTableHead.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHead.displayName = 'CTableHead'\n","import React, { forwardRef, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableCellElement, CTableHeaderCellProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <th\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    return (\n      <tr\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n"],"names":["ProjectList","data","isLoading","useQuery","queryKey","queryFn","async","axios","get","fetchProducts","_jsxs","_Fragment","children","CRow","_jsx","CCol","CAccordion","className","map","project","index","CAccordionItem","itemKey","id","CAccordionHeader","projectName","contract","manager","created_by","CAccordionBody","CButton","CFormCheck","forwardRef","_a","ref","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","invalid","label","reverse","_b","type","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","React","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","concat","color","size","shape","htmlFor","propTypes","PropTypes","displayName","props","handleClick","sendDataToParent","CModal","scrollable","visible","onClose","CModalHeader","CModalTitle","CModalBody","CForm","sm","CFormInput","placeholder","text","onChange","e","console","log","target","value","CFormTextarea","rows","defaultValue","title","CModalFooter","onClick","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","CTableDataCell","ProjectAdministration","visibleCategories","setVisibleCategories","useState","visibleProject","setVisibleProject","ModalAddProject","ModalAddCategories","CCard","CCardBody","floatingClassName","plainText","CFormControlWrapper","CTableFoot","undefined","colorPropType","CTableCaption","CTableResponsiveWrapper","responsive","pretifyName","name","replace","split","word","charAt","toUpperCase","slice","join","getColumnNamesFromItems","items","Object","keys","filter","el","align","borderColor","bordered","borderless","caption","captionTop","columns","footer","hover","small","striped","stripedColumns","tableFootProps","tableHeadProps","columnNames","useMemo","column","key","getColumnNames","_props","_style","style","getColumnLabel","item","colName","_cellProps","active","Component"],"sourceRoot":""}