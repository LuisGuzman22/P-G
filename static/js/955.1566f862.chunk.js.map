{"version":3,"file":"static/js/955.1566f862.chunk.js","mappings":"uwaAGA,MAIA,EAJgBA,KACPC,EAAAA,EAAAA,KAACC,IAAM,CAACC,cAAeC,EAAaC,MAAM,EAAMC,MAAO,GAAIC,UAAU,W,qECD9E,MAUaC,EAAoBC,IACxBC,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,YACXC,QAASC,SAbSA,iBACFC,EAAAA,EAAMC,IAAI,6DACjBC,KAAKA,KAYLC,KAKAC,EAAoBC,IACxBT,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,aACXC,QAASC,SAjBUA,iBACHC,EAAAA,EAAMC,IAAI,6DACjBC,KAAKA,KAgBLI,I,kDCxBb,MAaA,EAb8BC,KAC5B,MAAMC,GAAcC,EAAAA,EAAAA,MASpB,MAAO,CAAEC,QANQC,GAEFH,EAAYI,aAAa,CAACD,IAIvB,C,4CCVpB,MAkBA,EAlB+BE,KAetB,CAAEC,YAdYZ,IACnBa,aAAaC,QAAQ,UAAWC,KAAKC,UAAUhB,GAAM,EAajCiB,aAXAjB,IACpBa,aAAaC,QAAQ,WAAYC,KAAKC,UAAUhB,GAAM,EAUpBkB,WAPjBA,IACVL,aAAaM,QAAQ,WAMkBC,YAJ3BpB,GACZa,aAAaM,QAAQ,a,4MCZhC,MAKA,EALwB1B,IACtB,MAAM,KAAEO,EAAI,UAAEqB,EAAS,MAAEC,IAAU9B,EAAAA,EAAAA,GAAiBC,GACpD,MAAO,CAAEO,OAAMqB,YAAWC,QAAO,E,0BCenC,MA8GA,EA9GwBC,KACtB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,EAAWb,aAAaM,QAAQ,cAChC,QAAEX,IAAYH,EAAAA,EAAAA,KAEdsB,EAAiBnB,EAAQ,cACzB,YAAEY,EAAW,YAAER,EAAW,aAAEK,IAAiBN,EAAAA,EAAAA,KAC7CiB,EAAab,KAAKc,MAAMT,MAEtBpB,KAAM8B,EAAW,UAAET,EAAS,MAAEC,GAAUS,EAAe,IAExDC,EAAkBC,IAAuBC,EAAAA,EAAAA,aACzCC,EAAaC,IAAkBF,EAAAA,EAAAA,YAyCtC,OArBAG,EAAAA,EAAAA,YAAU,KACR,GAAiB,UAAbX,EACFY,QAAQC,IAAI,eACRZ,GAAkBC,GAEpBJ,EAAS,yBAEN,CACLc,QAAQC,IAAI,YACZ,MAAMC,EAAiBb,EAAec,SAASC,MAAMC,GAC5CA,EAAaC,KAAOhB,EAAWgB,KAExCX,EAAoBO,GACpBJ,EAAeI,EAAeK,QAChC,IACC,CAAClB,EAAgBC,KAEpBS,EAAAA,EAAAA,YAAU,KACK,UAAbX,IAAmC,OAAXI,QAAW,IAAXA,OAAW,EAAXA,EAAagB,WAAYV,EAAeN,EAAYgB,SAAS,GACpF,CAAChB,KAGF7C,EAAAA,EAAAA,KAAA8D,EAAAA,SAAA,CAAAC,UACE/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAI,CAACC,GAAI,EAAG3D,UAAU,6BAA4ByD,UACjDG,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAJ,SAAA,EACJ/D,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAAL,UACT/D,EAAAA,EAAAA,KAAA,MAAA+D,SAAI,6BAEN/D,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAAAN,UACRG,EAAAA,EAAAA,MAACI,EAAAA,EAAS,CAAAP,SAAA,CACP3B,IAAapC,EAAAA,EAAAA,KAACD,EAAAA,EAAO,KACpBqC,GACAc,GACAA,EAAYqB,KAAI,CAACX,EAASY,KAAW,IAADC,EAClC,OACEzE,EAAAA,EAAAA,KAAC0E,EAAAA,EAAI,CAAAX,UACH/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAI,CAAAD,UACH/D,EAAAA,EAAAA,KAAC2E,EAAAA,EAAa,CACZC,QAASA,KAxDThB,KACtB,GAAiB,UAAbnB,EAAsB,CACxB,MAAM1B,EAAO,CACX8D,KAAMjB,EAAQiB,KACdlB,GAAIC,EAAQD,IAEdhC,EAAYZ,GACZwB,EAAS,YACX,KAAO,CACL,MAAMxB,EAAO,CACX8D,KAAMjB,EAAQiB,KACdlB,GAAIC,EAAQD,IAEdhC,EAAYZ,GACZwB,EAAS,aACX,GA0CwBuC,CAAelB,EAAQ,EAEzBtD,UAAU,OACVyE,MACE/E,EAAAA,EAAAA,KAACgF,EAAAA,EAAK,CACJ1E,UAAU,kBACVyE,KACE,mEAEFE,OAAQ,KAGZC,OACEhB,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAAC7E,UAAU,6BAA4ByD,SAAA,EAChD/D,EAAAA,EAAAA,KAAC0E,EAAAA,EAAI,CAAAX,UACH/D,EAAAA,EAAAA,KAAA,QAAMM,UAAU,gBAAeyD,SAAEH,EAAQiB,UAE3C7E,EAAAA,EAAAA,KAAC0E,EAAAA,EAAI,CAAAX,UACHG,EAAAA,EAAAA,MAAA,QAAM5D,UAAU,kBAAiByD,SAAA,CAAC,cACpBH,EAAQwB,gBAK5BC,MAAO,CAAE,oBAAqB,WAC9BC,OAAQ,CAAC,CAAEC,MAAO,YAAaC,OAAc,OAAP5B,QAAO,IAAPA,GAAkB,QAAXa,EAAPb,EAAS6B,iBAAS,IAAAhB,OAAX,EAAPA,EAAoBiB,SAAU,SA7B/DlB,EAgCJ,eAOpB,C","sources":["components/loading.jsx","hooks/useFetch.js","hooks/useGetCachedQueryData.js","hooks/useRegisterGeneralData.js","hooks/useGetProjects.js","pages/ProjectSelector.jsx"],"sourcesContent":["import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://42c56e69edd041d8afddac6929f0ea8b.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n","import { useQueryClient } from '@tanstack/react-query'\n\nconst useGetCachedQueryData = () => {\n  const queryClient = useQueryClient()\n\n  // First create a helper function\n  const getData = (key) => {\n    // Make sure that the key is wrapped in an array for this to work\n    const data = queryClient.getQueryData([key])\n    return data\n  }\n\n  return { getData }\n}\n\nexport default useGetCachedQueryData\n","import { useEffect, useState } from 'react'\n\nconst useRegisterGeneralData = () => {\n  const saveProject = (data) => {\n    localStorage.setItem('project', JSON.stringify(data))\n  }\n  const saveContract = (data) => {\n    localStorage.setItem('contract', JSON.stringify(data))\n  }\n\n  const getProject = () => {\n    return localStorage.getItem('project')\n  }\n  const getContract = (data) => {\n    return localStorage.getItem('contract')\n  }\n\n  return { saveProject, saveContract, getProject, getContract }\n}\n\nexport default useRegisterGeneralData\n","import { useFetchProyects } from './useFetch'\n\nconst useGetProjects = (projectId) => {\n  const { data, isLoading, error } = useFetchProyects(projectId)\n  return { data, isLoading, error }\n}\n\nexport default useGetProjects\n","import { React, useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\nimport Loading from 'src/components/loading'\nimport useGetProjects from 'src/hooks/useGetProjects'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\n\nconst ProjectSelector = () => {\n  const navigate = useNavigate()\n  const userType = localStorage.getItem('USER_TYPE')\n  const { getData } = useGetCachedQueryData()\n\n  const contractsQuery = getData('contracts')\n  const { getContract, saveProject, saveContract } = useRegisterGeneralData()\n  const contractLS = JSON.parse(getContract())\n\n  const { data: projectData, isLoading, error } = useGetProjects(1)\n\n  const [selectedContract, setSelectedContract] = useState()\n  const [projectList, setProjectList] = useState()\n\n  const onClickHandler = (project) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: project.name,\n        id: project.id,\n      }\n      saveProject(data)\n      navigate(`/contrato`)\n    } else {\n      const data = {\n        name: project.name,\n        id: project.id,\n      }\n      saveProject(data)\n      navigate(`/dashboard`)\n    }\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      console.log('no es admin')\n      if (contractsQuery && contractLS) {\n      } else {\n        navigate(`/project_selector`)\n      }\n    } else {\n      console.log('es admin')\n      const contractFinded = contractsQuery.contract.find((contractData) => {\n        return contractData.id === contractLS.id\n      })\n      setSelectedContract(contractFinded)\n      setProjectList(contractFinded.project)\n    }\n  }, [contractsQuery, contractLS])\n\n  useEffect(() => {\n    userType !== 'admin' && projectData?.projects && setProjectList(projectData.projects)\n  }, [projectData])\n\n  return (\n    <>\n      <CCol sm={6} className=\"project-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Proyecto</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {isLoading && <Loading />}\n              {!isLoading &&\n                projectList &&\n                projectList.map((project, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(project)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{project.name}</span>\n                              </CRow>\n                              <CRow>\n                                <span className=\"project-manager\">\n                                  Encargado: {project.manager}\n                                </span>\n                              </CRow>\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55' }}\n                          values={[{ title: 'Contratos', value: project?.contracts?.length || 0 }]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ProjectSelector\n"],"names":["Loading","_jsx","Lottie","animationData","loadingjson","loop","width","className","useFetchProyects","projectId","useQuery","queryKey","queryFn","async","axios","get","data","fetchProducts","useFetchContract","contractId","fetchContracts","useGetCachedQueryData","queryClient","useQueryClient","getData","key","getQueryData","useRegisterGeneralData","saveProject","localStorage","setItem","JSON","stringify","saveContract","getProject","getItem","getContract","isLoading","error","ProjectSelector","navigate","useNavigate","userType","contractsQuery","contractLS","parse","projectData","useGetProjects","selectedContract","setSelectedContract","useState","projectList","setProjectList","useEffect","console","log","contractFinded","contract","find","contractData","id","project","projects","_Fragment","children","CCol","sm","_jsxs","CCard","CCardTitle","CCardBody","CCardText","map","index","_project$contracts","CRow","CWidgetStatsD","onClick","name","onClickHandler","icon","CIcon","height","chart","CContainer","manager","style","values","title","value","contracts","length"],"sourceRoot":""}