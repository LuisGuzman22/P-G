{"version":3,"file":"static/js/673.840fd214.chunk.js","mappings":"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","sources":["components/loading.jsx","hooks/useFetch.js","hooks/useRegisterUser.js","components/ModalAddUser.jsx","hooks/useGetUserList.js","components/UserList.jsx","pages/User.jsx","utils/regex.js","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/table/CTableFoot.tsx","../node_modules/@coreui/react/src/components/table/CTableCaption.tsx","../node_modules/@coreui/react/src/components/table/CTableResponsiveWrapper.tsx","../node_modules/@coreui/react/src/components/table/utils.ts","../node_modules/@coreui/react/src/components/table/CTable.tsx","../node_modules/@coreui/react/src/components/table/CTableBody.tsx","../node_modules/@coreui/react/src/components/table/CTableDataCell.tsx","../node_modules/@coreui/react/src/components/table/CTableHead.tsx","../node_modules/@coreui/react/src/components/table/CTableHeaderCell.tsx","../node_modules/@coreui/react/src/components/table/CTableRow.tsx"],"sourcesContent":["import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/projects', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst fetchUsers = async () => {\n  const res = await axios.get('https://b4b07e25f42d4135b6fc3791a6e1d1f8.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchBasicData = async (contractId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/basicData', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst testToken = async () => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/test', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nexport const fetchReportsData = async () => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/reports', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst userType = localStorage.getItem('USER_TYPE')\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    refetchType: 'all',\n    // refetchInterval: 10000,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n\nexport const useFetchBasicData = (contractId) => {\n  return useQuery({\n    queryKey: ['basics'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchBasicData(contractId)\n    },\n  })\n}\n\nexport const useFetchUserList = () => {\n  return useQuery({\n    queryKey: ['users'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchUsers()\n    },\n  })\n}\n\nexport const useFetchReportsData = () => {\n  return useQuery({\n    queryKey: ['reports'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchReportsData()\n    },\n  })\n}\n","import { useState } from 'react'\nimport { useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\nimport { useMutation } from '@tanstack/react-query'\n\nconst useRegisterUser = () => {\n  const [error, setError] = useState()\n  const [isError, setIsError] = useState(false)\n  const queryClient = useQueryClient()\n\n  const mutation = useMutation({\n    mutationFn: async (newTodo) => {\n      return await axios\n        .post('/prueba', newTodo)\n        .then((res) => {\n          if (res.ok) {\n            setIsError(false)\n            return res.ok\n          } else {\n            setError('Error al registrar usuario')\n            setIsError(true)\n            return false\n          }\n        })\n        .catch((err) => {\n          setError('Error al registrar usuario')\n          setIsError(true)\n          return false\n        })\n    },\n    onSuccess: (suc) => {\n      queryClient.invalidateQueries({ queryKey: ['users'] })\n    },\n    onError: (err) => {\n      setError('Error al registrar usuario')\n      setIsError(true)\n      return false\n    },\n  })\n\n  const register = (data) => {\n    setIsError(false)\n    const response = mutation.mutate(data)\n    return response\n  }\n\n  return { register, error, isError }\n}\n\nexport default useRegisterUser\n","/* eslint-disable react/prop-types */\nimport { React, useEffect, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormSelect,\n  CToast,\n  CToastBody,\n  CToastClose,\n  CFormCheck,\n} from '@coreui/react'\nimport useRegisterUser from 'src/hooks/useRegisterUser'\nimport { regex } from 'src/utils/regex'\nconst ModalAddUser = (props) => {\n  const initialState = {\n    userName: undefined,\n    userMail: undefined,\n    userProject: undefined,\n    userContract: undefined,\n    userPassword: undefined,\n    isActive: undefined,\n  }\n\n  const [user, setUser] = useState(props.selectedUser ? props.selectedUser : initialState)\n  const [userNameError, setUserNameError] = useState(false)\n  const [userMailError, setUserMailError] = useState(false)\n  const [userProjectError, setUserProjectError] = useState(false)\n  const [userContractError, setUserContractError] = useState(false)\n  const [userPasswordError, setUserPasswordError] = useState(false)\n  const [errorForm, setErrorForm] = useState(0)\n\n  const { register, error, isError } = useRegisterUser()\n\n  const onChangeData = (e) => {\n    setUser({ ...user, [e.target.id]: e.target.value })\n  }\n\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  const handleRegisterUser = () => {\n    if (!user.name || user.name === '') {\n      setErrorForm(1)\n      setUserNameError(true)\n    } else {\n      setErrorForm(3)\n      setUserNameError(false)\n    }\n    if (!user.userMail || user.userMail === '') {\n      setErrorForm(1)\n      setUserMailError(true)\n    } else {\n      setErrorForm(3)\n      setUserMailError(false)\n    }\n    if (!user.userPassword || user.userPassword === '') {\n      setErrorForm(1)\n      setUserPasswordError(true)\n    } else {\n      setErrorForm(3)\n      setUserPasswordError(false)\n    }\n    if (!user.userContract || user.userContract === '-1') {\n      setErrorForm(1)\n      setUserContractError(true)\n    } else {\n      setErrorForm(3)\n      setUserContractError(false)\n    }\n    if (!user.userProject || user.userProject === '-1') {\n      setErrorForm(1)\n      setUserProjectError(true)\n    } else {\n      setErrorForm(3)\n      setUserProjectError(false)\n    }\n  }\n\n  useEffect(() => {\n    if (user.isActive === undefined) {\n      user.isActive = false\n    }\n    if (errorForm === 3) register(user)\n  }, [errorForm])\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Usuario</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CToast\n          autohide={true}\n          visible={isError}\n          color=\"danger\"\n          className=\"text-white align-items-center\" // VER EVENTO DE ESCONDERSE PARA RESETEAR EL STATE DE ERROR\n        >\n          <div className=\"d-flex\">\n            <CToastBody>{error}</CToastBody>\n          </div>\n        </CToast>\n        <CToast\n          autohide={true}\n          visible={errorForm === 1}\n          color=\"danger\"\n          onClose={() => {\n            setErrorForm(2)\n          }}\n          className=\"text-white align-items-center\"\n        >\n          <div className=\"d-flex\">\n            <CToastBody>Debe completar todos los datos para crear el usuario</CToastBody>\n          </div>\n        </CToast>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                invalid={userNameError}\n                id=\"userName\"\n                label=\"Nombre\"\n                placeholder=\"Nombre\"\n                value={user.userName || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setUserNameError(false)\n                  } else {\n                    setUserNameError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                invalid={userMailError}\n                id=\"userMail\"\n                value={user.userMail || ''}\n                label=\"Correo\"\n                placeholder=\"Correo\"\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value && e.target.value.match(regex)) {\n                    setUserMailError(false)\n                  } else {\n                    setUserMailError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormSelect\n                aria-label=\"Default select example\"\n                label=\"Proyecto\"\n                id=\"userProject\"\n                invalid={userProjectError}\n                value={user.userProject}\n                onBlur={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserProjectError(false)\n                  } else {\n                    setUserProjectError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserProjectError(false)\n                  } else {\n                    setUserProjectError(true)\n                  }\n                  onChangeData(e)\n                }}\n              >\n                <option value={'-1'}>Seleccione</option>\n                <option value={'Proyecto 1'}>Proyecto 1</option>\n                <option value={'Proyecto 2'}>Proyecto 2</option>\n              </CFormSelect>\n            </CCol>\n            <CCol sm={6}>\n              <CFormSelect\n                aria-label=\"Default select example\"\n                label=\"Contrato\"\n                invalid={userContractError}\n                value={user.userContract}\n                id=\"userContract\"\n                onBlur={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserContractError(false)\n                  } else {\n                    setUserContractError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserContractError(false)\n                  } else {\n                    setUserContractError(true)\n                  }\n                  onChangeData(e)\n                }}\n              >\n                <option value={'-1'}>Seleccione</option>\n                <option value={'Contrato 1'}>Contrato 1</option>\n                <option value={'Contrato 2'}>Contrato 2</option>\n              </CFormSelect>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"password\"\n                id=\"userPassword\"\n                invalid={userPasswordError}\n                value={user.userPassword || ''}\n                label=\"Contraseña\"\n                placeholder=\"Contraseña\"\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setUserPasswordError(false)\n                  } else {\n                    setUserPasswordError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormCheck\n                id=\"isActive\"\n                label=\"Activo\"\n                defaultChecked={user.isActive}\n                onChange={(e) => {\n                  setUser({ ...user, [e.target.id]: !user.isActive })\n                }}\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\" onClick={() => handleRegisterUser()}>\n          Añadir usuario\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddUser\n","import { useFetchUserList } from './useFetch'\n\nconst useGetUserList = () => {\n  const { data, isLoading, error } = useFetchUserList()\n  return { data, isLoading, error }\n}\n\nexport default useGetUserList\n","import React, { useEffect, useState } from 'react'\nimport {\n  CTable,\n  CTableHead,\n  CButton,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n} from '@coreui/react'\nimport useGetUserList from 'src/hooks/useGetUserList'\nimport Loading from './loading'\nimport ModalAddUser from './ModalAddUser'\n\nconst ProjectList = () => {\n  const { data, isLoading, error } = useGetUserList()\n  const [visibleAddUser, setVisibleAddUser] = useState(false)\n  const [selectedUser, setSelectedUser] = useState()\n\n  const handleEditUser = (user) => {\n    setSelectedUser(user)\n    setVisibleAddUser(!visibleAddUser)\n  }\n\n  return (\n    <>\n      {isLoading && <Loading />}\n      {visibleAddUser && (\n        <ModalAddUser\n          visible={true}\n          selectedUser={selectedUser}\n          sendDataToParent={(data) => {\n            setVisibleAddUser(data)\n          }}\n        />\n      )}\n      <CTable>\n        <CTableHead>\n          <CTableRow>\n            <CTableHeaderCell scope=\"col\">ID</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Nombre</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Correo</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Proyecto</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Contrato</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Acción</CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {data &&\n            data.users.map((user) => {\n              return (\n                <CTableRow key={user.id}>\n                  <CTableDataCell>{user.id}</CTableDataCell>\n                  <CTableDataCell>{user.userName}</CTableDataCell>\n                  <CTableDataCell>{user.userMail}</CTableDataCell>\n                  <CTableDataCell>{user.userProject}</CTableDataCell>\n                  <CTableDataCell>{user.userContract}</CTableDataCell>\n                  <CTableDataCell>\n                    <CButton className=\"btn-edit\" onClick={(e) => handleEditUser(user)}>\n                      Editar\n                    </CButton>\n                    <CButton className=\"btn-del\">Eliminar</CButton>\n                  </CTableDataCell>\n                </CTableRow>\n              )\n            })}\n        </CTableBody>\n      </CTable>\n    </>\n  )\n}\n\nexport default ProjectList\n","import React, { useState } from 'react'\nimport { CCard, CButton, CCardBody, CCardText } from '@coreui/react'\nimport ModalAddUser from 'src/components/ModalAddUser'\nimport UserList from 'src/components/UserList'\n\nconst User = () => {\n  const [visibleAddUser, setVisibleAddUser] = useState(false)\n\n  return (\n    <div className=\"user\">\n      {visibleAddUser && (\n        <ModalAddUser\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleAddUser(data)\n          }}\n        />\n      )}\n\n      <CCard>\n        <CCardBody>\n          <CButton onClick={() => setVisibleAddUser(!visibleAddUser)}>Añadir usuario</CButton>\n          <CCardText>\n            <UserList />\n          </CCardText>\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nexport default User\n","export const regex =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardText: PolymorphicRefForwardingComponent<'p', CCardTextProps> = forwardRef<\n  HTMLParagraphElement,\n  CCardTextProps\n>(({ children, as: Component = 'p', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import PropTypes from 'prop-types'\nimport React, { forwardRef, HTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableFootProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableFoot = forwardRef<HTMLTableSectionElement, CTableFootProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tfoot\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tfoot>\n    )\n  },\n)\n\nCTableFoot.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableFoot.displayName = 'CTableFoot'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CTableCaption = forwardRef<\n  HTMLTableCaptionElement,\n  HTMLAttributes<HTMLTableCaptionElement>\n>(({ children, ...props }, ref) => {\n  return (\n    <caption {...props} ref={ref}>\n      {children}\n    </caption>\n  )\n})\n\nCTableCaption.propTypes = {\n  children: PropTypes.node,\n}\n\nCTableCaption.displayName = 'CTableCaption'\n","import React, { FC, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport interface CTableResponsiveWrapperProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n}\n\nexport const CTableResponsiveWrapper: FC<CTableResponsiveWrapperProps> = ({\n  children,\n  responsive,\n  ...rest\n}) => {\n  return responsive ? (\n    <div\n      className={\n        typeof responsive === 'boolean' ? 'table-responsive' : `table-responsive-${responsive}`\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  ) : (\n    <>{children}</>\n  )\n}\n\nCTableResponsiveWrapper.propTypes = {\n  children: PropTypes.node,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n}\n\nCTableResponsiveWrapper.displayName = 'CTableResponsiveWrapper'\n","import type { Column, Item } from './types'\n\nexport const pretifyName = (name: string) => {\n  return name\n    .replace(/[-_.]/g, ' ')\n    .replace(/ +/g, ' ')\n    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\nexport const getColumnLabel = (column: Column | string) =>\n  typeof column === 'object' ? column.label ?? pretifyName(column.key) : pretifyName(column)\n\nexport const getColumnNames = (columns: (string | Column)[] | undefined, items?: Item[]) =>\n  columns\n    ? columns.map((column: Column | string) => {\n        return typeof column === 'object' ? column.key : column\n      })\n    : items && getColumnNamesFromItems(items)\n\nexport const getColumnNamesFromItems = (items: Item[]) =>\n  Object.keys(items[0] || {}).filter((el) => el.charAt(0) !== '_')\n","import React, { forwardRef, TableHTMLAttributes, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTableHead, CTableHeadProps } from './CTableHead'\nimport { CTableHeaderCell } from './CTableHeaderCell'\nimport { CTableBody } from './CTableBody'\nimport { CTableDataCell } from './CTableDataCell'\nimport { CTableRow } from './CTableRow'\nimport { CTableFoot, CTableFootProps } from './CTableFoot'\nimport { CTableCaption } from './CTableCaption'\nimport { CTableResponsiveWrapper } from './CTableResponsiveWrapper'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport { getColumnLabel, getColumnNames } from './utils'\nimport type { Column, FooterItem, Item } from './types'\n\nexport interface CTableProps extends Omit<TableHTMLAttributes<HTMLTableElement>, 'align'> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the caption on the top if you set `caption=\"top\"` of the table or set the text of the table caption.\n   */\n  caption?: 'top' | string\n  /**\n   * Set the text of the table caption and the caption on the top of the table.\n   *\n   * @since 4.3.0\n   */\n  captionTop?: string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Prop for table columns configuration. If prop is not defined, table will display columns based on the first item keys, omitting keys that begins with underscore (e.g. '_props')\n   *\n   * In columns prop each array item represents one column. Item might be specified in two ways:\n   * String: each item define column name equal to item value.\n   * Object: item is object with following keys available as column configuration:\n   * - key (required)(String) - define column name equal to item key.\n   * - label (String) - define visible label of column. If not defined, label will be generated automatically based on column name, by converting kebab-case and snake_case to individual words and capitalization of each word.\n   * - _props (Object) - adds classes to all cels in column, ex. `_props: { scope: 'col', className: 'custom-class' }`,\n   * - _style (Object) - adds styles to the column header (useful for defining widths)\n   *\n   * @since 4.3.0\n   */\n  columns?: (string | Column)[]\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Array of objects or strings, where each element represents one cell in the table footer.\n   *\n   * Example items:\n   * `['FooterCell', 'FooterCell', 'FooterCell']`\n   * or\n   * `[{ label: 'FooterCell', _props: { color: 'success' }, ...]`\n   *\n   * @since 4.3.0\n   */\n  footer?: (FooterItem | string)[]\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Array of objects, where each object represents one item - row in table. Additionally, you can add style classes to each row by passing them by '_props' key and to single cell by '_cellProps'.\n   *\n   * Example item:\n   * `{ name: 'John' , age: 12, _props: { color: 'success' }, _cellProps: { age: { className: 'fw-bold'}}}`\n   *\n   * @since 4.3.0\n   */\n  items?: Item[]\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n  /**\n   * Add zebra-striping to any table column.\n   *\n   * @since 4.3.0\n   */\n  stripedColumns?: boolean\n  /**\n   * Properties that will be passed to the table footer component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablefoot\n   * @since 4.3.0\n   */\n  tableFootProps?: CTableFootProps\n  /**\n   * Properties that will be passed to the table head component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablehead\n   * @since 4.3.0\n   */\n  tableHeadProps?: CTableHeadProps\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      captionTop,\n      className,\n      color,\n      columns,\n      footer,\n      hover,\n      items,\n      responsive,\n      small,\n      striped,\n      stripedColumns,\n      tableFootProps,\n      tableHeadProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const columnNames = useMemo(() => getColumnNames(columns, items), [columns, items])\n\n    return (\n      <CTableResponsiveWrapper responsive={responsive}>\n        <table\n          className={classNames(\n            'table',\n            {\n              [`align-${align}`]: align,\n              [`border-${borderColor}`]: borderColor,\n              [`caption-top`]: captionTop || caption === 'top',\n              'table-bordered': bordered,\n              'table-borderless': borderless,\n              [`table-${color}`]: color,\n              'table-hover': hover,\n              'table-sm': small,\n              'table-striped': striped,\n              'table-striped-columns': stripedColumns,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {((caption && caption !== 'top') || captionTop) && (\n            <CTableCaption>{caption || captionTop}</CTableCaption>\n          )}\n          {columns && (\n            <CTableHead {...tableHeadProps}>\n              <CTableRow>\n                {columns.map((column: Column, index: number) => (\n                  <CTableHeaderCell\n                    {...(column._props && { ...column._props })}\n                    {...(column._style && { style: { ...column._style } })}\n                    key={index}\n                  >\n                    {getColumnLabel(column)}\n                  </CTableHeaderCell>\n                ))}\n              </CTableRow>\n            </CTableHead>\n          )}\n          {items && (\n            <CTableBody>\n              {items.map((item: Item, index: number) => (\n                <CTableRow {...(item._props && { ...item._props })} key={index}>\n                  {columnNames &&\n                    columnNames.map((colName: string, index: number) => {\n                      // eslint-disable-next-line unicorn/no-negated-condition\n                      return item[colName] !== undefined ? (\n                        <CTableDataCell\n                          {...(item._cellProps && {\n                            ...(item._cellProps['all'] && { ...item._cellProps['all'] }),\n                            ...(item._cellProps[colName] && { ...item._cellProps[colName] }),\n                          })}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ) : null\n                    })}\n                </CTableRow>\n              ))}\n            </CTableBody>\n          )}\n          {children}\n          {footer && (\n            <CTableFoot {...tableFootProps}>\n              <CTableRow>\n                {footer.map((item: FooterItem | string, index: number) => (\n                  <CTableDataCell\n                    {...(typeof item === 'object' && item._props && { ...item._props })}\n                    key={index}\n                  >\n                    {typeof item === 'object' ? item.label : item}\n                  </CTableDataCell>\n                ))}\n              </CTableRow>\n            </CTableFoot>\n          )}\n        </table>\n      </CTableResponsiveWrapper>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top'])]),\n  captionTop: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  columns: PropTypes.array,\n  footer: PropTypes.array,\n  hover: PropTypes.bool,\n  items: PropTypes.array,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  stripedColumns: PropTypes.bool,\n  tableFootProps: PropTypes.shape({ ...CTableFoot.propTypes }),\n  tableHeadProps: PropTypes.shape({ ...CTableHead.propTypes }),\n}\n\nCTable.displayName = 'CTable'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableBodyProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableBody = forwardRef<HTMLTableSectionElement, CTableBodyProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tbody\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tbody>\n    )\n  },\n)\n\nCTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableBody.displayName = 'CTableBody'\n","import React, { forwardRef, TdHTMLAttributes, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableDataCellProps\n  extends Omit<TdHTMLAttributes<HTMLTableCellElement>, 'align'>,\n    Omit<ThHTMLAttributes<HTMLTableCellElement>, 'align'> {\n  /**\n   * Highlight a table row or cell.\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * @ignore\n   */\n  colSpan?: number\n}\n\nexport const CTableDataCell = forwardRef<HTMLTableCellElement, CTableDataCellProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    const Component = rest.scope ? 'th' : 'td'\n\n    return (\n      <Component\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCTableDataCell.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableDataCell.displayName = 'CTableDataCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeadProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHead = forwardRef<HTMLTableSectionElement, CTableHeadProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <thead\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </thead>\n    )\n  },\n)\n\nCTableHead.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHead.displayName = 'CTableHead'\n","import React, { forwardRef, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableCellElement, CTableHeaderCellProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <th\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    return (\n      <tr\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n"],"names":["Loading","_jsx","Lottie","animationData","loadingjson","loop","width","className","localStorage","getItem","useFetchProyects","projectId","useQuery","queryKey","refetchType","refetchOnWindowFocus","queryFn","async","axios","get","headers","Authorization","data","fetchProducts","useFetchContract","contractId","fetchContracts","useFetchBasicData","staleTime","gcTime","fetchBasicData","useFetchUserList","fetchUsers","useFetchReportsData","fetchReportsData","useRegisterUser","error","setError","useState","isError","setIsError","queryClient","useQueryClient","mutation","useMutation","mutationFn","post","newTodo","then","res","ok","catch","err","onSuccess","suc","invalidateQueries","onError","register","mutate","props","initialState","userName","undefined","userMail","userProject","userContract","userPassword","isActive","user","setUser","selectedUser","userNameError","setUserNameError","userMailError","setUserMailError","userProjectError","setUserProjectError","userContractError","setUserContractError","userPasswordError","setUserPasswordError","errorForm","setErrorForm","onChangeData","e","target","id","value","handleClick","sendDataToParent","useEffect","_jsxs","CModal","scrollable","visible","onClose","size","children","CModalHeader","CModalTitle","CModalBody","CToast","autohide","color","CToastBody","CForm","CRow","CCol","sm","CFormInput","type","invalid","label","placeholder","text","onBlur","onChange","match","regex","CFormSelect","CFormCheck","defaultChecked","CModalFooter","CButton","onClick","name","useGetUserList","isLoading","ProjectList","visibleAddUser","setVisibleAddUser","setSelectedUser","_Fragment","ModalAddUser","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","users","map","CTableDataCell","handleEditUser","User","CCard","CCardBody","CCardText","UserList","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","options","tooltipFeedback","valid","CFormControlWrapper","describedby","concat","option","index","disabled","key","CTableFoot","colorPropType","CTableCaption","CTableResponsiveWrapper","responsive","pretifyName","replace","split","word","charAt","toUpperCase","slice","join","getColumnNamesFromItems","items","Object","keys","filter","el","align","borderColor","bordered","borderless","caption","captionTop","columns","footer","hover","small","striped","stripedColumns","tableFootProps","tableHeadProps","columnNames","useMemo","column","getColumnNames","_props","_style","style","getColumnLabel","item","colName","_cellProps","active"],"sourceRoot":""}