{"version":3,"file":"static/js/164.5a6d6901.chunk.js","mappings":"0QAaA,MAiDA,EAjDqBA,KACnB,MAKM,KAAEC,EAAI,UAAEC,IAAcC,EAAAA,EAAAA,GAAS,CACnCC,SAAU,CAAC,aACXC,QAASC,SAPYA,iBACHC,EAAAA,EAAMC,IAAI,iEACjBP,KAAKA,KAMPQ,KAIX,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAAAD,SAAA,EACHE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAC,YACNE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAC,aACNE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAC,SACNE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAC,iBACNE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAC,cAGRE,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,UAAU,gBAAeL,UACjCV,IACI,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMiB,KAAI,CAACC,EAAUC,KAEjBV,EAAAA,EAAAA,MAACW,EAAAA,EAAc,CAACC,QAASH,EAASI,GAAGX,SAAA,EACnCE,EAAAA,EAAAA,KAACU,EAAAA,EAAgB,CAAAZ,UACfF,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAAAD,SAAA,EACHE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAEO,EAASM,gBAChBX,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAEO,EAASO,kBAChBZ,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAEO,EAASQ,eAChBb,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAEO,EAASS,iBAChBd,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAH,SAAEO,EAASU,qBAGpBnB,EAAAA,EAAAA,MAACoB,EAAAA,EAAc,CAAAlB,SAAA,EACbE,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAACd,UAAU,qBAAoBL,SAAC,YACxCE,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAACd,UAAU,qBAAoBL,SAAC,iBAZDO,EAASI,WAkB3D,E,gFC1CP,MA0FA,EA1F0BS,IACxB,MAAMC,EAAcA,KAClBD,EAAME,kBAAiB,EAAM,EAG/B,OACExB,EAAAA,EAAAA,MAACyB,EAAAA,EAAM,CACLC,YAAU,EACVC,QAASL,EAAMK,QACfC,QAASA,IAAML,IACf,kBAAgB,oCAChBM,KAAK,KACLtB,UAAU,yBAAwBL,SAAA,EAElCE,EAAAA,EAAAA,KAAC0B,EAAAA,EAAY,CAAA5B,UACXE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAW,CAAClB,GAAG,oCAAmCX,SAAC,0BAEtDE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CAAA9B,UACTF,EAAAA,EAAAA,MAACiC,EAAAA,EAAK,CAAA/B,SAAA,EACJF,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAAAD,SAAA,EACHE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAC6B,GAAI,EAAEhC,UACVE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CACTC,KAAK,OACLvB,GAAG,eACHwB,MAAM,SACNC,YAAY,SACZC,KAAK,GAELC,SAAWC,IACTC,QAAQC,IAAIF,EAAEG,OAAOC,MAAM,OAIjCzC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAC6B,GAAI,EAAEhC,UACVE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CACTC,KAAK,OACLvB,GAAG,iBACHwB,MAAM,UACNC,YAAY,UACZC,KAAK,WAKXvC,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAAAD,SAAA,EACHE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAC6B,GAAI,EAAEhC,UACVE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CACTC,KAAK,OACLvB,GAAG,cACHwB,MAAM,MACNC,YAAY,MACZC,KAAK,QAITvC,EAAAA,EAAAA,MAACK,EAAAA,EAAI,CAAC6B,GAAI,EAAEhC,SAAA,EACVE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CACTC,KAAK,OACLvB,GAAG,gBACHwB,MAAM,cACNC,YAAY,cACZC,KAAK,KAEJ,WAGPnC,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAAAD,UACHE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAC6B,GAAI,EAAEhC,UACVE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CACTC,KAAK,OACLvB,GAAG,eACHwB,MAAM,QACNC,YAAY,QACZC,KAAK,eAOfvC,EAAAA,EAAAA,MAAC8C,EAAAA,EAAY,CAAA5C,SAAA,EACXE,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAAC0B,MAAM,YAAYC,QAASA,IAAMzB,IAAcrB,SAAC,YAGzDE,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAACd,UAAU,UAASL,SAAC,4BAExB,ECnEb,EA9B+B+C,KAC7B,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAS,GAEvD,OACEpD,EAAAA,EAAAA,MAAA,OAAKO,UAAU,0BAAyBL,SAAA,EACtCE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,0BAEHgD,IACC9C,EAAAA,EAAAA,KAACiD,EAAgB,CACf1B,SAAS,EACTH,iBAAmBjC,IACjB4D,EAAmB5D,EAAK,KAK9Ba,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CAAC/C,UAAU,iBAAgBL,UAC/BE,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAAArD,UACRE,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAAC2B,QAASA,IAAMG,GAAoBD,GAAiBhD,SAAC,4BAGlEE,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CAAApD,UACJE,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAAArD,UACRE,EAAAA,EAAAA,KAACd,EAAY,UAGb,C,uHCpBGkE,GAAgBC,EAAAA,EAAAA,aAC3B,SAACC,EAAkCC,GAAhC,IAAAzD,EAAQwD,EAAAxD,SAAEK,EAASmD,EAAAnD,UAAKqD,GAA1BC,EAAAA,EAAAA,IAAAH,EAAA,0BACC,OACEI,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKxD,WAAWyD,EAAAA,EAAAA,GAAW,gBAAiBzD,IAAgBqD,EAAI,CAAED,IAAKA,IACpEzD,EAGP,IAGFsD,EAAcS,UAAY,CACxB/D,SAAUgE,IAAAA,KACV3D,UAAW2D,IAAAA,QAGbV,EAAcW,YAAc,gB,ICCfC,GAAeX,EAAAA,EAAAA,aAC1B,SAACC,EAA2EC,G,MAAzEzD,EAAQwD,EAAAxD,SAAEmE,EAASX,EAAAW,UAAE9D,EAASmD,EAAAnD,UAAE+D,EAAUZ,EAAAY,WAAE5C,EAAUgC,EAAAhC,WAAEG,EAAI6B,EAAA7B,KAAK+B,GAAnEC,EAAAA,EAAAA,IAAAH,EAAA,uEACC,OACEI,EAAAA,cACE,OAAAC,EAAAA,EAAAA,IAAA,CAAAxD,WAAWyD,EAAAA,EAAAA,GACT,gBAAcO,EAAA,CAEZ,wBAAuC,WAAdF,GACzBE,EAAuB,mBAAfD,EACJ,mBACA,oBAAAE,OAAoBF,EAAU,UAAUA,EAC5CC,EAAA,2BAA2B7C,EAC3B6C,EAAC,SAASC,OAAA3C,IAASA,EAAI,GAEzBtB,IAEEqD,EACJ,CAAAD,IAAKA,IAEJzD,EAGP,IAGFkE,EAAaH,UAAY,CACvBI,UAAWH,IAAAA,MAAgB,CAAC,MAAO,WACnChE,SAAUgE,IAAAA,KACV3D,UAAW2D,IAAAA,OACXI,WAAYJ,IAAAA,UAAoB,CAC9BA,IAAAA,KACAA,IAAAA,MAAmD,CAAC,KAAM,KAAM,KAAM,KAAM,UAE9ExC,WAAYwC,IAAAA,KACZrC,KAAMqC,IAAAA,MAAgB,CAAC,KAAM,KAAM,QAGrCE,EAAaD,YAAc,e,0BC8BdM,GAAgBC,EAAAA,EAAAA,eAAc,CAAC,GAE/BjD,GAASgC,EAAAA,EAAAA,aACpB,SACEC,EAoBAC,GAnBE,IAAAzD,EAAQwD,EAAAxD,SACRmE,EAASX,EAAAW,UACTE,EAAeb,EAAAiB,SAAfA,OAAQ,IAAAJ,GAAOA,EACfhE,EAASmD,EAAAnD,UACTqE,EAAAlB,EAAAmB,SAAAA,OAAW,IAAAD,EAAA,IAAGA,EACdE,EAAApB,EAAAqB,MAAAA,OAAK,IAAAD,GAAOA,EACZR,EAAUZ,EAAAY,WACVU,EAAetB,EAAAuB,SAAfA,OAAW,IAAAD,GAAIA,EACfpD,EAAO8B,EAAA9B,QACPsD,EAAgBxB,EAAAwB,iBAChBC,EAAMzB,EAAAyB,OACNC,EAAa1B,EAAA2B,OAAbA,OAAM,IAAAD,GAAOA,EACb1D,EAAUgC,EAAAhC,WACVG,EAAI6B,EAAA7B,KACJyD,EAAiB5B,EAAA6B,WAAjBA,OAAa,IAAAD,GAAIA,EACjBE,EAAA9B,EAAA+B,eAAAA,OAAc,IAAAD,GAAOA,EACrB7D,EAAO+B,EAAA/B,QACJiC,GAAIC,EAAAA,EAAAA,IAAAH,EAlBT,uMAsBMgC,GAAmBC,EAAAA,EAAAA,QAA2B,MAC9CC,GAAWD,EAAAA,EAAAA,QAAuB,MAClCE,GAAkBF,EAAAA,EAAAA,QAAuB,MACzCG,GAAYC,EAAAA,EAAAA,IAAapC,EAAKiC,GAE9BI,GAAyB5C,EAAAA,EAAAA,UAASzB,GAAjCsE,EAAQD,EAAA,GAAEE,EAAUF,EAAA,GACrBG,GAAsC/C,EAAAA,EAAAA,WAAS,GAA9CgD,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAElCG,EAAgB,CACpB3E,QAASsE,EACTC,WAAUA,IAGZK,EAAAA,EAAAA,YAAU,WACRL,EAAWvE,EACb,GAAG,CAACA,KAEJ4E,EAAAA,EAAAA,YAAU,W,MASR,OARIN,GACFP,EAAiBc,QAAUC,SAASC,cACpCD,SAASE,iBAAiB,UAAWC,GACrCH,SAASE,iBAAiB,UAAWE,IAEX,QAA1BnD,EAAAgC,EAAiBc,eAAS,IAAA9C,GAAAA,EAAAqB,QAGrB,WACL0B,SAASK,oBAAoB,UAAWF,GACxCH,SAASK,oBAAoB,UAAWD,EAC1C,CACF,GAAG,CAACZ,IAEJ,IAAMc,EAAgB,WACpB,MAAiB,WAAbpC,EACK0B,GAAkB,IAG3BH,GAAW,GAEJtE,GAAWA,IACpB,GAEAoF,EAAAA,EAAAA,kBAAgB,WACd9B,GAAoBA,IACpB+B,YAAW,WAAM,OAAAZ,GAAkB,EAAM,GAAExB,EAC7C,GAAG,CAACuB,KAGJY,EAAAA,EAAAA,kBAAgB,WAwBd,OAvBIf,GACFQ,SAASS,KAAKC,UAAUC,IAAI,cAExBzC,IACF8B,SAASS,KAAKG,MAAMC,SAAW,SAC/Bb,SAASS,KAAKG,MAAME,aAAe,OAGrCN,YACE,W,MACElC,IAA2B,QAAlBrB,EAAAkC,EAASY,eAAS,IAAA9C,GAAAA,EAAAqB,Q,GAE7BQ,EAAaV,EAAW,KAG1B4B,SAASS,KAAKC,UAAUK,OAAO,cAE3B7C,IACF8B,SAASS,KAAKG,MAAMI,eAAe,YACnChB,SAASS,KAAKG,MAAMI,eAAe,mBAIhC,WACLhB,SAASS,KAAKC,UAAUK,OAAO,cAC3B7C,IACF8B,SAASS,KAAKG,MAAMI,eAAe,YACnChB,SAASS,KAAKG,MAAMI,eAAe,iBAEvC,CACF,GAAG,CAACxB,IAEJ,IAAMW,EAAqB,SAACc,GACtB9B,EAASY,SAAWZ,EAASY,SAAWkB,EAAM9E,QAChDmE,GAEJ,EAEMF,EAAgB,SAACa,GACH,WAAdA,EAAMC,KAAoB1C,GAC5B8B,GAEJ,EAEA,OACEjD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC8D,EAAAA,GAAU,CACTC,GAAI5B,EACJ6B,cAAY,EACZC,QAASnC,EACToC,QAAS7C,EACT8C,OAAQrG,EACRsG,cAAezC,EACf0C,QAAS5C,EAAaV,EAAW,IAEhC,SAACuD,GAAU,OACVtE,EAAAA,cAACuE,EAAAA,EAAkB,CAAChD,OAAQA,GAC1BvB,EAAAA,cAACW,EAAc6D,SAAS,CAAAzF,MAAOyD,GAC7BxC,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CACExD,WAAWyD,EAAAA,EAAAA,GACT,QACA,CACE,eAAgBoC,EAChBmC,KAAMhD,EACNiD,KAAgB,YAAVJ,GAER7H,GAEFkI,UAAW,GACNxC,EACD,CAAE,cAAc,EAAMyC,KAAM,UAC5B,CAAE,cAAe,QACrB,CAAArB,OACKtD,EAAAA,EAAAA,IAAC,CAAD,EAAW,WAAVqE,GAAsB,CAAEO,QAAS,WAEnC/E,EAAI,CACRD,IAAKmC,IAELhC,EAAAA,cAACM,EACC,CAAAC,UAAWA,EACXC,WAAYA,EACZ5C,WAAYA,EACZG,KAAMA,GAENiC,EAAAA,cAACN,EAAa,CAACG,IAAKkC,GAAkB3F,MAK/C,IAEFyE,GACCb,EAAAA,cAACuE,EAAAA,EAAmB,CAAAhD,OAAQA,GAC1BvB,EAAAA,cAAC8E,EAAAA,EAAU,CAAAjH,QAASsE,KAK9B,IAGFxE,EAAOwC,UAAY,CACjBI,UAAWH,IAAAA,MAAgB,CAAC,MAAO,WACnCS,SAAUT,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,MAA0B,CAAC,aAC1EhE,SAAUgE,IAAAA,KACV3D,UAAW2D,IAAAA,OACXW,SAAUX,IAAAA,OACVa,MAAOb,IAAAA,KACPI,WAAYJ,IAAAA,UAAoB,CAC9BA,IAAAA,KACAA,IAAAA,MAAmD,CAAC,KAAM,KAAM,KAAM,KAAM,UAE9Ee,SAAUf,IAAAA,KACVtC,QAASsC,IAAAA,KACTgB,iBAAkBhB,IAAAA,KAClBiB,OAAQjB,IAAAA,KACRmB,OAAQnB,IAAAA,KACRxC,WAAYwC,IAAAA,KACZrC,KAAMqC,IAAAA,MAAgB,CAAC,KAAM,KAAM,OACnCqB,WAAYrB,IAAAA,KACZuB,eAAgBvB,IAAAA,KAChBvC,QAASuC,IAAAA,MAGXzC,EAAO0C,YAAc,Q,4FC1RRnC,GAAayB,EAAAA,EAAAA,aACxB,SAACC,EAAkCC,GAAhC,IAAAzD,EAAQwD,EAAAxD,SAAEK,EAASmD,EAAAnD,UAAKqD,GAA1BC,EAAAA,EAAAA,IAAAH,EAAA,0BACC,OACEI,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKxD,WAAWyD,EAAAA,EAAAA,GAAW,aAAczD,IAAgBqD,EAAI,CAAED,IAAKA,IACjEzD,EAGP,IAGF8B,EAAWiC,UAAY,CACrB/D,SAAUgE,IAAAA,KACV3D,UAAW2D,IAAAA,QAGblC,EAAWmC,YAAc,Y,4FCfZrB,GAAeW,EAAAA,EAAAA,aAC1B,SAACC,EAAkCC,GAAhC,IAAAzD,EAAQwD,EAAAxD,SAAEK,EAASmD,EAAAnD,UAAKqD,GAA1BC,EAAAA,EAAAA,IAAAH,EAAA,0BACC,OACEI,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKxD,WAAWyD,EAAAA,EAAAA,GAAW,eAAgBzD,IAAgBqD,EAAI,CAAED,IAAKA,IACnEzD,EAGP,IAGF4C,EAAamB,UAAY,CACvB/D,SAAUgE,IAAAA,KACV3D,UAAW2D,IAAAA,QAGbpB,EAAaqB,YAAc,c,iHCRdrC,GAAe2B,EAAAA,EAAAA,aAC1B,SAACC,EAAsDC,GAApD,IAAAzD,EAAQwD,EAAAxD,SAAEK,EAASmD,EAAAnD,UAAEgE,EAAkBb,EAAAmF,YAAlBA,OAAW,IAAAtE,GAAOA,EAAKX,GAAIC,EAAAA,EAAAA,IAAAH,EAAlD,wCACSwC,GAAe4C,EAAAA,EAAAA,YAAWrE,EAAAA,GAAcyB,WAEhD,OACEpC,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKxD,WAAWyD,EAAAA,EAAAA,GAAW,eAAgBzD,IAAgBqD,EAAM,CAAAD,IAAKA,IACnEzD,EACA2I,GAAe/E,EAAAA,cAACiF,EAAAA,EAAa,CAAA/F,QAAS,WAAM,OAAAkD,GAAW,EAAM,IAGpE,IAGFpE,EAAamC,UAAY,CACvB/D,SAAUgE,IAAAA,KACV3D,UAAW2D,IAAAA,OACX2E,YAAa3E,IAAAA,MAGfpC,EAAaqC,YAAc,c,4FCpBdpC,GAAyE0B,EAAAA,EAAAA,aAGpF,SAACC,EAAwDC,GAAtD,IAAAzD,EAAQwD,EAAAxD,SAAEqE,EAAoBb,EAAAsF,GAAhBC,OAAY,IAAA1E,EAAA,KAAIA,EAAEhE,EAASmD,EAAAnD,UAAKqD,GAAIC,EAAAA,EAAAA,IAAAH,EAApD,+BACD,OACEI,EAAAA,cAACmF,GAASlF,EAAAA,EAAAA,IAAA,CAACxD,WAAWyD,EAAAA,EAAAA,GAAW,cAAezD,IAAgBqD,EAAI,CAAED,IAAKA,IACxEzD,EAGP,IAEA6B,EAAYkC,UAAY,CACtB+E,GAAI9E,IAAAA,YACJhE,SAAUgE,IAAAA,KACV3D,UAAW2D,IAAAA,QAGbnC,EAAYoC,YAAc,a","sources":["components/ContractList.jsx","components/ModalAddContract.jsx","pages/ContractAdministration.jsx","../node_modules/@coreui/react/src/components/modal/CModalContent.tsx","../node_modules/@coreui/react/src/components/modal/CModalDialog.tsx","../node_modules/@coreui/react/src/components/modal/CModal.tsx","../node_modules/@coreui/react/src/components/modal/CModalBody.tsx","../node_modules/@coreui/react/src/components/modal/CModalFooter.tsx","../node_modules/@coreui/react/src/components/modal/CModalHeader.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  CAccordion,\n  CAccordionItem,\n  CAccordionHeader,\n  CAccordionBody,\n  CRow,\n  CCol,\n  CButton,\n} from '@coreui/react'\nimport { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst ContractList = () => {\n  const fetchContracts = async () => {\n    const res = await axios.get('https://run.mocky.io/v3/9b3c50eb-0ea0-40b8-bf42-a6221aeab3da')\n    return res.data.data\n  }\n\n  const { data, isLoading } = useQuery({\n    queryKey: ['contracts'],\n    queryFn: async () => {\n      return fetchContracts()\n    },\n  })\n\n  return (\n    <>\n      <CRow>\n        <CCol>Nombre</CCol>\n        <CCol>Detalle</CCol>\n        <CCol>URL</CCol>\n        <CCol>Teléfono</CCol>\n        <CCol>Email</CCol>\n      </CRow>\n\n      <CAccordion className=\"contract-list\">\n        {!isLoading &&\n          data?.map((contract, index) => {\n            return (\n              <CAccordionItem itemKey={contract.id} key={contract.id}>\n                <CAccordionHeader>\n                  <CRow>\n                    <CCol>{contract.contractName}</CCol>\n                    <CCol>{contract.contractDetail}</CCol>\n                    <CCol>{contract.contractUrl}</CCol>\n                    <CCol>{contract.contractPhone}</CCol>\n                    <CCol>{contract.contractMail}</CCol>\n                  </CRow>\n                </CAccordionHeader>\n                <CAccordionBody>\n                  <CButton className=\"btn-project-action\">Editar</CButton>\n                  <CButton className=\"btn-project-action\">Curva S</CButton>\n                </CAccordionBody>\n              </CAccordionItem>\n            )\n          })}\n      </CAccordion>\n    </>\n  )\n}\n\nexport default ContractList\n","/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n} from '@coreui/react'\nconst ModalAddContract = (props) => {\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Contrato</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractName\"\n                label=\"Nombre\"\n                placeholder=\"Nombre\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n                onChange={(e) => {\n                  console.log(e.target.value)\n                }}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractDetail\"\n                label=\"Detalle\"\n                placeholder=\"Detalle\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractUrl\"\n                label=\"URL\"\n                placeholder=\"URL\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractPhone\"\n                label=\"Teléfono\"\n                placeholder=\"Teléfono\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />{' '}\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractMail\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\">Añadir contrato</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddContract\n","import { React, useState } from 'react'\nimport { CCard, CCardBody, CButton } from '@coreui/react'\nimport ContractList from 'src/components/ContractList'\nimport ModalAddContract from 'src/components/ModalAddContract'\n\nconst ContractAdministration = () => {\n  const [visibleContract, setVisibleContract] = useState(false)\n\n  return (\n    <div className=\"contract-administration\">\n      <h2>Administrar Contratos</h2>\n\n      {visibleContract && (\n        <ModalAddContract\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleContract(data)\n          }}\n        />\n      )}\n\n      <CCard className=\"action-buttons\">\n        <CCardBody>\n          <CButton onClick={() => setVisibleContract(!visibleContract)}>Añadir contrato</CButton>\n        </CCardBody>\n      </CCard>\n      <CCard>\n        <CCardBody>\n          <ContractList />\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nexport default ContractAdministration\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalContentProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalContent = forwardRef<HTMLDivElement, CModalContentProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-content', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalContent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalContent.displayName = 'CModalContent'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalDialogProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Does the modal dialog itself scroll, or does the whole dialog scroll within the window.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n}\n\nexport const CModalDialog = forwardRef<HTMLDivElement, CModalDialogProps>(\n  ({ children, alignment, className, fullscreen, scrollable, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'modal-dialog',\n          {\n            'modal-dialog-centered': alignment === 'center',\n            [typeof fullscreen === 'boolean'\n              ? 'modal-fullscreen'\n              : `modal-fullscreen-${fullscreen}-down`]: fullscreen,\n            'modal-dialog-scrollable': scrollable,\n            [`modal-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalDialog.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n}\n\nCModalDialog.displayName = 'CModalDialog'\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CBackdrop } from '../backdrop'\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CModalContent } from './CModalContent'\nimport { CModalDialog } from './CModalDialog'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CModalProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * Apply a backdrop on body while modal is open.\n   */\n  backdrop?: boolean | 'static'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * @ignore\n   */\n  duration?: number\n  /**\n   * Puts the focus on the modal when shown.\n   *\n   * @since v4.10.0\n   */\n  focus?: boolean\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Closes the modal when escape key is pressed.\n   */\n  keyboard?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClosePrevented?: () => void\n  /**\n   * Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\n   */\n  onShow?: () => void\n  /**\n   * Generates modal using createPortal.\n   */\n  portal?: boolean\n  /**\n   * Create a scrollable modal that allows scrolling the modal body.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n  /**\n   * Remove animation to create modal that simply appear rather than fade in to view.\n   */\n  transition?: boolean\n  /**\n   * By default the component is unmounted after close animation, if you want to keep the component mounted set this property to false.\n   */\n  unmountOnClose?: boolean\n  /**\n   * Toggle the visibility of modal component.\n   */\n  visible?: boolean\n}\n\ninterface ModalContextProps {\n  visible?: boolean\n  setVisible: React.Dispatch<React.SetStateAction<boolean | undefined>>\n}\n\nexport const CModalContext = createContext({} as ModalContextProps)\n\nexport const CModal = forwardRef<HTMLDivElement, CModalProps>(\n  (\n    {\n      children,\n      alignment,\n      backdrop = true,\n      className,\n      duration = 150,\n      focus = true,\n      fullscreen,\n      keyboard = true,\n      onClose,\n      onClosePrevented,\n      onShow,\n      portal = true,\n      scrollable,\n      size,\n      transition = true,\n      unmountOnClose = true,\n      visible,\n      ...rest\n    },\n    ref,\n  ) => {\n    const activeElementRef = useRef<HTMLElement | null>(null)\n    const modalRef = useRef<HTMLDivElement>(null)\n    const modalContentRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, modalRef)\n\n    const [_visible, setVisible] = useState(visible)\n    const [staticBackdrop, setStaticBackdrop] = useState(false)\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (_visible) {\n        activeElementRef.current = document.activeElement as HTMLElement | null\n        document.addEventListener('mouseup', handleClickOutside)\n        document.addEventListener('keydown', handleKeyDown)\n      } else {\n        activeElementRef.current?.focus()\n      }\n\n      return () => {\n        document.removeEventListener('mouseup', handleClickOutside)\n        document.removeEventListener('keydown', handleKeyDown)\n      }\n    }, [_visible])\n\n    const handleDismiss = () => {\n      if (backdrop === 'static') {\n        return setStaticBackdrop(true)\n      }\n\n      setVisible(false)\n\n      return onClose && onClose()\n    }\n\n    useLayoutEffect(() => {\n      onClosePrevented && onClosePrevented()\n      setTimeout(() => setStaticBackdrop(false), duration)\n    }, [staticBackdrop])\n\n    // Set focus to modal after open\n    useLayoutEffect(() => {\n      if (_visible) {\n        document.body.classList.add('modal-open')\n\n        if (backdrop) {\n          document.body.style.overflow = 'hidden'\n          document.body.style.paddingRight = '0px'\n        }\n\n        setTimeout(\n          () => {\n            focus && modalRef.current?.focus()\n          },\n          transition ? duration : 0,\n        )\n      } else {\n        document.body.classList.remove('modal-open')\n\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n\n      return () => {\n        document.body.classList.remove('modal-open')\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n    }, [_visible])\n\n    const handleClickOutside = (event: Event) => {\n      if (modalRef.current && modalRef.current == event.target) {\n        handleDismiss()\n      }\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && keyboard) {\n        handleDismiss()\n      }\n    }\n\n    return (\n      <>\n        <Transition\n          in={_visible}\n          mountOnEnter\n          nodeRef={modalRef}\n          onEnter={onShow}\n          onExit={onClose}\n          unmountOnExit={unmountOnClose}\n          timeout={transition ? duration : 0}\n        >\n          {(state) => (\n            <CConditionalPortal portal={portal}>\n              <CModalContext.Provider value={contextValues}>\n                <div\n                  className={classNames(\n                    'modal',\n                    {\n                      'modal-static': staticBackdrop,\n                      fade: transition,\n                      show: state === 'entered',\n                    },\n                    className,\n                  )}\n                  tabIndex={-1}\n                  {...(_visible\n                    ? { 'aria-modal': true, role: 'dialog' }\n                    : { 'aria-hidden': 'true' })}\n                  style={{\n                    ...(state !== 'exited' && { display: 'block' }),\n                  }}\n                  {...rest}\n                  ref={forkedRef}\n                >\n                  <CModalDialog\n                    alignment={alignment}\n                    fullscreen={fullscreen}\n                    scrollable={scrollable}\n                    size={size}\n                  >\n                    <CModalContent ref={modalContentRef}>{children}</CModalContent>\n                  </CModalDialog>\n                </div>\n              </CModalContext.Provider>\n            </CConditionalPortal>\n          )}\n        </Transition>\n        {backdrop && (\n          <CConditionalPortal portal={portal}>\n            <CBackdrop visible={_visible} />\n          </CConditionalPortal>\n        )}\n      </>\n    )\n  },\n)\n\nCModal.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'static'>(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  duration: PropTypes.number,\n  focus: PropTypes.bool,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  keyboard: PropTypes.bool,\n  onClose: PropTypes.func,\n  onClosePrevented: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  transition: PropTypes.bool,\n  unmountOnClose: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCModal.displayName = 'CModal'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalBody = forwardRef<HTMLDivElement, CModalBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalBody.displayName = 'CModalBody'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalFooter = forwardRef<HTMLDivElement, CModalFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalFooter.displayName = 'CModalFooter'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModal'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n"],"names":["ContractList","data","isLoading","useQuery","queryKey","queryFn","async","axios","get","fetchContracts","_jsxs","_Fragment","children","CRow","_jsx","CCol","CAccordion","className","map","contract","index","CAccordionItem","itemKey","id","CAccordionHeader","contractName","contractDetail","contractUrl","contractPhone","contractMail","CAccordionBody","CButton","props","handleClick","sendDataToParent","CModal","scrollable","visible","onClose","size","CModalHeader","CModalTitle","CModalBody","CForm","sm","CFormInput","type","label","placeholder","text","onChange","e","console","log","target","value","CModalFooter","color","onClick","ContractAdministration","visibleContract","setVisibleContract","useState","ModalAddContract","CCard","CCardBody","CModalContent","forwardRef","_a","ref","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CModalDialog","alignment","fullscreen","_b","concat","CModalContext","createContext","backdrop","_c","duration","_d","focus","_e","keyboard","onClosePrevented","onShow","_f","portal","_g","transition","_h","unmountOnClose","activeElementRef","useRef","modalRef","modalContentRef","forkedRef","useForkedRef","_j","_visible","setVisible","_k","staticBackdrop","setStaticBackdrop","contextValues","useEffect","current","document","activeElement","addEventListener","handleClickOutside","handleKeyDown","removeEventListener","handleDismiss","useLayoutEffect","setTimeout","body","classList","add","style","overflow","paddingRight","remove","removeProperty","event","key","Transition","in","mountOnEnter","nodeRef","onEnter","onExit","unmountOnExit","timeout","state","CConditionalPortal","Provider","fade","show","tabIndex","role","display","CBackdrop","closeButton","useContext","CCloseButton","as","Component"],"sourceRoot":""}