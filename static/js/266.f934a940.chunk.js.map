{"version":3,"file":"static/js/266.f934a940.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/modal/CModalContent.tsx","../node_modules/@coreui/react/src/components/modal/CModalDialog.tsx","../node_modules/@coreui/react/src/components/modal/CModal.tsx","../node_modules/@coreui/react/src/components/modal/CModalBody.tsx","../node_modules/@coreui/react/src/components/modal/CModalFooter.tsx","../node_modules/@coreui/react/src/components/close-button/CCloseButton.tsx","../node_modules/@coreui/react/src/components/modal/CModalHeader.tsx","../node_modules/html-to-image/src/util.ts","../node_modules/html-to-image/src/clone-pseudos.ts","../node_modules/html-to-image/src/mimes.ts","../node_modules/html-to-image/src/dataurl.ts","../node_modules/html-to-image/src/clone-node.ts","../node_modules/html-to-image/src/embed-resources.ts","../node_modules/html-to-image/src/embed-images.ts","../node_modules/html-to-image/src/embed-webfonts.ts","../node_modules/html-to-image/src/index.ts","../node_modules/html-to-image/src/apply-style.ts","../node_modules/react-google-charts/src/hooks/useLoadGoogleCharts.ts","../node_modules/react-google-charts/src/hooks/useLoadScript.ts","../node_modules/react-google-charts/src/default-props.ts","../node_modules/react-google-charts/src/generate-unique-id.ts","../node_modules/react-google-charts/src/constants.ts","../node_modules/react-google-charts/src/Context.tsx","../node_modules/react-google-charts/src/components/GoogleChartDataTable.tsx","../node_modules/react-google-charts/src/load-data-table-from-spreadsheet.ts","../node_modules/react-google-charts/src/components/GoogleChartEvents.tsx","../node_modules/react-google-charts/src/components/GoogleChart.tsx","../node_modules/react-google-charts/src/ReactGoogleCharts.tsx","../node_modules/react-google-charts/src/types.ts"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalContentProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalContent = forwardRef<HTMLDivElement, CModalContentProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-content', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalContent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalContent.displayName = 'CModalContent'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalDialogProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Does the modal dialog itself scroll, or does the whole dialog scroll within the window.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n}\n\nexport const CModalDialog = forwardRef<HTMLDivElement, CModalDialogProps>(\n  ({ children, alignment, className, fullscreen, scrollable, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'modal-dialog',\n          {\n            'modal-dialog-centered': alignment === 'center',\n            [typeof fullscreen === 'boolean'\n              ? 'modal-fullscreen'\n              : `modal-fullscreen-${fullscreen}-down`]: fullscreen,\n            'modal-dialog-scrollable': scrollable,\n            [`modal-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalDialog.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n}\n\nCModalDialog.displayName = 'CModalDialog'\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CBackdrop } from '../backdrop'\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CModalContent } from './CModalContent'\nimport { CModalDialog } from './CModalDialog'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CModalProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * Apply a backdrop on body while modal is open.\n   */\n  backdrop?: boolean | 'static'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * @ignore\n   */\n  duration?: number\n  /**\n   * Puts the focus on the modal when shown.\n   *\n   * @since v4.10.0\n   */\n  focus?: boolean\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Closes the modal when escape key is pressed.\n   */\n  keyboard?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClosePrevented?: () => void\n  /**\n   * Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\n   */\n  onShow?: () => void\n  /**\n   * Generates modal using createPortal.\n   */\n  portal?: boolean\n  /**\n   * Create a scrollable modal that allows scrolling the modal body.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n  /**\n   * Remove animation to create modal that simply appear rather than fade in to view.\n   */\n  transition?: boolean\n  /**\n   * By default the component is unmounted after close animation, if you want to keep the component mounted set this property to false.\n   */\n  unmountOnClose?: boolean\n  /**\n   * Toggle the visibility of modal component.\n   */\n  visible?: boolean\n}\n\ninterface ModalContextProps {\n  visible?: boolean\n  setVisible: React.Dispatch<React.SetStateAction<boolean | undefined>>\n}\n\nexport const CModalContext = createContext({} as ModalContextProps)\n\nexport const CModal = forwardRef<HTMLDivElement, CModalProps>(\n  (\n    {\n      children,\n      alignment,\n      backdrop = true,\n      className,\n      duration = 150,\n      focus = true,\n      fullscreen,\n      keyboard = true,\n      onClose,\n      onClosePrevented,\n      onShow,\n      portal = true,\n      scrollable,\n      size,\n      transition = true,\n      unmountOnClose = true,\n      visible,\n      ...rest\n    },\n    ref,\n  ) => {\n    const activeElementRef = useRef<HTMLElement | null>(null)\n    const modalRef = useRef<HTMLDivElement>(null)\n    const modalContentRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, modalRef)\n\n    const [_visible, setVisible] = useState(visible)\n    const [staticBackdrop, setStaticBackdrop] = useState(false)\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (_visible) {\n        activeElementRef.current = document.activeElement as HTMLElement | null\n        document.addEventListener('mouseup', handleClickOutside)\n        document.addEventListener('keydown', handleKeyDown)\n      } else {\n        activeElementRef.current?.focus()\n      }\n\n      return () => {\n        document.removeEventListener('mouseup', handleClickOutside)\n        document.removeEventListener('keydown', handleKeyDown)\n      }\n    }, [_visible])\n\n    const handleDismiss = () => {\n      if (backdrop === 'static') {\n        return setStaticBackdrop(true)\n      }\n\n      setVisible(false)\n\n      return onClose && onClose()\n    }\n\n    useLayoutEffect(() => {\n      onClosePrevented && onClosePrevented()\n      setTimeout(() => setStaticBackdrop(false), duration)\n    }, [staticBackdrop])\n\n    // Set focus to modal after open\n    useLayoutEffect(() => {\n      if (_visible) {\n        document.body.classList.add('modal-open')\n\n        if (backdrop) {\n          document.body.style.overflow = 'hidden'\n          document.body.style.paddingRight = '0px'\n        }\n\n        setTimeout(\n          () => {\n            focus && modalRef.current?.focus()\n          },\n          transition ? duration : 0,\n        )\n      } else {\n        document.body.classList.remove('modal-open')\n\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n\n      return () => {\n        document.body.classList.remove('modal-open')\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n    }, [_visible])\n\n    const handleClickOutside = (event: Event) => {\n      if (modalRef.current && modalRef.current == event.target) {\n        handleDismiss()\n      }\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && keyboard) {\n        handleDismiss()\n      }\n    }\n\n    return (\n      <>\n        <Transition\n          in={_visible}\n          mountOnEnter\n          nodeRef={modalRef}\n          onEnter={onShow}\n          onExit={onClose}\n          unmountOnExit={unmountOnClose}\n          timeout={transition ? duration : 0}\n        >\n          {(state) => (\n            <CConditionalPortal portal={portal}>\n              <CModalContext.Provider value={contextValues}>\n                <div\n                  className={classNames(\n                    'modal',\n                    {\n                      'modal-static': staticBackdrop,\n                      fade: transition,\n                      show: state === 'entered',\n                    },\n                    className,\n                  )}\n                  tabIndex={-1}\n                  {...(_visible\n                    ? { 'aria-modal': true, role: 'dialog' }\n                    : { 'aria-hidden': 'true' })}\n                  style={{\n                    ...(state !== 'exited' && { display: 'block' }),\n                  }}\n                  {...rest}\n                  ref={forkedRef}\n                >\n                  <CModalDialog\n                    alignment={alignment}\n                    fullscreen={fullscreen}\n                    scrollable={scrollable}\n                    size={size}\n                  >\n                    <CModalContent ref={modalContentRef}>{children}</CModalContent>\n                  </CModalDialog>\n                </div>\n              </CModalContext.Provider>\n            </CConditionalPortal>\n          )}\n        </Transition>\n        {backdrop && (\n          <CConditionalPortal portal={portal}>\n            <CBackdrop visible={_visible} />\n          </CConditionalPortal>\n        )}\n      </>\n    )\n  },\n)\n\nCModal.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'static'>(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  duration: PropTypes.number,\n  focus: PropTypes.bool,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  keyboard: PropTypes.bool,\n  onClose: PropTypes.func,\n  onClosePrevented: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  transition: PropTypes.bool,\n  unmountOnClose: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCModal.displayName = 'CModal'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalBody = forwardRef<HTMLDivElement, CModalBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalBody.displayName = 'CModalBody'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalFooter = forwardRef<HTMLDivElement, CModalFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalFooter.displayName = 'CModalFooter'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCloseButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Invert the default color.\n   */\n  dark?: boolean\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Change the default color to white.\n   *\n   * @deprecated 5.0.0\n   */\n  white?: boolean\n}\n\nexport const CCloseButton = forwardRef<HTMLButtonElement, CCloseButtonProps>(\n  ({ className, dark, disabled, white, ...rest }, ref) => {\n    return (\n      <button\n        type=\"button\"\n        className={classNames(\n          'btn',\n          'btn-close',\n          {\n            'btn-close-white': white,\n          },\n          disabled,\n          className,\n        )}\n        aria-label=\"Close\"\n        disabled={disabled}\n        {...(dark && { 'data-coreui-theme': 'dark' })}\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCCloseButton.propTypes = {\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  disabled: PropTypes.bool,\n  white: PropTypes.bool,\n}\n\nCCloseButton.displayName = 'CCloseButton'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModal'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n","import type { Options } from './types'\n\nexport function resolveUrl(url: string, baseUrl: string | null): string {\n  // url is absolute already\n  if (url.match(/^[a-z]+:\\/\\//i)) {\n    return url\n  }\n\n  // url is absolute already, without protocol\n  if (url.match(/^\\/\\//)) {\n    return window.location.protocol + url\n  }\n\n  // dataURI, mailto:, tel:, etc.\n  if (url.match(/^[a-z]+:/i)) {\n    return url\n  }\n\n  const doc = document.implementation.createHTMLDocument()\n  const base = doc.createElement('base')\n  const a = doc.createElement('a')\n\n  doc.head.appendChild(base)\n  doc.body.appendChild(a)\n\n  if (baseUrl) {\n    base.href = baseUrl\n  }\n\n  a.href = url\n\n  return a.href\n}\n\nexport const uuid = (() => {\n  // generate uuid for className of pseudo elements.\n  // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.\n  let counter = 0\n\n  // ref: http://stackoverflow.com/a/6248722/2519373\n  const random = () =>\n    // eslint-disable-next-line no-bitwise\n    `0000${((Math.random() * 36 ** 4) << 0).toString(36)}`.slice(-4)\n\n  return () => {\n    counter += 1\n    return `u${random()}${counter}`\n  }\n})()\n\nexport function delay<T>(ms: number) {\n  return (args: T) =>\n    new Promise<T>((resolve) => {\n      setTimeout(() => resolve(args), ms)\n    })\n}\n\nexport function toArray<T>(arrayLike: any): T[] {\n  const arr: T[] = []\n\n  for (let i = 0, l = arrayLike.length; i < l; i++) {\n    arr.push(arrayLike[i])\n  }\n\n  return arr\n}\n\nfunction px(node: HTMLElement, styleProperty: string) {\n  const win = node.ownerDocument.defaultView || window\n  const val = win.getComputedStyle(node).getPropertyValue(styleProperty)\n  return val ? parseFloat(val.replace('px', '')) : 0\n}\n\nfunction getNodeWidth(node: HTMLElement) {\n  const leftBorder = px(node, 'border-left-width')\n  const rightBorder = px(node, 'border-right-width')\n  return node.clientWidth + leftBorder + rightBorder\n}\n\nfunction getNodeHeight(node: HTMLElement) {\n  const topBorder = px(node, 'border-top-width')\n  const bottomBorder = px(node, 'border-bottom-width')\n  return node.clientHeight + topBorder + bottomBorder\n}\n\nexport function getImageSize(targetNode: HTMLElement, options: Options = {}) {\n  const width = options.width || getNodeWidth(targetNode)\n  const height = options.height || getNodeHeight(targetNode)\n\n  return { width, height }\n}\n\nexport function getPixelRatio() {\n  let ratio\n\n  let FINAL_PROCESS\n  try {\n    FINAL_PROCESS = process\n  } catch (e) {\n    // pass\n  }\n\n  const val =\n    FINAL_PROCESS && FINAL_PROCESS.env\n      ? FINAL_PROCESS.env.devicePixelRatio\n      : null\n  if (val) {\n    ratio = parseInt(val, 10)\n    if (Number.isNaN(ratio)) {\n      ratio = 1\n    }\n  }\n  return ratio || window.devicePixelRatio || 1\n}\n\n// @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size\nconst canvasDimensionLimit = 16384\n\nexport function checkCanvasDimensions(canvas: HTMLCanvasElement) {\n  if (\n    canvas.width > canvasDimensionLimit ||\n    canvas.height > canvasDimensionLimit\n  ) {\n    if (\n      canvas.width > canvasDimensionLimit &&\n      canvas.height > canvasDimensionLimit\n    ) {\n      if (canvas.width > canvas.height) {\n        canvas.height *= canvasDimensionLimit / canvas.width\n        canvas.width = canvasDimensionLimit\n      } else {\n        canvas.width *= canvasDimensionLimit / canvas.height\n        canvas.height = canvasDimensionLimit\n      }\n    } else if (canvas.width > canvasDimensionLimit) {\n      canvas.height *= canvasDimensionLimit / canvas.width\n      canvas.width = canvasDimensionLimit\n    } else {\n      canvas.width *= canvasDimensionLimit / canvas.height\n      canvas.height = canvasDimensionLimit\n    }\n  }\n}\n\nexport function canvasToBlob(\n  canvas: HTMLCanvasElement,\n  options: Options = {},\n): Promise<Blob | null> {\n  if (canvas.toBlob) {\n    return new Promise((resolve) => {\n      canvas.toBlob(\n        resolve,\n        options.type ? options.type : 'image/png',\n        options.quality ? options.quality : 1,\n      )\n    })\n  }\n\n  return new Promise((resolve) => {\n    const binaryString = window.atob(\n      canvas\n        .toDataURL(\n          options.type ? options.type : undefined,\n          options.quality ? options.quality : undefined,\n        )\n        .split(',')[1],\n    )\n    const len = binaryString.length\n    const binaryArray = new Uint8Array(len)\n\n    for (let i = 0; i < len; i += 1) {\n      binaryArray[i] = binaryString.charCodeAt(i)\n    }\n\n    resolve(\n      new Blob([binaryArray], {\n        type: options.type ? options.type : 'image/png',\n      }),\n    )\n  })\n}\n\nexport function createImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.decode = () => resolve(img) as any\n    img.onload = () => resolve(img)\n    img.onerror = reject\n    img.crossOrigin = 'anonymous'\n    img.decoding = 'async'\n    img.src = url\n  })\n}\n\nexport async function svgToDataURL(svg: SVGElement): Promise<string> {\n  return Promise.resolve()\n    .then(() => new XMLSerializer().serializeToString(svg))\n    .then(encodeURIComponent)\n    .then((html) => `data:image/svg+xml;charset=utf-8,${html}`)\n}\n\nexport async function nodeToDataURL(\n  node: HTMLElement,\n  width: number,\n  height: number,\n): Promise<string> {\n  const xmlns = 'http://www.w3.org/2000/svg'\n  const svg = document.createElementNS(xmlns, 'svg')\n  const foreignObject = document.createElementNS(xmlns, 'foreignObject')\n\n  svg.setAttribute('width', `${width}`)\n  svg.setAttribute('height', `${height}`)\n  svg.setAttribute('viewBox', `0 0 ${width} ${height}`)\n\n  foreignObject.setAttribute('width', '100%')\n  foreignObject.setAttribute('height', '100%')\n  foreignObject.setAttribute('x', '0')\n  foreignObject.setAttribute('y', '0')\n  foreignObject.setAttribute('externalResourcesRequired', 'true')\n\n  svg.appendChild(foreignObject)\n  foreignObject.appendChild(node)\n  return svgToDataURL(svg)\n}\n\nexport const isInstanceOfElement = <\n  T extends typeof Element | typeof HTMLElement | typeof SVGImageElement,\n>(\n  node: Element | HTMLElement | SVGImageElement,\n  instance: T,\n): node is T['prototype'] => {\n  if (node instanceof instance) return true\n\n  const nodePrototype = Object.getPrototypeOf(node)\n\n  if (nodePrototype === null) return false\n\n  return (\n    nodePrototype.constructor.name === instance.name ||\n    isInstanceOfElement(nodePrototype, instance)\n  )\n}\n","import { uuid, toArray } from './util'\n\ntype Pseudo = ':before' | ':after'\n\nfunction formatCSSText(style: CSSStyleDeclaration) {\n  const content = style.getPropertyValue('content')\n  return `${style.cssText} content: '${content.replace(/'|\"/g, '')}';`\n}\n\nfunction formatCSSProperties(style: CSSStyleDeclaration) {\n  return toArray<string>(style)\n    .map((name) => {\n      const value = style.getPropertyValue(name)\n      const priority = style.getPropertyPriority(name)\n\n      return `${name}: ${value}${priority ? ' !important' : ''};`\n    })\n    .join(' ')\n}\n\nfunction getPseudoElementStyle(\n  className: string,\n  pseudo: Pseudo,\n  style: CSSStyleDeclaration,\n): Text {\n  const selector = `.${className}:${pseudo}`\n  const cssText = style.cssText\n    ? formatCSSText(style)\n    : formatCSSProperties(style)\n\n  return document.createTextNode(`${selector}{${cssText}}`)\n}\n\nfunction clonePseudoElement<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  pseudo: Pseudo,\n) {\n  const style = window.getComputedStyle(nativeNode, pseudo)\n  const content = style.getPropertyValue('content')\n  if (content === '' || content === 'none') {\n    return\n  }\n\n  const className = uuid()\n  try {\n    clonedNode.className = `${clonedNode.className} ${className}`\n  } catch (err) {\n    return\n  }\n\n  const styleElement = document.createElement('style')\n  styleElement.appendChild(getPseudoElementStyle(className, pseudo, style))\n  clonedNode.appendChild(styleElement)\n}\n\nexport function clonePseudoElements<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n) {\n  clonePseudoElement(nativeNode, clonedNode, ':before')\n  clonePseudoElement(nativeNode, clonedNode, ':after')\n}\n","const WOFF = 'application/font-woff'\nconst JPEG = 'image/jpeg'\nconst mimes: { [key: string]: string } = {\n  woff: WOFF,\n  woff2: WOFF,\n  ttf: 'application/font-truetype',\n  eot: 'application/vnd.ms-fontobject',\n  png: 'image/png',\n  jpg: JPEG,\n  jpeg: JPEG,\n  gif: 'image/gif',\n  tiff: 'image/tiff',\n  svg: 'image/svg+xml',\n  webp: 'image/webp',\n}\n\nfunction getExtension(url: string): string {\n  const match = /\\.([^./]*?)$/g.exec(url)\n  return match ? match[1] : ''\n}\n\nexport function getMimeType(url: string): string {\n  const extension = getExtension(url).toLowerCase()\n  return mimes[extension] || ''\n}\n","import { Options } from './types'\n\nfunction getContentFromDataUrl(dataURL: string) {\n  return dataURL.split(/,/)[1]\n}\n\nexport function isDataUrl(url: string) {\n  return url.search(/^(data:)/) !== -1\n}\n\nexport function makeDataUrl(content: string, mimeType: string) {\n  return `data:${mimeType};base64,${content}`\n}\n\nexport async function fetchAsDataURL<T>(\n  url: string,\n  init: RequestInit | undefined,\n  process: (data: { result: string; res: Response }) => T,\n): Promise<T> {\n  const res = await fetch(url, init)\n  if (res.status === 404) {\n    throw new Error(`Resource \"${res.url}\" not found`)\n  }\n  const blob = await res.blob()\n  return new Promise<T>((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onerror = reject\n    reader.onloadend = () => {\n      try {\n        resolve(process({ res, result: reader.result as string }))\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    reader.readAsDataURL(blob)\n  })\n}\n\nconst cache: { [url: string]: string } = {}\n\nfunction getCacheKey(\n  url: string,\n  contentType: string | undefined,\n  includeQueryParams: boolean | undefined,\n) {\n  let key = url.replace(/\\?.*/, '')\n\n  if (includeQueryParams) {\n    key = url\n  }\n\n  // font resource\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '')\n  }\n\n  return contentType ? `[${contentType}]${key}` : key\n}\n\nexport async function resourceToDataURL(\n  resourceUrl: string,\n  contentType: string | undefined,\n  options: Options,\n) {\n  const cacheKey = getCacheKey(\n    resourceUrl,\n    contentType,\n    options.includeQueryParams,\n  )\n\n  if (cache[cacheKey] != null) {\n    return cache[cacheKey]\n  }\n\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n  if (options.cacheBust) {\n    // eslint-disable-next-line no-param-reassign\n    resourceUrl += (/\\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime()\n  }\n\n  let dataURL: string\n  try {\n    const content = await fetchAsDataURL(\n      resourceUrl,\n      options.fetchRequestInit,\n      ({ res, result }) => {\n        if (!contentType) {\n          // eslint-disable-next-line no-param-reassign\n          contentType = res.headers.get('Content-Type') || ''\n        }\n        return getContentFromDataUrl(result)\n      },\n    )\n    dataURL = makeDataUrl(content, contentType!)\n  } catch (error) {\n    dataURL = options.imagePlaceholder || ''\n\n    let msg = `Failed to fetch resource: ${resourceUrl}`\n    if (error) {\n      msg = typeof error === 'string' ? error : error.message\n    }\n\n    if (msg) {\n      console.warn(msg)\n    }\n  }\n\n  cache[cacheKey] = dataURL\n  return dataURL\n}\n","import type { Options } from './types'\nimport { clonePseudoElements } from './clone-pseudos'\nimport { createImage, toArray, isInstanceOfElement } from './util'\nimport { getMimeType } from './mimes'\nimport { resourceToDataURL } from './dataurl'\n\nasync function cloneCanvasElement(canvas: HTMLCanvasElement) {\n  const dataURL = canvas.toDataURL()\n  if (dataURL === 'data:,') {\n    return canvas.cloneNode(false) as HTMLCanvasElement\n  }\n  return createImage(dataURL)\n}\n\nasync function cloneVideoElement(video: HTMLVideoElement, options: Options) {\n  if (video.currentSrc) {\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    canvas.width = video.clientWidth\n    canvas.height = video.clientHeight\n    ctx?.drawImage(video, 0, 0, canvas.width, canvas.height)\n    const dataURL = canvas.toDataURL()\n    return createImage(dataURL)\n  }\n\n  const poster = video.poster\n  const contentType = getMimeType(poster)\n  const dataURL = await resourceToDataURL(poster, contentType, options)\n  return createImage(dataURL)\n}\n\nasync function cloneIFrameElement(iframe: HTMLIFrameElement) {\n  try {\n    if (iframe?.contentDocument?.body) {\n      return (await cloneNode(\n        iframe.contentDocument.body,\n        {},\n        true,\n      )) as HTMLBodyElement\n    }\n  } catch {\n    // Failed to clone iframe\n  }\n\n  return iframe.cloneNode(false) as HTMLIFrameElement\n}\n\nasync function cloneSingleNode<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): Promise<HTMLElement> {\n  if (isInstanceOfElement(node, HTMLCanvasElement)) {\n    return cloneCanvasElement(node)\n  }\n\n  if (isInstanceOfElement(node, HTMLVideoElement)) {\n    return cloneVideoElement(node, options)\n  }\n\n  if (isInstanceOfElement(node, HTMLIFrameElement)) {\n    return cloneIFrameElement(node)\n  }\n\n  return node.cloneNode(false) as T\n}\n\nconst isSlotElement = (node: HTMLElement): node is HTMLSlotElement =>\n  node.tagName != null && node.tagName.toUpperCase() === 'SLOT'\n\nasync function cloneChildren<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  options: Options,\n): Promise<T> {\n  let children: T[] = []\n\n  if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {\n    children = toArray<T>(nativeNode.assignedNodes())\n  } else if (\n    isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n    nativeNode.contentDocument?.body\n  ) {\n    children = toArray<T>(nativeNode.contentDocument.body.childNodes)\n  } else {\n    children = toArray<T>((nativeNode.shadowRoot ?? nativeNode).childNodes)\n  }\n\n  if (\n    children.length === 0 ||\n    isInstanceOfElement(nativeNode, HTMLVideoElement)\n  ) {\n    return clonedNode\n  }\n\n  await children.reduce(\n    (deferred, child) =>\n      deferred\n        .then(() => cloneNode(child, options))\n        .then((clonedChild: HTMLElement | null) => {\n          if (clonedChild) {\n            clonedNode.appendChild(clonedChild)\n          }\n        }),\n    Promise.resolve(),\n  )\n\n  return clonedNode\n}\n\nfunction cloneCSSStyle<T extends HTMLElement>(nativeNode: T, clonedNode: T) {\n  const targetStyle = clonedNode.style\n  if (!targetStyle) {\n    return\n  }\n\n  const sourceStyle = window.getComputedStyle(nativeNode)\n  if (sourceStyle.cssText) {\n    targetStyle.cssText = sourceStyle.cssText\n    targetStyle.transformOrigin = sourceStyle.transformOrigin\n  } else {\n    toArray<string>(sourceStyle).forEach((name) => {\n      let value = sourceStyle.getPropertyValue(name)\n      if (name === 'font-size' && value.endsWith('px')) {\n        const reducedFont =\n          Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1\n        value = `${reducedFont}px`\n      }\n\n      if (\n        isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n        name === 'display' &&\n        value === 'inline'\n      ) {\n        value = 'block'\n      }\n      \n      if (name === 'd' && clonedNode.getAttribute('d')) {\n        value = `path(${clonedNode.getAttribute('d')})`\n      }\n      \n      targetStyle.setProperty(\n        name,\n        value,\n        sourceStyle.getPropertyPriority(name),\n      )\n    })\n  }\n}\n\nfunction cloneInputValue<T extends HTMLElement>(nativeNode: T, clonedNode: T) {\n  if (isInstanceOfElement(nativeNode, HTMLTextAreaElement)) {\n    clonedNode.innerHTML = nativeNode.value\n  }\n\n  if (isInstanceOfElement(nativeNode, HTMLInputElement)) {\n    clonedNode.setAttribute('value', nativeNode.value)\n  }\n}\n\nfunction cloneSelectValue<T extends HTMLElement>(nativeNode: T, clonedNode: T) {\n  if (isInstanceOfElement(nativeNode, HTMLSelectElement)) {\n    const clonedSelect = clonedNode as any as HTMLSelectElement\n    const selectedOption = Array.from(clonedSelect.children).find(\n      (child) => nativeNode.value === child.getAttribute('value'),\n    )\n\n    if (selectedOption) {\n      selectedOption.setAttribute('selected', '')\n    }\n  }\n}\n\nfunction decorate<T extends HTMLElement>(nativeNode: T, clonedNode: T): T {\n  if (isInstanceOfElement(clonedNode, Element)) {\n    cloneCSSStyle(nativeNode, clonedNode)\n    clonePseudoElements(nativeNode, clonedNode)\n    cloneInputValue(nativeNode, clonedNode)\n    cloneSelectValue(nativeNode, clonedNode)\n  }\n\n  return clonedNode\n}\n\nasync function ensureSVGSymbols<T extends HTMLElement>(\n  clone: T,\n  options: Options,\n) {\n  const uses = clone.querySelectorAll ? clone.querySelectorAll('use') : []\n  if (uses.length === 0) {\n    return clone\n  }\n\n  const processedDefs: { [key: string]: HTMLElement } = {}\n  for (let i = 0; i < uses.length; i++) {\n    const use = uses[i]\n    const id = use.getAttribute('xlink:href')\n    if (id) {\n      const exist = clone.querySelector(id)\n      const definition = document.querySelector(id) as HTMLElement\n      if (!exist && definition && !processedDefs[id]) {\n        // eslint-disable-next-line no-await-in-loop\n        processedDefs[id] = (await cloneNode(definition, options, true))!\n      }\n    }\n  }\n\n  const nodes = Object.values(processedDefs)\n  if (nodes.length) {\n    const ns = 'http://www.w3.org/1999/xhtml'\n    const svg = document.createElementNS(ns, 'svg')\n    svg.setAttribute('xmlns', ns)\n    svg.style.position = 'absolute'\n    svg.style.width = '0'\n    svg.style.height = '0'\n    svg.style.overflow = 'hidden'\n    svg.style.display = 'none'\n\n    const defs = document.createElementNS(ns, 'defs')\n    svg.appendChild(defs)\n\n    for (let i = 0; i < nodes.length; i++) {\n      defs.appendChild(nodes[i])\n    }\n\n    clone.appendChild(svg)\n  }\n\n  return clone\n}\n\nexport async function cloneNode<T extends HTMLElement>(\n  node: T,\n  options: Options,\n  isRoot?: boolean,\n): Promise<T | null> {\n  if (!isRoot && options.filter && !options.filter(node)) {\n    return null\n  }\n\n  return Promise.resolve(node)\n    .then((clonedNode) => cloneSingleNode(clonedNode, options) as Promise<T>)\n    .then((clonedNode) => cloneChildren(node, clonedNode, options))\n    .then((clonedNode) => decorate(node, clonedNode))\n    .then((clonedNode) => ensureSVGSymbols(clonedNode, options))\n}\n","import { Options } from './types'\nimport { resolveUrl } from './util'\nimport { getMimeType } from './mimes'\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl'\n\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g\n\nfunction toRegex(url: string): RegExp {\n  // eslint-disable-next-line no-useless-escape\n  const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1')\n  return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g')\n}\n\nexport function parseURLs(cssText: string): string[] {\n  const urls: string[] = []\n\n  cssText.replace(URL_REGEX, (raw, quotation, url) => {\n    urls.push(url)\n    return raw\n  })\n\n  return urls.filter((url) => !isDataUrl(url))\n}\n\nexport async function embed(\n  cssText: string,\n  resourceURL: string,\n  baseURL: string | null,\n  options: Options,\n  getContentFromUrl?: (url: string) => Promise<string>,\n): Promise<string> {\n  try {\n    const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL\n    const contentType = getMimeType(resourceURL)\n    let dataURL: string\n    if (getContentFromUrl) {\n      const content = await getContentFromUrl(resolvedURL)\n      dataURL = makeDataUrl(content, contentType)\n    } else {\n      dataURL = await resourceToDataURL(resolvedURL, contentType, options)\n    }\n    return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`)\n  } catch (error) {\n    // pass\n  }\n  return cssText\n}\n\nfunction filterPreferredFontFormat(\n  str: string,\n  { preferredFontFormat }: Options,\n): string {\n  return !preferredFontFormat\n    ? str\n    : str.replace(FONT_SRC_REGEX, (match: string) => {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || []\n          if (!format) {\n            return ''\n          }\n\n          if (format === preferredFontFormat) {\n            return `src: ${src};`\n          }\n        }\n      })\n}\n\nexport function shouldEmbed(url: string): boolean {\n  return url.search(URL_REGEX) !== -1\n}\n\nexport async function embedResources(\n  cssText: string,\n  baseUrl: string | null,\n  options: Options,\n): Promise<string> {\n  if (!shouldEmbed(cssText)) {\n    return cssText\n  }\n\n  const filteredCSSText = filterPreferredFontFormat(cssText, options)\n  const urls = parseURLs(filteredCSSText)\n  return urls.reduce(\n    (deferred, url) =>\n      deferred.then((css) => embed(css, url, baseUrl, options)),\n    Promise.resolve(filteredCSSText),\n  )\n}\n","import { Options } from './types'\nimport { embedResources } from './embed-resources'\nimport { toArray, isInstanceOfElement } from './util'\nimport { isDataUrl, resourceToDataURL } from './dataurl'\nimport { getMimeType } from './mimes'\n\nasync function embedProp(\n  propName: string,\n  node: HTMLElement,\n  options: Options,\n) {\n  const propValue = node.style?.getPropertyValue(propName)\n  if (propValue) {\n    const cssString = await embedResources(propValue, null, options)\n    node.style.setProperty(\n      propName,\n      cssString,\n      node.style.getPropertyPriority(propName),\n    )\n    return true\n  }\n  return false\n}\n\nasync function embedBackground<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  if (!(await embedProp('background', clonedNode, options))) {\n    await embedProp('background-image', clonedNode, options)\n  }\n  if (!(await embedProp('mask', clonedNode, options))) {\n    await embedProp('mask-image', clonedNode, options)\n  }\n}\n\nasync function embedImageNode<T extends HTMLElement | SVGImageElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const isImageElement = isInstanceOfElement(clonedNode, HTMLImageElement)\n\n  if (\n    !(isImageElement && !isDataUrl(clonedNode.src)) &&\n    !(\n      isInstanceOfElement(clonedNode, SVGImageElement) &&\n      !isDataUrl(clonedNode.href.baseVal)\n    )\n  ) {\n    return\n  }\n\n  const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal\n\n  const dataURL = await resourceToDataURL(url, getMimeType(url), options)\n  await new Promise((resolve, reject) => {\n    clonedNode.onload = resolve\n    clonedNode.onerror = reject\n\n    const image = clonedNode as HTMLImageElement\n    if (image.decode) {\n      image.decode = resolve as any\n    }\n\n    if (image.loading === 'lazy') {\n      image.loading = 'eager'\n    }\n\n    if (isImageElement) {\n      clonedNode.srcset = ''\n      clonedNode.src = dataURL\n    } else {\n      clonedNode.href.baseVal = dataURL\n    }\n  })\n}\n\nasync function embedChildren<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const children = toArray<HTMLElement>(clonedNode.childNodes)\n  const deferreds = children.map((child) => embedImages(child, options))\n  await Promise.all(deferreds).then(() => clonedNode)\n}\n\nexport async function embedImages<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  if (isInstanceOfElement(clonedNode, Element)) {\n    await embedBackground(clonedNode, options)\n    await embedImageNode(clonedNode, options)\n    await embedChildren(clonedNode, options)\n  }\n}\n","import type { Options } from './types'\nimport { toArray } from './util'\nimport { fetchAsDataURL } from './dataurl'\nimport { shouldEmbed, embedResources } from './embed-resources'\n\ninterface Metadata {\n  url: string\n  cssText: string\n}\n\nconst cssFetchCache: { [href: string]: Metadata } = {}\n\nasync function fetchCSS(url: string) {\n  let cache = cssFetchCache[url]\n  if (cache != null) {\n    return cache\n  }\n\n  const res = await fetch(url)\n  const cssText = await res.text()\n  cache = { url, cssText }\n\n  cssFetchCache[url] = cache\n\n  return cache\n}\n\nasync function embedFonts(data: Metadata, options: Options): Promise<string> {\n  let cssText = data.cssText\n  const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g\n  const fontLocs = cssText.match(/url\\([^)]+\\)/g) || []\n  const loadFonts = fontLocs.map(async (loc: string) => {\n    let url = loc.replace(regexUrl, '$1')\n    if (!url.startsWith('https://')) {\n      url = new URL(url, data.url).href\n    }\n\n    return fetchAsDataURL<[string, string]>(\n      url,\n      options.fetchRequestInit,\n      ({ result }) => {\n        cssText = cssText.replace(loc, `url(${result})`)\n        return [loc, result]\n      },\n    )\n  })\n\n  return Promise.all(loadFonts).then(() => cssText)\n}\n\nfunction parseCSS(source: string) {\n  if (source == null) {\n    return []\n  }\n\n  const result: string[] = []\n  const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi\n  // strip out comments\n  let cssText = source.replace(commentsRegex, '')\n\n  // eslint-disable-next-line prefer-regex-literals\n  const keyframesRegex = new RegExp(\n    '((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})',\n    'gi',\n  )\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const matches = keyframesRegex.exec(cssText)\n    if (matches === null) {\n      break\n    }\n    result.push(matches[0])\n  }\n  cssText = cssText.replace(keyframesRegex, '')\n\n  const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi\n  // to match css & media queries together\n  const combinedCSSRegex =\n    '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' +\n    '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'\n  // unified regex\n  const unifiedRegex = new RegExp(combinedCSSRegex, 'gi')\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let matches = importRegex.exec(cssText)\n    if (matches === null) {\n      matches = unifiedRegex.exec(cssText)\n      if (matches === null) {\n        break\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex\n    }\n    result.push(matches[0])\n  }\n\n  return result\n}\n\nasync function getCSSRules(\n  styleSheets: CSSStyleSheet[],\n  options: Options,\n): Promise<CSSStyleRule[]> {\n  const ret: CSSStyleRule[] = []\n  const deferreds: Promise<number | void>[] = []\n\n  // First loop inlines imports\n  styleSheets.forEach((sheet) => {\n    if ('cssRules' in sheet) {\n      try {\n        toArray<CSSRule>(sheet.cssRules || []).forEach((item, index) => {\n          if (item.type === CSSRule.IMPORT_RULE) {\n            let importIndex = index + 1\n            const url = (item as CSSImportRule).href\n            const deferred = fetchCSS(url)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  try {\n                    sheet.insertRule(\n                      rule,\n                      rule.startsWith('@import')\n                        ? (importIndex += 1)\n                        : sheet.cssRules.length,\n                    )\n                  } catch (error) {\n                    console.error('Error inserting rule from remote css', {\n                      rule,\n                      error,\n                    })\n                  }\n                }),\n              )\n              .catch((e) => {\n                console.error('Error loading remote css', e.toString())\n              })\n\n            deferreds.push(deferred)\n          }\n        })\n      } catch (e) {\n        const inline =\n          styleSheets.find((a) => a.href == null) || document.styleSheets[0]\n        if (sheet.href != null) {\n          deferreds.push(\n            fetchCSS(sheet.href)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  inline.insertRule(rule, sheet.cssRules.length)\n                }),\n              )\n              .catch((err: unknown) => {\n                console.error('Error loading remote stylesheet', err)\n              }),\n          )\n        }\n        console.error('Error inlining remote css file', e)\n      }\n    }\n  })\n\n  return Promise.all(deferreds).then(() => {\n    // Second loop parses rules\n    styleSheets.forEach((sheet) => {\n      if ('cssRules' in sheet) {\n        try {\n          toArray<CSSStyleRule>(sheet.cssRules || []).forEach((item) => {\n            ret.push(item)\n          })\n        } catch (e) {\n          console.error(`Error while reading CSS rules from ${sheet.href}`, e)\n        }\n      }\n    })\n\n    return ret\n  })\n}\n\nfunction getWebFontRules(cssRules: CSSStyleRule[]): CSSStyleRule[] {\n  return cssRules\n    .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)\n    .filter((rule) => shouldEmbed(rule.style.getPropertyValue('src')))\n}\n\nasync function parseWebFontRules<T extends HTMLElement>(\n  node: T,\n  options: Options,\n) {\n  if (node.ownerDocument == null) {\n    throw new Error('Provided element is not within a Document')\n  }\n\n  const styleSheets = toArray<CSSStyleSheet>(node.ownerDocument.styleSheets)\n  const cssRules = await getCSSRules(styleSheets, options)\n\n  return getWebFontRules(cssRules)\n}\n\nexport async function getWebFontCSS<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): Promise<string> {\n  const rules = await parseWebFontRules(node, options)\n  const cssTexts = await Promise.all(\n    rules.map((rule) => {\n      const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null\n      return embedResources(rule.cssText, baseUrl, options)\n    }),\n  )\n\n  return cssTexts.join('\\n')\n}\n\nexport async function embedWebFonts<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const cssText =\n    options.fontEmbedCSS != null\n      ? options.fontEmbedCSS\n      : options.skipFonts\n      ? null\n      : await getWebFontCSS(clonedNode, options)\n\n  if (cssText) {\n    const styleNode = document.createElement('style')\n    const sytleContent = document.createTextNode(cssText)\n\n    styleNode.appendChild(sytleContent)\n\n    if (clonedNode.firstChild) {\n      clonedNode.insertBefore(styleNode, clonedNode.firstChild)\n    } else {\n      clonedNode.appendChild(styleNode)\n    }\n  }\n}\n","import { Options } from './types'\nimport { cloneNode } from './clone-node'\nimport { embedImages } from './embed-images'\nimport { applyStyle } from './apply-style'\nimport { embedWebFonts, getWebFontCSS } from './embed-webfonts'\nimport {\n  getImageSize,\n  getPixelRatio,\n  createImage,\n  canvasToBlob,\n  nodeToDataURL,\n  checkCanvasDimensions,\n} from './util'\n\nexport async function toSvg<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  const { width, height } = getImageSize(node, options)\n  const clonedNode = (await cloneNode(node, options, true)) as HTMLElement\n  await embedWebFonts(clonedNode, options)\n  await embedImages(clonedNode, options)\n  applyStyle(clonedNode, options)\n  const datauri = await nodeToDataURL(clonedNode, width, height)\n  return datauri\n}\n\nexport async function toCanvas<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<HTMLCanvasElement> {\n  const { width, height } = getImageSize(node, options)\n  const svg = await toSvg(node, options)\n  const img = await createImage(svg)\n\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')!\n  const ratio = options.pixelRatio || getPixelRatio()\n  const canvasWidth = options.canvasWidth || width\n  const canvasHeight = options.canvasHeight || height\n\n  canvas.width = canvasWidth * ratio\n  canvas.height = canvasHeight * ratio\n\n  if (!options.skipAutoScale) {\n    checkCanvasDimensions(canvas)\n  }\n  canvas.style.width = `${canvasWidth}`\n  canvas.style.height = `${canvasHeight}`\n\n  if (options.backgroundColor) {\n    context.fillStyle = options.backgroundColor\n    context.fillRect(0, 0, canvas.width, canvas.height)\n  }\n\n  context.drawImage(img, 0, 0, canvas.width, canvas.height)\n\n  return canvas\n}\n\nexport async function toPixelData<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<Uint8ClampedArray> {\n  const { width, height } = getImageSize(node, options)\n  const canvas = await toCanvas(node, options)\n  const ctx = canvas.getContext('2d')!\n  return ctx.getImageData(0, 0, width, height).data\n}\n\nexport async function toPng<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  const canvas = await toCanvas(node, options)\n  return canvas.toDataURL()\n}\n\nexport async function toJpeg<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  const canvas = await toCanvas(node, options)\n  return canvas.toDataURL('image/jpeg', options.quality || 1)\n}\n\nexport async function toBlob<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<Blob | null> {\n  const canvas = await toCanvas(node, options)\n  const blob = await canvasToBlob(canvas)\n  return blob\n}\n\nexport async function getFontEmbedCSS<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  return getWebFontCSS(node, options)\n}\n","import { Options } from './types'\n\nexport function applyStyle<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): T {\n  const { style } = node\n\n  if (options.backgroundColor) {\n    style.backgroundColor = options.backgroundColor\n  }\n\n  if (options.width) {\n    style.width = `${options.width}px`\n  }\n\n  if (options.height) {\n    style.height = `${options.height}px`\n  }\n\n  const manual = options.style\n  if (manual != null) {\n    Object.keys(manual).forEach((key: any) => {\n      style[key] = manual[key] as string\n    })\n  }\n\n  return node\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  propsFromContext: ReactGoogleChartProps | null;\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n\n  componentDidMount() {\n    const { google, googleChartWrapper } = this.props;\n\n    this.listenToEvents({\n      chartEvents: this.propsFromContext?.chartEvents || null,\n      google,\n      googleChartWrapper,\n    });\n  }\n\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.propsFromContext = propsFromContext;\n          return null;\n        }}\n      />\n    );\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.propsFromContext = null;\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n"],"names":["CModalContent","forwardRef","_a","ref","children","className","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CModalDialog","alignment","fullscreen","scrollable","size","_b","concat","CModalContext","createContext","CModal","backdrop","_c","duration","_d","focus","_e","keyboard","onClose","onClosePrevented","onShow","_f","portal","_g","transition","_h","unmountOnClose","visible","activeElementRef","useRef","modalRef","modalContentRef","forkedRef","useForkedRef","_j","useState","_visible","setVisible","_k","staticBackdrop","setStaticBackdrop","contextValues","useEffect","current","document","activeElement","addEventListener","handleClickOutside","handleKeyDown","removeEventListener","handleDismiss","useLayoutEffect","setTimeout","body","classList","add","style","overflow","paddingRight","remove","removeProperty","event","target","key","Transition","in","mountOnEnter","nodeRef","onEnter","onExit","unmountOnExit","timeout","state","CConditionalPortal","Provider","value","fade","show","tabIndex","role","display","CBackdrop","CModalBody","CModalFooter","CCloseButton","dark","disabled","white","type","CModalHeader","closeButton","useContext","onClick","uuid","counter","Math","random","toString","slice","toArray","arrayLike","arr","i","l","length","push","px","node","styleProperty","val","ownerDocument","defaultView","window","getComputedStyle","getPropertyValue","parseFloat","replace","getImageSize","targetNode","options","arguments","undefined","width","leftBorder","rightBorder","clientWidth","getNodeWidth","height","topBorder","bottomBorder","clientHeight","getNodeHeight","canvasDimensionLimit","createImage","url","Promise","resolve","reject","img","Image","decode","onload","onerror","crossOrigin","decoding","src","async","nodeToDataURL","xmlns","svg","createElementNS","foreignObject","setAttribute","appendChild","then","XMLSerializer","serializeToString","encodeURIComponent","html","svgToDataURL","isInstanceOfElement","instance","nodePrototype","Object","getPrototypeOf","constructor","name","getPseudoElementStyle","pseudo","selector","cssText","content","formatCSSText","map","priority","getPropertyPriority","join","formatCSSProperties","createTextNode","clonePseudoElement","nativeNode","clonedNode","err","styleElement","createElement","WOFF","JPEG","mimes","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","webp","getMimeType","extension","match","exec","getExtension","toLowerCase","isDataUrl","search","makeDataUrl","mimeType","fetchAsDataURL","init","process","res","fetch","status","Error","blob","reader","FileReader","onloadend","result","error","readAsDataURL","cache","resourceToDataURL","resourceUrl","contentType","cacheKey","includeQueryParams","test","getCacheKey","dataURL","cacheBust","Date","getTime","fetchRequestInit","_ref","headers","get","split","getContentFromDataUrl","imagePlaceholder","msg","message","console","warn","cloneSingleNode","HTMLCanvasElement","canvas","toDataURL","cloneNode","cloneCanvasElement","HTMLVideoElement","video","currentSrc","ctx","getContext","drawImage","poster","cloneVideoElement","HTMLIFrameElement","iframe","contentDocument","cloneIFrameElement","isSlotElement","tagName","toUpperCase","decorate","Element","targetStyle","sourceStyle","transformOrigin","forEach","endsWith","reducedFont","floor","substring","getAttribute","setProperty","cloneCSSStyle","clonePseudoElements","HTMLTextAreaElement","innerHTML","HTMLInputElement","cloneInputValue","HTMLSelectElement","clonedSelect","selectedOption","Array","from","find","child","cloneSelectValue","isRoot","filter","assignedNodes","childNodes","shadowRoot","reduce","deferred","clonedChild","cloneChildren","clone","uses","querySelectorAll","processedDefs","id","exist","querySelector","definition","nodes","values","ns","position","defs","ensureSVGSymbols","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","embed","resourceURL","baseURL","getContentFromUrl","resolvedURL","baseUrl","location","protocol","doc","implementation","createHTMLDocument","base","a","head","href","resolveUrl","escaped","RegExp","toRegex","shouldEmbed","embedResources","filteredCSSText","str","preferredFontFormat","format","filterPreferredFontFormat","urls","raw","quotation","parseURLs","css","embedProp","propName","propValue","cssString","embedImages","embedBackground","isImageElement","HTMLImageElement","SVGImageElement","baseVal","image","loading","srcset","embedImageNode","deferreds","all","embedChildren","cssFetchCache","fetchCSS","text","embedFonts","data","regexUrl","loadFonts","loc","startsWith","URL","parseCSS","source","keyframesRegex","matches","importRegex","unifiedRegex","lastIndex","parseWebFontRules","styleSheets","cssRules","ret","sheet","item","index","CSSRule","IMPORT_RULE","importIndex","metadata","rule","insertRule","catch","e","inline","getCSSRules","FONT_FACE_RULE","getWebFontRules","embedWebFonts","fontEmbedCSS","skipFonts","rules","parentStyleSheet","getWebFontCSS","styleNode","sytleContent","firstChild","insertBefore","toSvg","backgroundColor","manual","keys","applyStyle","toCanvas","context","ratio","pixelRatio","FINAL_PROCESS","env","devicePixelRatio","parseInt","Number","isNaN","getPixelRatio","canvasWidth","canvasHeight","skipAutoScale","checkCanvasDimensions","fillStyle","fillRect","toPng","useLoadGoogleCharts","param","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","failed","setFailed","onLoad","onError","google","charts","load","packages","language","setOnLoadCallback","foundScript","dataset","loaded","script","onLoadWithMarker","append","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","legendToggle","getChartWrapper","spreadSheetQueryParameters","gid","rootProps","chartWrapperParams","uniqueID","DEFAULT_CHART_COLORS","Consumer","ContextProvider","ContextConsumer","render","GoogleChartDataTableInner","componentDidMount","this","draw","props","onResize","listenToLegendToggle","componentWillUnmount","googleChartWrapper","visualization","events","removeAllListeners","getChartType","getChart","clearChart","componentDidUpdate","hiddenColumns","addListener","selection","getSelection","dataTable","getDataTable","row","columnIndex","column","columnID","getColumnID","includes","setState","colID","applyFormatters","formatters","formatter","ArrowFormat","BarFormat","vizFormatter","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","diffdata","rows","columns","chartType","spreadSheetUrl","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","isArray","DataTable","googleViz","urlParams","queryString","query","access_token","urlQueryString","urlToSpreadSheet","Query","send","response","isError","getMessage","getDetailedMessage","loadDataTableFromSpreadSheet","columnCount","getNumberOfColumns","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","chart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","colors","dontcare","GoogleChartDataTable","shouldComponentUpdate","assign","GoogleChartEvents","listenToEvents","chartEvents","eventName","callback","args","_len","_key","chartWrapper","_this","eventArgs","propsFromContext","super","controlCounter","GoogleChart","toolbarItems","getChartEditor","chartConfig","containerId","getGraphID","ChartWrapper","Dashboard","dashboard_ref","googleChartControls","addControls","drawToolbar","toolbar_ref","googleChartEditor","ChartEditor","chartEditor","isReady","controls","controlType","controlWrapperParams","control","setControlType","nextProps","nextState","divStyle","renderChart","renderControl","renderToolbar","renderToolBar","controlProp","controlPosition","graphID","graph_id","instanceGraphID","getControlID","controlID","controlIDMaybe","controlOptions","ControlWrapper","bind","chartControl","controlEvents","removeListener","controlWrapper","_this1","getContainerId","Chart$1","loader","errorElement","loadingStatus","_isMounted","isFullyLoaded","google1","onSuccess","setInterval","clearInterval","GoogleDataTableColumnRoleType","defaultProps"],"sourceRoot":""}