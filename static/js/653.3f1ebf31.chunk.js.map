{"version":3,"file":"static/js/653.3f1ebf31.chunk.js","mappings":"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","sources":["hooks/useRegisterProject.js","components/ModalAddProject.jsx","components/loading.jsx","hooks/useFetch.js","hooks/useGetProjects.js","pages/ProjectSelector.jsx"],"sourcesContent":["import { useState } from 'react'\nimport axios, { HttpStatusCode } from 'axios'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\n\nconst useRegisterProject = () => {\n  const [error, setError] = useState()\n  const [isError, setIsError] = useState(false)\n  const queryClient = useQueryClient()\n\n  const mutation = useMutation({\n    mutationFn: async (newTodo) => {\n      return await axios\n        .post('https://pyg-production.up.railway.app/api/v1/projects', newTodo)\n        .then((res) => {\n          if (res.status === HttpStatusCode.Created) {\n            setIsError(false)\n            return res.ok\n          } else {\n            setError('Error al registrar proyecto')\n            setIsError(true)\n            return false\n          }\n        })\n        .catch((err) => {\n          setError('Error al registrar proyecto')\n          setIsError(true)\n          return false\n        })\n    },\n    onSuccess: (suc) => {\n      queryClient.invalidateQueries({ queryKey: ['projects'] })\n    },\n    onError: (err) => {\n      setError('Error al registrar proyecto')\n      setIsError(true)\n      return false\n    },\n  })\n\n  // const useMutateTodo = () => {\n  //   const queryClient = useQueryClient()\n\n  //   return useMutation(editTodo, {\n  //     // Notice the second argument is the variables object that the `mutate` function receives\n  //     onSuccess: (data, variables) => {\n  //       queryClient.setQueryData(['todo', { id: variables.id }], data)\n  //     },\n  //   })\n  // }\n\n  const mutationUpdate = useMutation({\n    mutationFn: async (newTodo) => {\n      return await axios\n        .put(`https://pyg-production.up.railway.app/api/v1/projects/${newTodo.id}`, newTodo)\n        .then((res) => {\n          if (res.status === HttpStatusCode.Created) {\n            setIsError(false)\n            return res.ok\n          } else {\n            setError('Error al actualizar proyecto')\n            setIsError(true)\n            return false\n          }\n        })\n        .catch((err) => {\n          setError('Error al actualizar proyecto')\n          setIsError(true)\n          return false\n        })\n    },\n    onSuccess: (suc) => {\n      queryClient.invalidateQueries({ queryKey: ['projects'] })\n    },\n    onError: (err) => {\n      setError('Error al actualizar proyecto')\n      setIsError(true)\n      return false\n    },\n  })\n\n  const register = (data) => {\n    setIsError(false)\n    const projectData = {\n      name: data.projectName,\n      description: data.projectDescription,\n      manager: data.projectManager,\n    }\n    const response = mutation.mutate(projectData)\n    return response\n  }\n\n  const update = (data) => {\n    setIsError(false)\n    const response = mutationUpdate.mutate(data)\n    return response\n  }\n\n  return { register, error, isError, update }\n}\n\nexport default useRegisterProject\n","/* eslint-disable react/prop-types */\nimport { React, useEffect, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n  CToast,\n  CToastBody,\n} from '@coreui/react'\nimport useRegisterProject from 'src/hooks/useRegisterProject'\nconst ModalAddProject = (props) => {\n  const initialState = {\n    projectName: undefined,\n    projectManager: undefined,\n    projectDescription: undefined,\n    isActive: undefined,\n  }\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  const [project, setProject] = useState(\n    props.selectedProject ? props.selectedProject : initialState,\n  )\n  const [errorForm, setErrorForm] = useState(0)\n  const [projectNameError, setProjectNameError] = useState(false)\n  const [projectManagerError, setProjectManagerError] = useState(false)\n  const [projectDescriptionError, setProjectDescriptionError] = useState(false)\n\n  const { register, error, isError, update } = useRegisterProject()\n\n  const onChangeData = (e) => {\n    setProject({ ...project, [e.target.id]: e.target.value })\n  }\n\n  const handleRegisterProject = () => {\n    if (!project.projectName || project.projectName === '') {\n      // setErrorForm(1)\n      setProjectNameError(true)\n    } else {\n      // setErrorForm(3)\n      setProjectNameError(false)\n    }\n    if (!project.projectManager || project.projectManager === '') {\n      // setErrorForm(1)\n      setProjectManagerError(true)\n    } else {\n      // setErrorForm(3)\n      setProjectManagerError(false)\n    }\n    if (!project.projectDescription || project.projectDescription === '') {\n      // setErrorForm(1)\n      setProjectDescriptionError(true)\n    } else {\n      // setErrorForm(3)\n      setProjectDescriptionError(false)\n    }\n\n    if (\n      !project.projectName ||\n      project.projectName === '' ||\n      !project.projectManager ||\n      project.projectManager === '' ||\n      !project.projectDescription ||\n      project.projectDescription === ''\n    ) {\n      setErrorForm(1)\n    } else {\n      setErrorForm(3)\n    }\n  }\n\n  useEffect(() => {\n    if (project.isActive === undefined) {\n      project.isActive = false\n    }\n    if (errorForm === 3) {\n      if (props?.selectedProject?.projectId) {\n        update({\n          id: props.selectedProject.projectId,\n          name: project.projectName,\n          description: project.projectDescription,\n          manager: project.projectManager,\n        })\n        props.sendDataToParent(false)\n      } else {\n        register(project)\n        props.sendDataToParent(false)\n      }\n    }\n  }, [errorForm])\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Proyecto</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CToast\n          autohide={true}\n          visible={isError}\n          color=\"danger\"\n          className=\"text-white align-items-center\"\n        >\n          <div className=\"d-flex\">\n            <CToastBody>{error}</CToastBody>\n          </div>\n        </CToast>\n        <CToast\n          autohide={true}\n          visible={errorForm === 1}\n          color=\"danger\"\n          onClose={() => {\n            setErrorForm(2)\n          }}\n          className=\"text-white align-items-center\"\n        >\n          <div className=\"d-flex\">\n            <CToastBody>Debe completar todos los datos para crear el proyecto</CToastBody>\n          </div>\n        </CToast>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"projectName\"\n                label=\"Nombre de proyecto\"\n                placeholder=\"Nombre de proyecto\"\n                invalid={projectNameError}\n                value={project.projectName || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setProjectNameError(false)\n                  } else {\n                    setProjectNameError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            {/* <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contract\"\n                label=\"Contrato\"\n                placeholder=\"Contrato\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol> */}\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"projectManager\"\n                label=\"Encargado\"\n                placeholder=\"Encargado\"\n                invalid={projectManagerError}\n                value={project.projectManager || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setProjectManagerError(false)\n                  } else {\n                    setProjectManagerError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            {/* <CCol sm={6}>\n              <CFormInput type=\"file\" id=\"formFile\" label=\"Elegir archivo\" />\n            </CCol> */}\n          </CRow>\n          <CRow>\n            <CCol sm={12}>\n              <CFormTextarea\n                id=\"projectDescription\"\n                label=\"Descripción\"\n                rows={3}\n                invalid={projectDescriptionError}\n                value={project.projectDescription || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setProjectDescriptionError(false)\n                  } else {\n                    setProjectDescriptionError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              ></CFormTextarea>\n            </CCol>\n          </CRow>\n          <CRow>\n            {/* <CCol sm={6}>\n              <CFormInput\n                type=\"color\"\n                id=\"color\"\n                defaultValue=\"#FFFFFF\"\n                label=\"Color de fondo\"\n                title=\"Color de fondo\"\n              />\n            </CCol> */}\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormCheck\n                id=\"isActive\"\n                label=\"Activo\"\n                defaultChecked={project.isActive}\n                onChange={(e) => {\n                  setProject({ ...project, [e.target.id]: !project.isActive })\n                }}\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\" onClick={() => handleRegisterProject()}>\n          Registrar\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddProject\n","import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/projects', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst fetchUsers = async () => {\n  const res = await axios.get('https://b4b07e25f42d4135b6fc3791a6e1d1f8.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchBasicData = async (contractId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/basicData', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst testToken = async () => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/test', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nexport const fetchReportsData = async () => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/reports', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst userType = localStorage.getItem('USER_TYPE')\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    refetchType: 'all',\n    // refetchInterval: 10000,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n\nexport const useFetchBasicData = (contractId) => {\n  return useQuery({\n    queryKey: ['basics'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchBasicData(contractId)\n    },\n  })\n}\n\nexport const useFetchUserList = () => {\n  return useQuery({\n    queryKey: ['users'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchUsers()\n    },\n  })\n}\n\nexport const useFetchReportsData = () => {\n  return useQuery({\n    queryKey: ['reports'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchReportsData()\n    },\n  })\n}\n","import { useFetchProyects } from './useFetch'\n\nconst useGetProjects = (projectId) => {\n  const { data, isLoading, error, refetch, isRefetching } = useFetchProyects(projectId)\n  return { data, isLoading, error, refetch, isRefetching }\n}\n\nexport default useGetProjects\n","import { React, useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\nimport Loading from 'src/components/loading'\nimport useGetProjects from 'src/hooks/useGetProjects'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\nimport ModalAddProject from 'src/components/ModalAddProject'\n\nconst ProjectSelector = () => {\n  const navigate = useNavigate()\n  const userType = localStorage.getItem('USER_TYPE')\n  const { getData } = useGetCachedQueryData()\n\n  const contractsQuery = getData('contracts')\n  const { getContract, saveProject } = useRegisterGeneralData()\n  const contractLS = JSON.parse(getContract())\n\n  const { data: projectData, isLoading } = useGetProjects(1)\n\n  const [projectList, setProjectList] = useState()\n\n  const [visibleProject, setVisibleProject] = useState(false)\n\n  const onClickHandler = (project) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: project.name,\n        id: project.id,\n        manager: project.manager || '',\n      }\n      saveProject(data)\n      navigate(`/contrato`)\n    } else {\n      const data = {\n        name: project.name,\n        id: project.id,\n        manager: project.manager || '',\n      }\n      saveProject(data)\n      navigate(`/dashboard`)\n    }\n  }\n\n  const onClickNewProject = () => {\n    setVisibleProject(!visibleProject)\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      if (contractsQuery && contractLS) {\n      } else {\n        navigate(`/project_selector`)\n      }\n    } else {\n      const contractFinded = contractsQuery.contract.find((contractData) => {\n        return contractData.id === contractLS.id\n      })\n      setProjectList(contractFinded.project)\n    }\n  }, [contractsQuery, contractLS])\n\n  useEffect(() => {\n    userType !== 'admin' && projectData && setProjectList(projectData)\n  }, [projectData])\n\n  return (\n    <>\n      {visibleProject && (\n        <ModalAddProject\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleProject(data)\n          }}\n        />\n      )}\n      <CCol sm={6} className=\"project-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Proyecto</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {isLoading && <Loading />}\n              {!isLoading &&\n                projectList &&\n                projectList.map((project, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(project)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{project.name}</span>\n                              </CRow>\n                              {project.manager && (\n                                <CRow>\n                                  <span className=\"project-manager\">\n                                    Encargado: {project.manager}\n                                  </span>\n                                </CRow>\n                              )}\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                          values={[{ title: 'Contratos', value: project?.contracts?.length || 0 }]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n              <CRow key={0}>\n                <CCol>\n                  <CWidgetStatsD\n                    onClick={() => {\n                      onClickNewProject()\n                    }}\n                    className=\"mb-3\"\n                    icon={\n                      <CIcon\n                        className=\"my-4 text-white\"\n                        icon={'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'}\n                        height={52}\n                      />\n                    }\n                    chart={\n                      <CContainer className=\"project-selector-container\">\n                        <CRow>\n                          <span className=\"project-title\">Crear nuevo proyecto</span>\n                        </CRow>\n                      </CContainer>\n                    }\n                    style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                  />\n                </CCol>\n              </CRow>\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ProjectSelector\n"],"names":["useRegisterProject","error","setError","useState","isError","setIsError","queryClient","useQueryClient","mutation","useMutation","mutationFn","async","axios","post","newTodo","then","res","status","HttpStatusCode","Created","ok","catch","err","onSuccess","suc","invalidateQueries","queryKey","onError","mutationUpdate","put","concat","id","register","data","projectData","name","projectName","description","projectDescription","manager","projectManager","mutate","update","props","initialState","undefined","isActive","handleClick","sendDataToParent","project","setProject","selectedProject","errorForm","setErrorForm","projectNameError","setProjectNameError","projectManagerError","setProjectManagerError","projectDescriptionError","setProjectDescriptionError","onChangeData","e","target","value","useEffect","_props$selectedProjec","projectId","_jsxs","CModal","scrollable","visible","onClose","size","className","children","_jsx","CModalHeader","CModalTitle","CModalBody","CToast","autohide","color","CToastBody","CForm","CRow","CCol","sm","CFormInput","type","label","placeholder","invalid","text","onBlur","onChange","CFormTextarea","rows","CFormCheck","defaultChecked","CModalFooter","CButton","onClick","Loading","Lottie","animationData","loadingjson","loop","width","localStorage","getItem","useFetchProyects","useQuery","refetchType","refetchOnWindowFocus","queryFn","get","headers","Authorization","fetchProducts","useFetchContract","contractId","fetchContracts","useFetchBasicData","staleTime","gcTime","fetchBasicData","useFetchUserList","fetchUsers","useFetchReportsData","fetchReportsData","isLoading","refetch","isRefetching","ProjectSelector","navigate","useNavigate","userType","getData","useGetCachedQueryData","contractsQuery","getContract","saveProject","useRegisterGeneralData","contractLS","JSON","parse","useGetProjects","projectList","setProjectList","visibleProject","setVisibleProject","contractFinded","contract","find","contractData","_Fragment","ModalAddProject","CCard","CCardTitle","CCardBody","CCardText","map","index","_project$contracts","CWidgetStatsD","onClickHandler","icon","CIcon","height","chart","CContainer","style","cursor","values","title","contracts","length"],"sourceRoot":""}