{"version":3,"file":"static/js/673.6b2cd5c2.chunk.js","mappings":"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","sources":["components/loading.jsx","hooks/useFetch.js","hooks/useRegisterUser.js","components/ModalAddUser.jsx","hooks/useGetUserList.js","components/UserList.jsx","pages/User.jsx","utils/regex.js","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/modal/CModalContent.tsx","../node_modules/@coreui/react/src/components/modal/CModalDialog.tsx","../node_modules/@coreui/react/src/components/modal/CModal.tsx","../node_modules/@coreui/react/src/components/modal/CModalBody.tsx","../node_modules/@coreui/react/src/components/modal/CModalFooter.tsx","../node_modules/@coreui/react/src/components/close-button/CCloseButton.tsx","../node_modules/@coreui/react/src/components/modal/CModalHeader.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx"],"sourcesContent":["import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/projects')\n  return res.data.data\n}\n\nconst fetchUsers = async () => {\n  const res = await axios.get('https://b4b07e25f42d4135b6fc3791a6e1d1f8.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchBasicData = async (contractId) => {\n  const res = await axios.get('https://ad66ae1fb4124d5d84a95b384d69a128.api.mockbin.io/')\n  return res.data.data\n}\n\nexport const fetchReportsData = async () => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/reports')\n  return res.data.data\n}\n\nconst userType = localStorage.getItem('USER_TYPE')\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    refetchType: 'all',\n    // refetchInterval: 10000,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n\nexport const useFetchBasicData = (contractId) => {\n  return useQuery({\n    queryKey: ['basics'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchBasicData(contractId)\n    },\n  })\n}\n\nexport const useFetchUserList = () => {\n  return useQuery({\n    queryKey: ['users'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchUsers()\n    },\n  })\n}\n\nexport const useFetchReportsData = () => {\n  return useQuery({\n    queryKey: ['reports'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchReportsData()\n    },\n  })\n}\n","import { useState } from 'react'\nimport { useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\nimport { useMutation } from '@tanstack/react-query'\n\nconst useRegisterUser = () => {\n  const [error, setError] = useState()\n  const [isError, setIsError] = useState(false)\n  const queryClient = useQueryClient()\n\n  const mutation = useMutation({\n    mutationFn: async (newTodo) => {\n      return await axios\n        .post('/prueba', newTodo)\n        .then((res) => {\n          if (res.ok) {\n            setIsError(false)\n            return res.ok\n          } else {\n            setError('Error al registrar usuario')\n            setIsError(true)\n            return false\n          }\n        })\n        .catch((err) => {\n          setError('Error al registrar usuario')\n          setIsError(true)\n          return false\n        })\n    },\n    onSuccess: (suc) => {\n      queryClient.invalidateQueries({ queryKey: ['users'] })\n    },\n    onError: (err) => {\n      setError('Error al registrar usuario')\n      setIsError(true)\n      return false\n    },\n  })\n\n  const register = (data) => {\n    setIsError(false)\n    const response = mutation.mutate(data)\n    return response\n  }\n\n  return { register, error, isError }\n}\n\nexport default useRegisterUser\n","/* eslint-disable react/prop-types */\nimport { React, useEffect, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormSelect,\n  CToast,\n  CToastBody,\n  CToastClose,\n  CFormCheck,\n} from '@coreui/react'\nimport useRegisterUser from 'src/hooks/useRegisterUser'\nimport { regex } from 'src/utils/regex'\nconst ModalAddUser = (props) => {\n  const initialState = {\n    userName: undefined,\n    userMail: undefined,\n    userProject: undefined,\n    userContract: undefined,\n    userPassword: undefined,\n    isActive: undefined,\n  }\n\n  const [user, setUser] = useState(props.selectedUser ? props.selectedUser : initialState)\n  const [userNameError, setUserNameError] = useState(false)\n  const [userMailError, setUserMailError] = useState(false)\n  const [userProjectError, setUserProjectError] = useState(false)\n  const [userContractError, setUserContractError] = useState(false)\n  const [userPasswordError, setUserPasswordError] = useState(false)\n  const [errorForm, setErrorForm] = useState(0)\n\n  const { register, error, isError } = useRegisterUser()\n\n  const onChangeData = (e) => {\n    setUser({ ...user, [e.target.id]: e.target.value })\n  }\n\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  const handleRegisterUser = () => {\n    if (!user.name || user.name === '') {\n      setErrorForm(1)\n      setUserNameError(true)\n    } else {\n      setErrorForm(3)\n      setUserNameError(false)\n    }\n    if (!user.userMail || user.userMail === '') {\n      setErrorForm(1)\n      setUserMailError(true)\n    } else {\n      setErrorForm(3)\n      setUserMailError(false)\n    }\n    if (!user.userPassword || user.userPassword === '') {\n      setErrorForm(1)\n      setUserPasswordError(true)\n    } else {\n      setErrorForm(3)\n      setUserPasswordError(false)\n    }\n    if (!user.userContract || user.userContract === '-1') {\n      setErrorForm(1)\n      setUserContractError(true)\n    } else {\n      setErrorForm(3)\n      setUserContractError(false)\n    }\n    if (!user.userProject || user.userProject === '-1') {\n      setErrorForm(1)\n      setUserProjectError(true)\n    } else {\n      setErrorForm(3)\n      setUserProjectError(false)\n    }\n  }\n\n  useEffect(() => {\n    if (user.isActive === undefined) {\n      user.isActive = false\n    }\n    if (errorForm === 3) register(user)\n  }, [errorForm])\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Usuario</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CToast\n          autohide={true}\n          visible={isError}\n          color=\"danger\"\n          className=\"text-white align-items-center\" // VER EVENTO DE ESCONDERSE PARA RESETEAR EL STATE DE ERROR\n        >\n          <div className=\"d-flex\">\n            <CToastBody>{error}</CToastBody>\n          </div>\n        </CToast>\n        <CToast\n          autohide={true}\n          visible={errorForm === 1}\n          color=\"danger\"\n          onClose={() => {\n            setErrorForm(2)\n          }}\n          className=\"text-white align-items-center\"\n        >\n          <div className=\"d-flex\">\n            <CToastBody>Debe completar todos los datos para crear el usuario</CToastBody>\n          </div>\n        </CToast>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                invalid={userNameError}\n                id=\"userName\"\n                label=\"Nombre\"\n                placeholder=\"Nombre\"\n                value={user.userName || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setUserNameError(false)\n                  } else {\n                    setUserNameError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                invalid={userMailError}\n                id=\"userMail\"\n                value={user.userMail || ''}\n                label=\"Correo\"\n                placeholder=\"Correo\"\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value && e.target.value.match(regex)) {\n                    setUserMailError(false)\n                  } else {\n                    setUserMailError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormSelect\n                aria-label=\"Default select example\"\n                label=\"Proyecto\"\n                id=\"userProject\"\n                invalid={userProjectError}\n                value={user.userProject}\n                onBlur={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserProjectError(false)\n                  } else {\n                    setUserProjectError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserProjectError(false)\n                  } else {\n                    setUserProjectError(true)\n                  }\n                  onChangeData(e)\n                }}\n              >\n                <option value={'-1'}>Seleccione</option>\n                <option value={'Proyecto 1'}>Proyecto 1</option>\n                <option value={'Proyecto 2'}>Proyecto 2</option>\n              </CFormSelect>\n            </CCol>\n            <CCol sm={6}>\n              <CFormSelect\n                aria-label=\"Default select example\"\n                label=\"Contrato\"\n                invalid={userContractError}\n                value={user.userContract}\n                id=\"userContract\"\n                onBlur={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserContractError(false)\n                  } else {\n                    setUserContractError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  if (e.target.value !== '-1') {\n                    setUserContractError(false)\n                  } else {\n                    setUserContractError(true)\n                  }\n                  onChangeData(e)\n                }}\n              >\n                <option value={'-1'}>Seleccione</option>\n                <option value={'Contrato 1'}>Contrato 1</option>\n                <option value={'Contrato 2'}>Contrato 2</option>\n              </CFormSelect>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"password\"\n                id=\"userPassword\"\n                invalid={userPasswordError}\n                value={user.userPassword || ''}\n                label=\"Contraseña\"\n                placeholder=\"Contraseña\"\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setUserPasswordError(false)\n                  } else {\n                    setUserPasswordError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormCheck\n                id=\"isActive\"\n                label=\"Activo\"\n                defaultChecked={user.isActive}\n                onChange={(e) => {\n                  setUser({ ...user, [e.target.id]: !user.isActive })\n                }}\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\" onClick={() => handleRegisterUser()}>\n          Añadir usuario\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddUser\n","import { useFetchUserList } from './useFetch'\n\nconst useGetUserList = () => {\n  const { data, isLoading, error } = useFetchUserList()\n  return { data, isLoading, error }\n}\n\nexport default useGetUserList\n","import React, { useEffect, useState } from 'react'\nimport {\n  CTable,\n  CTableHead,\n  CButton,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n} from '@coreui/react'\nimport useGetUserList from 'src/hooks/useGetUserList'\nimport Loading from './loading'\nimport ModalAddUser from './ModalAddUser'\n\nconst ProjectList = () => {\n  const { data, isLoading, error } = useGetUserList()\n  const [visibleAddUser, setVisibleAddUser] = useState(false)\n  const [selectedUser, setSelectedUser] = useState()\n\n  const handleEditUser = (user) => {\n    setSelectedUser(user)\n    setVisibleAddUser(!visibleAddUser)\n  }\n\n  return (\n    <>\n      {isLoading && <Loading />}\n      {visibleAddUser && (\n        <ModalAddUser\n          visible={true}\n          selectedUser={selectedUser}\n          sendDataToParent={(data) => {\n            setVisibleAddUser(data)\n          }}\n        />\n      )}\n      <CTable>\n        <CTableHead>\n          <CTableRow>\n            <CTableHeaderCell scope=\"col\">ID</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Nombre</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Correo</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Proyecto</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Contrato</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\">Acción</CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {data &&\n            data.users.map((user) => {\n              return (\n                <CTableRow key={user.id}>\n                  <CTableDataCell>{user.id}</CTableDataCell>\n                  <CTableDataCell>{user.userName}</CTableDataCell>\n                  <CTableDataCell>{user.userMail}</CTableDataCell>\n                  <CTableDataCell>{user.userProject}</CTableDataCell>\n                  <CTableDataCell>{user.userContract}</CTableDataCell>\n                  <CTableDataCell>\n                    <CButton className=\"btn-edit\" onClick={(e) => handleEditUser(user)}>\n                      Editar\n                    </CButton>\n                    <CButton className=\"btn-del\">Eliminar</CButton>\n                  </CTableDataCell>\n                </CTableRow>\n              )\n            })}\n        </CTableBody>\n      </CTable>\n    </>\n  )\n}\n\nexport default ProjectList\n","import React, { useState } from 'react'\nimport { CCard, CButton, CCardBody, CCardText } from '@coreui/react'\nimport ModalAddUser from 'src/components/ModalAddUser'\nimport UserList from 'src/components/UserList'\n\nconst User = () => {\n  const [visibleAddUser, setVisibleAddUser] = useState(false)\n\n  return (\n    <div className=\"user\">\n      {visibleAddUser && (\n        <ModalAddUser\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleAddUser(data)\n          }}\n        />\n      )}\n\n      <CCard>\n        <CCardBody>\n          <CButton onClick={() => setVisibleAddUser(!visibleAddUser)}>Añadir usuario</CButton>\n          <CCardText>\n            <UserList />\n          </CCardText>\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nexport default User\n","export const regex =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalContentProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalContent = forwardRef<HTMLDivElement, CModalContentProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-content', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalContent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalContent.displayName = 'CModalContent'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalDialogProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Does the modal dialog itself scroll, or does the whole dialog scroll within the window.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n}\n\nexport const CModalDialog = forwardRef<HTMLDivElement, CModalDialogProps>(\n  ({ children, alignment, className, fullscreen, scrollable, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'modal-dialog',\n          {\n            'modal-dialog-centered': alignment === 'center',\n            [typeof fullscreen === 'boolean'\n              ? 'modal-fullscreen'\n              : `modal-fullscreen-${fullscreen}-down`]: fullscreen,\n            'modal-dialog-scrollable': scrollable,\n            [`modal-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalDialog.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n}\n\nCModalDialog.displayName = 'CModalDialog'\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CBackdrop } from '../backdrop'\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CModalContent } from './CModalContent'\nimport { CModalDialog } from './CModalDialog'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CModalProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * Apply a backdrop on body while modal is open.\n   */\n  backdrop?: boolean | 'static'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * @ignore\n   */\n  duration?: number\n  /**\n   * Puts the focus on the modal when shown.\n   *\n   * @since v4.10.0\n   */\n  focus?: boolean\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Closes the modal when escape key is pressed.\n   */\n  keyboard?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClosePrevented?: () => void\n  /**\n   * Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\n   */\n  onShow?: () => void\n  /**\n   * Generates modal using createPortal.\n   */\n  portal?: boolean\n  /**\n   * Create a scrollable modal that allows scrolling the modal body.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n  /**\n   * Remove animation to create modal that simply appear rather than fade in to view.\n   */\n  transition?: boolean\n  /**\n   * By default the component is unmounted after close animation, if you want to keep the component mounted set this property to false.\n   */\n  unmountOnClose?: boolean\n  /**\n   * Toggle the visibility of modal component.\n   */\n  visible?: boolean\n}\n\ninterface ModalContextProps {\n  visible?: boolean\n  setVisible: React.Dispatch<React.SetStateAction<boolean | undefined>>\n}\n\nexport const CModalContext = createContext({} as ModalContextProps)\n\nexport const CModal = forwardRef<HTMLDivElement, CModalProps>(\n  (\n    {\n      children,\n      alignment,\n      backdrop = true,\n      className,\n      duration = 150,\n      focus = true,\n      fullscreen,\n      keyboard = true,\n      onClose,\n      onClosePrevented,\n      onShow,\n      portal = true,\n      scrollable,\n      size,\n      transition = true,\n      unmountOnClose = true,\n      visible,\n      ...rest\n    },\n    ref,\n  ) => {\n    const activeElementRef = useRef<HTMLElement | null>(null)\n    const modalRef = useRef<HTMLDivElement>(null)\n    const modalContentRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, modalRef)\n\n    const [_visible, setVisible] = useState(visible)\n    const [staticBackdrop, setStaticBackdrop] = useState(false)\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (_visible) {\n        activeElementRef.current = document.activeElement as HTMLElement | null\n        document.addEventListener('mouseup', handleClickOutside)\n        document.addEventListener('keydown', handleKeyDown)\n      } else {\n        activeElementRef.current?.focus()\n      }\n\n      return () => {\n        document.removeEventListener('mouseup', handleClickOutside)\n        document.removeEventListener('keydown', handleKeyDown)\n      }\n    }, [_visible])\n\n    const handleDismiss = () => {\n      if (backdrop === 'static') {\n        return setStaticBackdrop(true)\n      }\n\n      setVisible(false)\n\n      return onClose && onClose()\n    }\n\n    useLayoutEffect(() => {\n      onClosePrevented && onClosePrevented()\n      setTimeout(() => setStaticBackdrop(false), duration)\n    }, [staticBackdrop])\n\n    // Set focus to modal after open\n    useLayoutEffect(() => {\n      if (_visible) {\n        document.body.classList.add('modal-open')\n\n        if (backdrop) {\n          document.body.style.overflow = 'hidden'\n          document.body.style.paddingRight = '0px'\n        }\n\n        setTimeout(\n          () => {\n            focus && modalRef.current?.focus()\n          },\n          transition ? duration : 0,\n        )\n      } else {\n        document.body.classList.remove('modal-open')\n\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n\n      return () => {\n        document.body.classList.remove('modal-open')\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n    }, [_visible])\n\n    const handleClickOutside = (event: Event) => {\n      if (modalRef.current && modalRef.current == event.target) {\n        handleDismiss()\n      }\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && keyboard) {\n        handleDismiss()\n      }\n    }\n\n    return (\n      <>\n        <Transition\n          in={_visible}\n          mountOnEnter\n          nodeRef={modalRef}\n          onEnter={onShow}\n          onExit={onClose}\n          unmountOnExit={unmountOnClose}\n          timeout={transition ? duration : 0}\n        >\n          {(state) => (\n            <CConditionalPortal portal={portal}>\n              <CModalContext.Provider value={contextValues}>\n                <div\n                  className={classNames(\n                    'modal',\n                    {\n                      'modal-static': staticBackdrop,\n                      fade: transition,\n                      show: state === 'entered',\n                    },\n                    className,\n                  )}\n                  tabIndex={-1}\n                  {...(_visible\n                    ? { 'aria-modal': true, role: 'dialog' }\n                    : { 'aria-hidden': 'true' })}\n                  style={{\n                    ...(state !== 'exited' && { display: 'block' }),\n                  }}\n                  {...rest}\n                  ref={forkedRef}\n                >\n                  <CModalDialog\n                    alignment={alignment}\n                    fullscreen={fullscreen}\n                    scrollable={scrollable}\n                    size={size}\n                  >\n                    <CModalContent ref={modalContentRef}>{children}</CModalContent>\n                  </CModalDialog>\n                </div>\n              </CModalContext.Provider>\n            </CConditionalPortal>\n          )}\n        </Transition>\n        {backdrop && (\n          <CConditionalPortal portal={portal}>\n            <CBackdrop visible={_visible} />\n          </CConditionalPortal>\n        )}\n      </>\n    )\n  },\n)\n\nCModal.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'static'>(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  duration: PropTypes.number,\n  focus: PropTypes.bool,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  keyboard: PropTypes.bool,\n  onClose: PropTypes.func,\n  onClosePrevented: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  transition: PropTypes.bool,\n  unmountOnClose: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCModal.displayName = 'CModal'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalBody = forwardRef<HTMLDivElement, CModalBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalBody.displayName = 'CModalBody'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalFooter = forwardRef<HTMLDivElement, CModalFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalFooter.displayName = 'CModalFooter'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCloseButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Invert the default color.\n   */\n  dark?: boolean\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Change the default color to white.\n   *\n   * @deprecated 5.0.0\n   */\n  white?: boolean\n}\n\nexport const CCloseButton = forwardRef<HTMLButtonElement, CCloseButtonProps>(\n  ({ className, dark, disabled, white, ...rest }, ref) => {\n    return (\n      <button\n        type=\"button\"\n        className={classNames(\n          'btn',\n          'btn-close',\n          {\n            'btn-close-white': white,\n          },\n          disabled,\n          className,\n        )}\n        aria-label=\"Close\"\n        disabled={disabled}\n        {...(dark && { 'data-coreui-theme': 'dark' })}\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCCloseButton.propTypes = {\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  disabled: PropTypes.bool,\n  white: PropTypes.bool,\n}\n\nCCloseButton.displayName = 'CCloseButton'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModal'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n"],"names":["Loading","_jsx","Lottie","animationData","loadingjson","loop","width","className","localStorage","getItem","useFetchProyects","projectId","useQuery","queryKey","refetchType","refetchOnWindowFocus","queryFn","async","axios","get","data","fetchProducts","useFetchContract","contractId","fetchContracts","useFetchBasicData","staleTime","gcTime","fetchBasicData","useFetchUserList","fetchUsers","useFetchReportsData","fetchReportsData","useRegisterUser","error","setError","useState","isError","setIsError","queryClient","useQueryClient","mutation","useMutation","mutationFn","post","newTodo","then","res","ok","catch","err","onSuccess","suc","invalidateQueries","onError","register","mutate","props","initialState","userName","undefined","userMail","userProject","userContract","userPassword","isActive","user","setUser","selectedUser","userNameError","setUserNameError","userMailError","setUserMailError","userProjectError","setUserProjectError","userContractError","setUserContractError","userPasswordError","setUserPasswordError","errorForm","setErrorForm","onChangeData","e","target","id","value","handleClick","sendDataToParent","useEffect","_jsxs","CModal","scrollable","visible","onClose","size","children","CModalHeader","CModalTitle","CModalBody","CToast","autohide","color","CToastBody","CForm","CRow","CCol","sm","CFormInput","type","invalid","label","placeholder","text","onBlur","onChange","match","regex","CFormSelect","CFormCheck","defaultChecked","CModalFooter","CButton","onClick","name","useGetUserList","isLoading","ProjectList","visibleAddUser","setVisibleAddUser","setSelectedUser","_Fragment","ModalAddUser","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","users","map","CTableDataCell","handleEditUser","User","CCard","CCardBody","CCardText","UserList","forwardRef","_a","ref","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","reverse","_b","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","current","FormControl","React","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","concat","shape","htmlFor","propTypes","PropTypes","displayName","floatingClassName","htmlSize","options","CFormControlWrapper","option","index","disabled","key","CModalContent","CModalDialog","alignment","fullscreen","CModalContext","createContext","backdrop","_c","duration","_d","focus","_e","keyboard","onClosePrevented","onShow","_f","portal","_g","transition","_h","unmountOnClose","activeElementRef","modalRef","modalContentRef","_j","_visible","setVisible","_k","staticBackdrop","setStaticBackdrop","contextValues","document","activeElement","addEventListener","handleClickOutside","handleKeyDown","removeEventListener","handleDismiss","useLayoutEffect","setTimeout","body","classList","add","style","overflow","paddingRight","remove","removeProperty","event","Transition","in","mountOnEnter","nodeRef","onEnter","onExit","unmountOnExit","timeout","state","CConditionalPortal","Provider","fade","show","tabIndex","role","display","CBackdrop","CCloseButton","dark","white","closeButton","useContext","as","Component"],"sourceRoot":""}