{"version":3,"file":"static/js/653.0a3b1728.chunk.js","mappings":"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","sources":["hooks/useRegisterProject.js","components/ModalAddProject.jsx","components/loading.jsx","hooks/useGetProjects.js","pages/ProjectSelector.jsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/card/CCardTitle.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx","../node_modules/@coreui/react/src/components/toast/CToast.tsx","../node_modules/@coreui/react/src/components/toast/CToastBody.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsD.tsx","../node_modules/axios/index.js"],"sourcesContent":["import { useState } from 'react'\nimport axios, { HttpStatusCode } from 'axios'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\n\nconst useRegisterProject = () => {\n  const [error, setError] = useState()\n  const [isError, setIsError] = useState(false)\n  const queryClient = useQueryClient()\n\n  const mutation = useMutation({\n    mutationFn: async (newTodo) => {\n      return await axios\n        .post('https://pyg-production.up.railway.app/api/v1/projects', newTodo)\n        .then((res) => {\n          if (res.status === HttpStatusCode.Created) {\n            setIsError(false)\n            return res.ok\n          } else {\n            setError('Error al registrar proyecto')\n            setIsError(true)\n            return false\n          }\n        })\n        .catch((err) => {\n          setError('Error al registrar proyecto')\n          setIsError(true)\n          return false\n        })\n    },\n    onSuccess: (suc) => {\n      queryClient.invalidateQueries({ queryKey: ['projects'] })\n    },\n    onError: (err) => {\n      setError('Error al registrar proyecto')\n      setIsError(true)\n      return false\n    },\n  })\n\n  // const useMutateTodo = () => {\n  //   const queryClient = useQueryClient()\n\n  //   return useMutation(editTodo, {\n  //     // Notice the second argument is the variables object that the `mutate` function receives\n  //     onSuccess: (data, variables) => {\n  //       queryClient.setQueryData(['todo', { id: variables.id }], data)\n  //     },\n  //   })\n  // }\n\n  const mutationUpdate = useMutation({\n    mutationFn: async (newTodo) => {\n      return await axios\n        .put(`https://pyg-production.up.railway.app/api/v1/projects/${newTodo.id}`, newTodo)\n        .then((res) => {\n          if (res.status === HttpStatusCode.Created) {\n            setIsError(false)\n            return res.ok\n          } else {\n            setError('Error al actualizar proyecto')\n            setIsError(true)\n            return false\n          }\n        })\n        .catch((err) => {\n          setError('Error al actualizar proyecto')\n          setIsError(true)\n          return false\n        })\n    },\n    onSuccess: (suc) => {\n      queryClient.invalidateQueries({ queryKey: ['projects'] })\n    },\n    onError: (err) => {\n      setError('Error al actualizar proyecto')\n      setIsError(true)\n      return false\n    },\n  })\n\n  const register = (data) => {\n    setIsError(false)\n    const projectData = {\n      name: data.projectName,\n      description: data.projectDescription,\n      manager: data.projectManager,\n    }\n    const response = mutation.mutate(projectData)\n    return response\n  }\n\n  const update = (data) => {\n    setIsError(false)\n    const response = mutationUpdate.mutate(data)\n    return response\n  }\n\n  return { register, error, isError, update }\n}\n\nexport default useRegisterProject\n","/* eslint-disable react/prop-types */\nimport { React, useEffect, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n  CToast,\n  CToastBody,\n} from '@coreui/react'\nimport useRegisterProject from 'src/hooks/useRegisterProject'\nconst ModalAddProject = (props) => {\n  const initialState = {\n    projectName: undefined,\n    projectManager: undefined,\n    projectDescription: undefined,\n    isActive: undefined,\n  }\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  const [project, setProject] = useState(\n    props.selectedProject ? props.selectedProject : initialState,\n  )\n  const [errorForm, setErrorForm] = useState(0)\n  const [projectNameError, setProjectNameError] = useState(false)\n  const [projectManagerError, setProjectManagerError] = useState(false)\n  const [projectDescriptionError, setProjectDescriptionError] = useState(false)\n\n  const { register, error, isError, update } = useRegisterProject()\n\n  const onChangeData = (e) => {\n    setProject({ ...project, [e.target.id]: e.target.value })\n  }\n\n  const handleRegisterProject = () => {\n    if (!project.projectName || project.projectName === '') {\n      // setErrorForm(1)\n      setProjectNameError(true)\n    } else {\n      // setErrorForm(3)\n      setProjectNameError(false)\n    }\n    if (!project.projectManager || project.projectManager === '') {\n      // setErrorForm(1)\n      setProjectManagerError(true)\n    } else {\n      // setErrorForm(3)\n      setProjectManagerError(false)\n    }\n    if (!project.projectDescription || project.projectDescription === '') {\n      // setErrorForm(1)\n      setProjectDescriptionError(true)\n    } else {\n      // setErrorForm(3)\n      setProjectDescriptionError(false)\n    }\n\n    if (\n      !project.projectName ||\n      project.projectName === '' ||\n      !project.projectManager ||\n      project.projectManager === '' ||\n      !project.projectDescription ||\n      project.projectDescription === ''\n    ) {\n      setErrorForm(1)\n    } else {\n      setErrorForm(3)\n    }\n  }\n\n  useEffect(() => {\n    if (project.isActive === undefined) {\n      project.isActive = false\n    }\n    if (errorForm === 3) {\n      if (props?.selectedProject?.projectId) {\n        update({\n          id: props.selectedProject.projectId,\n          name: project.projectName,\n          description: project.projectDescription,\n          manager: project.projectManager,\n        })\n        props.sendDataToParent(false)\n      } else {\n        register(project)\n        props.sendDataToParent(false)\n      }\n    }\n  }, [errorForm])\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Proyecto</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CToast\n          autohide={true}\n          visible={isError}\n          color=\"danger\"\n          className=\"text-white align-items-center\"\n        >\n          <div className=\"d-flex\">\n            <CToastBody>{error}</CToastBody>\n          </div>\n        </CToast>\n        <CToast\n          autohide={true}\n          visible={errorForm === 1}\n          color=\"danger\"\n          onClose={() => {\n            setErrorForm(2)\n          }}\n          className=\"text-white align-items-center\"\n        >\n          <div className=\"d-flex\">\n            <CToastBody>Debe completar todos los datos para crear el proyecto</CToastBody>\n          </div>\n        </CToast>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"projectName\"\n                label=\"Nombre de proyecto\"\n                placeholder=\"Nombre de proyecto\"\n                invalid={projectNameError}\n                value={project.projectName || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setProjectNameError(false)\n                  } else {\n                    setProjectNameError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            {/* <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contract\"\n                label=\"Contrato\"\n                placeholder=\"Contrato\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol> */}\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"projectManager\"\n                label=\"Encargado\"\n                placeholder=\"Encargado\"\n                invalid={projectManagerError}\n                value={project.projectManager || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setProjectManagerError(false)\n                  } else {\n                    setProjectManagerError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              />\n            </CCol>\n            {/* <CCol sm={6}>\n              <CFormInput type=\"file\" id=\"formFile\" label=\"Elegir archivo\" />\n            </CCol> */}\n          </CRow>\n          <CRow>\n            <CCol sm={12}>\n              <CFormTextarea\n                id=\"projectDescription\"\n                label=\"Descripción\"\n                rows={3}\n                invalid={projectDescriptionError}\n                value={project.projectDescription || ''}\n                text=\"\"\n                onBlur={(e) => {\n                  if (e.target.value !== '') {\n                    setProjectDescriptionError(false)\n                  } else {\n                    setProjectDescriptionError(true)\n                  }\n                }}\n                onChange={(e) => {\n                  onChangeData(e)\n                }}\n              ></CFormTextarea>\n            </CCol>\n          </CRow>\n          <CRow>\n            {/* <CCol sm={6}>\n              <CFormInput\n                type=\"color\"\n                id=\"color\"\n                defaultValue=\"#FFFFFF\"\n                label=\"Color de fondo\"\n                title=\"Color de fondo\"\n              />\n            </CCol> */}\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormCheck\n                id=\"isActive\"\n                label=\"Activo\"\n                defaultChecked={project.isActive}\n                onChange={(e) => {\n                  setProject({ ...project, [e.target.id]: !project.isActive })\n                }}\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\" onClick={() => handleRegisterProject()}>\n          Registrar\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddProject\n","import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useFetchProyects } from './useFetch'\n\nconst useGetProjects = (projectId) => {\n  const { data, isLoading, error, refetch, isRefetching } = useFetchProyects(projectId)\n  return { data, isLoading, error, refetch, isRefetching }\n}\n\nexport default useGetProjects\n","import { React, useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\nimport Loading from 'src/components/loading'\nimport useGetProjects from 'src/hooks/useGetProjects'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\nimport ModalAddProject from 'src/components/ModalAddProject'\n\nconst ProjectSelector = () => {\n  const navigate = useNavigate()\n  const userType = localStorage.getItem('USER_TYPE')\n  const { getData } = useGetCachedQueryData()\n\n  const contractsQuery = getData('contracts')\n  const { getContract, saveProject } = useRegisterGeneralData()\n  const contractLS = JSON.parse(getContract())\n\n  const { data: projectData, isLoading } = useGetProjects(1)\n\n  const [projectList, setProjectList] = useState()\n\n  const [visibleProject, setVisibleProject] = useState(false)\n\n  const onClickHandler = (project) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: project.name,\n        id: project.id,\n        manager: project.manager || '',\n      }\n      saveProject(data)\n      navigate(`/contrato`)\n    } else {\n      const data = {\n        name: project.name,\n        id: project.id,\n        manager: project.manager || '',\n      }\n      saveProject(data)\n      navigate(`/dashboard`)\n    }\n  }\n\n  const onClickNewProject = () => {\n    setVisibleProject(!visibleProject)\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      if (contractsQuery && contractLS) {\n      } else {\n        navigate(`/project_selector`)\n      }\n    } else {\n      const contractFinded = contractsQuery.contract.find((contractData) => {\n        return contractData.id === contractLS.id\n      })\n      setProjectList(contractFinded.project)\n    }\n  }, [contractsQuery, contractLS])\n\n  useEffect(() => {\n    userType !== 'admin' && projectData && setProjectList(projectData)\n  }, [projectData])\n\n  return (\n    <>\n      {visibleProject && (\n        <ModalAddProject\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleProject(data)\n          }}\n        />\n      )}\n      <CCol sm={6} className=\"project-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Proyecto</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {isLoading && <Loading />}\n              {!isLoading &&\n                projectList &&\n                projectList.map((project, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(project)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{project.name}</span>\n                              </CRow>\n                              {project.manager && (\n                                <CRow>\n                                  <span className=\"project-manager\">\n                                    Encargado: {project.manager}\n                                  </span>\n                                </CRow>\n                              )}\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                          values={[{ title: 'Contratos', value: project?.contracts?.length || 0 }]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n              <CRow key={0}>\n                <CCol>\n                  <CWidgetStatsD\n                    onClick={() => {\n                      onClickNewProject()\n                    }}\n                    className=\"mb-3\"\n                    icon={\n                      <CIcon\n                        className=\"my-4 text-white\"\n                        icon={'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'}\n                        height={52}\n                      />\n                    }\n                    chart={\n                      <CContainer className=\"project-selector-container\">\n                        <CRow>\n                          <span className=\"project-title\">Crear nuevo proyecto</span>\n                        </CRow>\n                      </CContainer>\n                    }\n                    style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                  />\n                </CCol>\n              </CRow>\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ProjectSelector\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardText: PolymorphicRefForwardingComponent<'p', CCardTextProps> = forwardRef<\n  HTMLParagraphElement,\n  CCardTextProps\n>(({ children, as: Component = 'p', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardTitle: PolymorphicRefForwardingComponent<'h5', CCardTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  CCardTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CToastProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * Apply a CSS fade transition to the toast.\n   */\n  animation?: boolean\n  /**\n   * Auto hide the toast.\n   */\n  autohide?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Delay hiding the toast (ms).\n   */\n  delay?: number\n  /**\n   * @ignore\n   */\n  index?: number\n  /**\n   * @ignore\n   */\n  key?: number\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: (index: number | null) => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: (index: number | null) => void\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\ninterface ContextProps extends CToastProps {\n  visible?: boolean\n  setVisible: React.Dispatch<React.SetStateAction<boolean | undefined>>\n}\n\nexport const CToastContext = createContext({} as ContextProps)\n\nexport const CToast = forwardRef<HTMLDivElement, CToastProps>(\n  (\n    {\n      children,\n      animation = true,\n      autohide = true,\n      className,\n      color,\n      delay = 5000,\n      index,\n      key,\n      visible = false,\n      onClose,\n      onShow,\n      ...rest\n    },\n    ref,\n  ) => {\n    const toastRef = useRef()\n    const forkedRef = useForkedRef(ref, toastRef)\n    const [_visible, setVisible] = useState(false)\n    const timeout = useRef<number>()\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    // triggered on mount and destroy\n    useEffect(() => () => clearTimeout(timeout.current), [])\n\n    useEffect(() => {\n      _autohide()\n    }, [_visible])\n\n    const _autohide = () => {\n      if (autohide) {\n        clearTimeout(timeout.current)\n        timeout.current = window.setTimeout(() => {\n          setVisible(false)\n        }, delay)\n      }\n    }\n\n    return (\n      <Transition\n        in={_visible}\n        nodeRef={toastRef}\n        onEnter={() => onShow && onShow(index ?? null)}\n        onExited={() => onClose && onClose(index ?? null)}\n        timeout={250}\n        unmountOnExit\n      >\n        {(state) => (\n          <CToastContext.Provider value={contextValues}>\n            <div\n              className={classNames(\n                'toast',\n                {\n                  fade: animation,\n                  [`bg-${color}`]: color,\n                  'border-0': color,\n                  'show showing': state === 'entering' || state === 'exiting',\n                  show: state === 'entered',\n                },\n                className,\n              )}\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n              role=\"alert\"\n              onMouseEnter={() => clearTimeout(timeout.current)}\n              onMouseLeave={() => _autohide()}\n              {...rest}\n              key={key}\n              ref={forkedRef}\n            >\n              {children}\n            </div>\n          </CToastContext.Provider>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCToast.propTypes = {\n  animation: PropTypes.bool,\n  autohide: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  delay: PropTypes.number,\n  index: PropTypes.number,\n  key: PropTypes.number,\n  onClose: PropTypes.func,\n  onShow: PropTypes.func,\n  visible: PropTypes.bool,\n}\n\nCToast.displayName = 'CToast'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CToastBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CToastBody = forwardRef<HTMLDivElement, CToastBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('toast-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCToastBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCToastBody.displayName = 'CToastBody'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody, CCardHeader } from '../card'\nimport { CCol } from '../grid/CCol'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\ntype Value = {\n  title?: string | ReactNode\n  value?: number | string | ReactNode\n}\n\nexport interface CWidgetStatsDProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Values and titles for your component.\n   */\n  values?: Value[]\n}\n\nexport const CWidgetStatsD = forwardRef<HTMLDivElement, CWidgetStatsDProps>(\n  ({ className, chart, color, icon, values, ...rest }, ref) => {\n    return (\n      <CCard className={className} {...rest} ref={ref}>\n        <CCardHeader\n          className={classNames(\n            'position-relative d-flex justify-content-center align-items-center',\n            {\n              [`bg-${color}`]: color,\n            },\n          )}\n        >\n          {icon}\n          {chart}\n        </CCardHeader>\n        <CCardBody className=\"row text-center\">\n          {values &&\n            values.map((value: Value, index: number) => {\n              return (\n                <React.Fragment key={index}>\n                  {index % 2 !== 0 && <div className=\"vr\"></div>}\n                  <CCol>\n                    <div className=\"fs-5 fw-semibold\">{value.value}</div>\n                    <div className=\"text-uppercase text-body-secondary small\">{value.title}</div>\n                  </CCol>\n                </React.Fragment>\n              )\n            })}\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsD.propTypes = {\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  values: PropTypes.arrayOf(PropTypes.any),\n}\n\nCWidgetStatsD.displayName = 'CWidgetStatsD'\n","import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n}\n"],"names":["useRegisterProject","error","setError","useState","isError","setIsError","queryClient","useQueryClient","mutation","useMutation","mutationFn","async","axios","post","newTodo","then","res","status","HttpStatusCode","Created","ok","catch","err","onSuccess","suc","invalidateQueries","queryKey","onError","mutationUpdate","put","concat","id","register","data","projectData","name","projectName","description","projectDescription","manager","projectManager","mutate","update","props","initialState","undefined","isActive","handleClick","sendDataToParent","project","setProject","selectedProject","errorForm","setErrorForm","projectNameError","setProjectNameError","projectManagerError","setProjectManagerError","projectDescriptionError","setProjectDescriptionError","onChangeData","e","target","value","useEffect","_props$selectedProjec","projectId","_jsxs","CModal","scrollable","visible","onClose","size","className","children","_jsx","CModalHeader","CModalTitle","CModalBody","CToast","autohide","color","CToastBody","CForm","CRow","CCol","sm","CFormInput","type","label","placeholder","invalid","text","onBlur","onChange","CFormTextarea","rows","CFormCheck","defaultChecked","CModalFooter","CButton","onClick","Loading","Lottie","animationData","loadingjson","loop","width","isLoading","refetch","isRefetching","useFetchProyects","ProjectSelector","navigate","useNavigate","userType","localStorage","getItem","getData","useGetCachedQueryData","contractsQuery","getContract","saveProject","useRegisterGeneralData","contractLS","JSON","parse","useGetProjects","projectList","setProjectList","visibleProject","setVisibleProject","contractFinded","contract","find","contractData","_Fragment","ModalAddProject","CCard","CCardTitle","CCardBody","CCardText","map","index","_project$contracts","CWidgetStatsD","onClickHandler","icon","CIcon","height","chart","CContainer","style","cursor","values","title","contracts","length","CCardHeader","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","reverse","valid","inputRef","useRef","forkedRef","useForkedRef","current","FormControl","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","shape","htmlFor","floatingClassName","plainText","CFormControlWrapper","CToastContext","createContext","animation","_c","_d","delay","key","_e","onShow","toastRef","_f","_visible","setVisible","timeout","contextValues","clearTimeout","_autohide","window","setTimeout","Transition","in","nodeRef","onEnter","onExited","unmountOnExit","state","Provider","fade","show","role","onMouseEnter","onMouseLeave","colorPropType","Axios","AxiosError","CanceledError","isCancel","CancelToken","VERSION","all","Cancel","isAxiosError","spread","toFormData","AxiosHeaders","formToJSON","getAdapter","mergeConfig"],"sourceRoot":""}