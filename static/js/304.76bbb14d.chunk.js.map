{"version":3,"file":"static/js/304.76bbb14d.chunk.js","mappings":"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","sources":["hooks/useRegisterGeneralData.js","pages/ContractSelector.jsx","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/card/CCardTitle.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsD.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nconst useRegisterGeneralData = () => {\n  const saveProject = (data) => {\n    localStorage.setItem('project', JSON.stringify(data))\n  }\n  const saveContract = (data) => {\n    localStorage.setItem('contract', JSON.stringify(data))\n  }\n\n  const getProject = () => {\n    return localStorage.getItem('project')\n  }\n  const getContract = (data) => {\n    return localStorage.getItem('contract')\n  }\n\n  return { saveProject, saveContract, getProject, getContract }\n}\n\nexport default useRegisterGeneralData\n","import { React, useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\n\nimport CIcon from '@coreui/icons-react'\n\nconst ProjectSelector = () => {\n  const navigate = useNavigate()\n  const { getProject, saveContract } = useRegisterGeneralData()\n  const [selectedProject, setSelectedProject] = useState()\n  const projectsQuery = useGetCachedQueryData('projects')\n\n  const onClickHandler = (contract) => {\n    const data = {\n      name: contract.name,\n      id: contract.id,\n    }\n    saveContract(data)\n    navigate(`/dashboard`)\n  }\n  const projectLS = JSON.parse(getProject())\n\n  useEffect(() => {\n    if (projectLS && projectsQuery) {\n      const projectFinded = projectsQuery.projects.find((projectData) => {\n        return projectData.id === projectLS.id\n      })\n      setSelectedProject(projectFinded)\n    } else {\n      navigate(`/project_selector`)\n    }\n  }, [projectsQuery, projectLS])\n\n  return (\n    <>\n      <CCol sm={6} className=\"contract-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Contrato</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {selectedProject?.contracts === undefined && (\n                <h3>No se encontraron contratos asociados</h3>\n              )}\n              {selectedProject &&\n                selectedProject?.contracts?.map((contract, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(contract)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{contract.name}</span>\n                              </CRow>\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55' }}\n                          values={[\n                            { title: 'Trisemanales', value: contract.trisemanal },\n                            { title: 'Avance', value: contract.progress },\n                          ]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\n// First create a helper function\nexport const useGetCachedQueryData = (key) => {\n  const queryClient = useQueryClient()\n\n  // Make sure that the key is wrapped in an array for this to work\n  const data = queryClient.getQueryData([key])\n  return data\n}\n\nexport default ProjectSelector\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardText: PolymorphicRefForwardingComponent<'p', CCardTextProps> = forwardRef<\n  HTMLParagraphElement,\n  CCardTextProps\n>(({ children, as: Component = 'p', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardTitle: PolymorphicRefForwardingComponent<'h5', CCardTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  CCardTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody, CCardHeader } from '../card'\nimport { CCol } from '../grid/CCol'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\ntype Value = {\n  title?: string | ReactNode\n  value?: number | string | ReactNode\n}\n\nexport interface CWidgetStatsDProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Values and titles for your component.\n   */\n  values?: Value[]\n}\n\nexport const CWidgetStatsD = forwardRef<HTMLDivElement, CWidgetStatsDProps>(\n  ({ className, chart, color, icon, values, ...rest }, ref) => {\n    return (\n      <CCard className={className} {...rest} ref={ref}>\n        <CCardHeader\n          className={classNames(\n            'position-relative d-flex justify-content-center align-items-center',\n            {\n              [`bg-${color}`]: color,\n            },\n          )}\n        >\n          {icon}\n          {chart}\n        </CCardHeader>\n        <CCardBody className=\"row text-center\">\n          {values &&\n            values.map((value: Value, index: number) => {\n              return (\n                <React.Fragment key={index}>\n                  {index % 2 !== 0 && <div className=\"vr\"></div>}\n                  <CCol>\n                    <div className=\"fs-5 fw-semibold\">{value.value}</div>\n                    <div className=\"text-uppercase text-body-secondary small\">{value.title}</div>\n                  </CCol>\n                </React.Fragment>\n              )\n            })}\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsD.propTypes = {\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  values: PropTypes.arrayOf(PropTypes.any),\n}\n\nCWidgetStatsD.displayName = 'CWidgetStatsD'\n"],"names":["useRegisterGeneralData","saveProject","data","localStorage","setItem","JSON","stringify","saveContract","getProject","getItem","getContract","useGetCachedQueryData","key","useQueryClient","getQueryData","ProjectSelector","_selectedProject$cont","navigate","useNavigate","selectedProject","setSelectedProject","useState","projectsQuery","projectLS","parse","useEffect","projectFinded","projects","find","projectData","id","_jsx","_Fragment","children","CCol","sm","className","_jsxs","CCard","CCardTitle","CCardBody","CCardText","undefined","contracts","map","contract","index","CRow","CWidgetStatsD","onClick","name","onClickHandler","icon","CIcon","height","chart","CContainer","style","values","title","value","trisemanal","progress","forwardRef","_a","ref","color","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","CCardHeader","as","Component","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","xs","md","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}