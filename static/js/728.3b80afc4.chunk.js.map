{"version":3,"file":"static/js/728.3b80afc4.chunk.js","mappings":"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","sources":["components/ModalAddContract.jsx","hooks/useFetch.js","hooks/useGetContracts.js","pages/ContractSelector.jsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/card/CCardTitle.tsx","../node_modules/@coreui/react/src/components/modal/CModalContent.tsx","../node_modules/@coreui/react/src/components/modal/CModalDialog.tsx","../node_modules/@coreui/react/src/components/modal/CModal.tsx","../node_modules/@coreui/react/src/components/modal/CModalBody.tsx","../node_modules/@coreui/react/src/components/modal/CModalFooter.tsx","../node_modules/@coreui/react/src/components/close-button/CCloseButton.tsx","../node_modules/@coreui/react/src/components/modal/CModalHeader.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsD.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n} from '@coreui/react'\nconst ModalAddContract = (props) => {\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Contrato</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractName\"\n                label=\"Nombre\"\n                placeholder=\"Nombre\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n                onChange={(e) => {}}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractDetail\"\n                label=\"Detalle\"\n                placeholder=\"Detalle\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractUrl\"\n                label=\"URL\"\n                placeholder=\"URL\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractPhone\"\n                label=\"Teléfono\"\n                placeholder=\"Teléfono\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />{' '}\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractMail\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\">Añadir contrato</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddContract\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/projects', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst fetchUsers = async () => {\n  const res = await axios.get('https://b4b07e25f42d4135b6fc3791a6e1d1f8.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchBasicData = async (contractId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/basicData', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst testToken = async () => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/test', {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nexport const fetchReportsData = async () => {\n  // const res = await axios.get(\n  //   `https://pyg-production.up.railway.app/api/v1/reports/search?contract_id=${contractId}&project_id=${projectId}`,\n  //   {\n  const res = await axios.get(`https://pyg-production.up.railway.app/api/v1/reports`, {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nexport const fetchReportDataByReportId = async (reportId) => {\n  const res = await axios.get(`https://pyg-production.up.railway.app/api/v1/reports/${reportId}`, {\n    // const res = await axios.get(`https://pyg-production.up.railway.app/api/v1/reports`, {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    },\n  })\n  return res.data.data\n}\n\nconst userType = localStorage.getItem('USER_TYPE')\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    refetchType: 'all',\n    // refetchInterval: 10000,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n\nexport const useFetchBasicData = (contractId) => {\n  return useQuery({\n    queryKey: ['basics'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchBasicData(contractId)\n    },\n  })\n}\n\nexport const useFetchUserList = () => {\n  return useQuery({\n    queryKey: ['users'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchUsers()\n    },\n  })\n}\n\nexport const useFetchReportsData = () => {\n  return useQuery({\n    queryKey: ['reports'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchReportsData()\n    },\n  })\n}\n\nexport const useFetchReportData = (reportId) => {\n  return useQuery({\n    queryKey: ['selectedReport'],\n    staleTime: 0,\n    gcTime: 2147483647,\n    refetchType: 'all',\n    queryFn: async () => {\n      return reportId ? fetchReportDataByReportId(reportId) : undefined\n    },\n  })\n}\n","import { useFetchContract } from './useFetch'\n\nconst useGetContracts = (contractId) => {\n  const { data, isLoading, error } = useFetchContract(contractId)\n\n  return { data, isLoading, error }\n}\n\nexport default useGetContracts\n","import { React, useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\n\nimport CIcon from '@coreui/icons-react'\nimport useGetContracts from 'src/hooks/useGetContracts'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\nimport ModalAddContract from 'src/components/ModalAddContract'\n\nconst ContractSelector = () => {\n  const navigate = useNavigate()\n  const { getProject, saveContract } = useRegisterGeneralData()\n  const [contractList, setContractList] = useState()\n  const { getData } = useGetCachedQueryData()\n\n  const projectsQuery = getData('projects')\n  const userType = localStorage.getItem('USER_TYPE')\n  const { data: contractData } = useGetContracts(1)\n  const projectLS = JSON.parse(getProject())\n\n  const [visibleContract, setVisibleContract] = useState(false)\n\n  const onClickHandler = (contract) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: contract.name,\n        id: contract.id,\n        code: contract.code,\n      }\n      saveContract(data)\n      navigate(`/dashboard`)\n    } else {\n      const data = {\n        name: contract.name,\n        id: contract.id,\n        code: contract.code,\n      }\n      saveContract(data)\n      navigate(`/project_selector`)\n    }\n  }\n\n  const onClickNewContract = () => {\n    setVisibleContract(!visibleContract)\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      if (projectLS && projectsQuery) {\n        const projectFinded = projectsQuery.find((projectData) => {\n          return projectData.id === projectLS.id\n        })\n        setContractList(projectFinded.contracts)\n      } else {\n        navigate(`/project_selector`)\n      }\n    }\n  }, [projectsQuery, projectLS])\n\n  useEffect(() => {\n    userType === 'admin' && contractData?.contract && setContractList(contractData.contract)\n  }, [contractData])\n\n  return (\n    <>\n      {visibleContract && (\n        <ModalAddContract\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleContract(data)\n          }}\n        />\n      )}\n      <CCol sm={6} className=\"contract-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Contrato</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {contractList === undefined && <h3>No se encontraron contratos asociados</h3>}\n              {contractList &&\n                contractList?.map((contract, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(contract)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{contract.name}</span>\n                              </CRow>\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                          values={[\n                            { title: 'Trisemanales', value: contract.trisemanal },\n                            { title: 'Avance', value: contract.progress },\n                          ]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n              <CRow key={0}>\n                <CCol>\n                  <CWidgetStatsD\n                    onClick={() => {\n                      onClickNewContract()\n                    }}\n                    className=\"mb-3\"\n                    icon={\n                      <CIcon\n                        className=\"my-4 text-white\"\n                        icon={'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'}\n                        height={52}\n                      />\n                    }\n                    chart={\n                      <CContainer className=\"project-selector-container\">\n                        <CRow>\n                          <span className=\"project-title\">Crear nuevo contrato</span>\n                        </CRow>\n                      </CContainer>\n                    }\n                    style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                  />\n                </CCol>\n              </CRow>\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ContractSelector\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardText: PolymorphicRefForwardingComponent<'p', CCardTextProps> = forwardRef<\n  HTMLParagraphElement,\n  CCardTextProps\n>(({ children, as: Component = 'p', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardTitle: PolymorphicRefForwardingComponent<'h5', CCardTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  CCardTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalContentProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalContent = forwardRef<HTMLDivElement, CModalContentProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-content', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalContent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalContent.displayName = 'CModalContent'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalDialogProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Does the modal dialog itself scroll, or does the whole dialog scroll within the window.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n}\n\nexport const CModalDialog = forwardRef<HTMLDivElement, CModalDialogProps>(\n  ({ children, alignment, className, fullscreen, scrollable, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'modal-dialog',\n          {\n            'modal-dialog-centered': alignment === 'center',\n            [typeof fullscreen === 'boolean'\n              ? 'modal-fullscreen'\n              : `modal-fullscreen-${fullscreen}-down`]: fullscreen,\n            'modal-dialog-scrollable': scrollable,\n            [`modal-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalDialog.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n}\n\nCModalDialog.displayName = 'CModalDialog'\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CBackdrop } from '../backdrop'\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CModalContent } from './CModalContent'\nimport { CModalDialog } from './CModalDialog'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CModalProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * Apply a backdrop on body while modal is open.\n   */\n  backdrop?: boolean | 'static'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * @ignore\n   */\n  duration?: number\n  /**\n   * Puts the focus on the modal when shown.\n   *\n   * @since v4.10.0\n   */\n  focus?: boolean\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Closes the modal when escape key is pressed.\n   */\n  keyboard?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClosePrevented?: () => void\n  /**\n   * Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\n   */\n  onShow?: () => void\n  /**\n   * Generates modal using createPortal.\n   */\n  portal?: boolean\n  /**\n   * Create a scrollable modal that allows scrolling the modal body.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n  /**\n   * Remove animation to create modal that simply appear rather than fade in to view.\n   */\n  transition?: boolean\n  /**\n   * By default the component is unmounted after close animation, if you want to keep the component mounted set this property to false.\n   */\n  unmountOnClose?: boolean\n  /**\n   * Toggle the visibility of modal component.\n   */\n  visible?: boolean\n}\n\ninterface ModalContextProps {\n  visible?: boolean\n  setVisible: React.Dispatch<React.SetStateAction<boolean | undefined>>\n}\n\nexport const CModalContext = createContext({} as ModalContextProps)\n\nexport const CModal = forwardRef<HTMLDivElement, CModalProps>(\n  (\n    {\n      children,\n      alignment,\n      backdrop = true,\n      className,\n      duration = 150,\n      focus = true,\n      fullscreen,\n      keyboard = true,\n      onClose,\n      onClosePrevented,\n      onShow,\n      portal = true,\n      scrollable,\n      size,\n      transition = true,\n      unmountOnClose = true,\n      visible,\n      ...rest\n    },\n    ref,\n  ) => {\n    const activeElementRef = useRef<HTMLElement | null>(null)\n    const modalRef = useRef<HTMLDivElement>(null)\n    const modalContentRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, modalRef)\n\n    const [_visible, setVisible] = useState(visible)\n    const [staticBackdrop, setStaticBackdrop] = useState(false)\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (_visible) {\n        activeElementRef.current = document.activeElement as HTMLElement | null\n        document.addEventListener('mouseup', handleClickOutside)\n        document.addEventListener('keydown', handleKeyDown)\n      } else {\n        activeElementRef.current?.focus()\n      }\n\n      return () => {\n        document.removeEventListener('mouseup', handleClickOutside)\n        document.removeEventListener('keydown', handleKeyDown)\n      }\n    }, [_visible])\n\n    const handleDismiss = () => {\n      if (backdrop === 'static') {\n        return setStaticBackdrop(true)\n      }\n\n      setVisible(false)\n\n      return onClose && onClose()\n    }\n\n    useLayoutEffect(() => {\n      onClosePrevented && onClosePrevented()\n      setTimeout(() => setStaticBackdrop(false), duration)\n    }, [staticBackdrop])\n\n    // Set focus to modal after open\n    useLayoutEffect(() => {\n      if (_visible) {\n        document.body.classList.add('modal-open')\n\n        if (backdrop) {\n          document.body.style.overflow = 'hidden'\n          document.body.style.paddingRight = '0px'\n        }\n\n        setTimeout(\n          () => {\n            focus && modalRef.current?.focus()\n          },\n          transition ? duration : 0,\n        )\n      } else {\n        document.body.classList.remove('modal-open')\n\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n\n      return () => {\n        document.body.classList.remove('modal-open')\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n    }, [_visible])\n\n    const handleClickOutside = (event: Event) => {\n      if (modalRef.current && modalRef.current == event.target) {\n        handleDismiss()\n      }\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && keyboard) {\n        handleDismiss()\n      }\n    }\n\n    return (\n      <>\n        <Transition\n          in={_visible}\n          mountOnEnter\n          nodeRef={modalRef}\n          onEnter={onShow}\n          onExit={onClose}\n          unmountOnExit={unmountOnClose}\n          timeout={transition ? duration : 0}\n        >\n          {(state) => (\n            <CConditionalPortal portal={portal}>\n              <CModalContext.Provider value={contextValues}>\n                <div\n                  className={classNames(\n                    'modal',\n                    {\n                      'modal-static': staticBackdrop,\n                      fade: transition,\n                      show: state === 'entered',\n                    },\n                    className,\n                  )}\n                  tabIndex={-1}\n                  {...(_visible\n                    ? { 'aria-modal': true, role: 'dialog' }\n                    : { 'aria-hidden': 'true' })}\n                  style={{\n                    ...(state !== 'exited' && { display: 'block' }),\n                  }}\n                  {...rest}\n                  ref={forkedRef}\n                >\n                  <CModalDialog\n                    alignment={alignment}\n                    fullscreen={fullscreen}\n                    scrollable={scrollable}\n                    size={size}\n                  >\n                    <CModalContent ref={modalContentRef}>{children}</CModalContent>\n                  </CModalDialog>\n                </div>\n              </CModalContext.Provider>\n            </CConditionalPortal>\n          )}\n        </Transition>\n        {backdrop && (\n          <CConditionalPortal portal={portal}>\n            <CBackdrop visible={_visible} />\n          </CConditionalPortal>\n        )}\n      </>\n    )\n  },\n)\n\nCModal.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'static'>(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  duration: PropTypes.number,\n  focus: PropTypes.bool,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  keyboard: PropTypes.bool,\n  onClose: PropTypes.func,\n  onClosePrevented: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  transition: PropTypes.bool,\n  unmountOnClose: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCModal.displayName = 'CModal'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalBody = forwardRef<HTMLDivElement, CModalBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalBody.displayName = 'CModalBody'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalFooter = forwardRef<HTMLDivElement, CModalFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalFooter.displayName = 'CModalFooter'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCloseButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Invert the default color.\n   */\n  dark?: boolean\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Change the default color to white.\n   *\n   * @deprecated 5.0.0\n   */\n  white?: boolean\n}\n\nexport const CCloseButton = forwardRef<HTMLButtonElement, CCloseButtonProps>(\n  ({ className, dark, disabled, white, ...rest }, ref) => {\n    return (\n      <button\n        type=\"button\"\n        className={classNames(\n          'btn',\n          'btn-close',\n          {\n            'btn-close-white': white,\n          },\n          disabled,\n          className,\n        )}\n        aria-label=\"Close\"\n        disabled={disabled}\n        {...(dark && { 'data-coreui-theme': 'dark' })}\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCCloseButton.propTypes = {\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  disabled: PropTypes.bool,\n  white: PropTypes.bool,\n}\n\nCCloseButton.displayName = 'CCloseButton'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModal'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody, CCardHeader } from '../card'\nimport { CCol } from '../grid/CCol'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\ntype Value = {\n  title?: string | ReactNode\n  value?: number | string | ReactNode\n}\n\nexport interface CWidgetStatsDProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Values and titles for your component.\n   */\n  values?: Value[]\n}\n\nexport const CWidgetStatsD = forwardRef<HTMLDivElement, CWidgetStatsDProps>(\n  ({ className, chart, color, icon, values, ...rest }, ref) => {\n    return (\n      <CCard className={className} {...rest} ref={ref}>\n        <CCardHeader\n          className={classNames(\n            'position-relative d-flex justify-content-center align-items-center',\n            {\n              [`bg-${color}`]: color,\n            },\n          )}\n        >\n          {icon}\n          {chart}\n        </CCardHeader>\n        <CCardBody className=\"row text-center\">\n          {values &&\n            values.map((value: Value, index: number) => {\n              return (\n                <React.Fragment key={index}>\n                  {index % 2 !== 0 && <div className=\"vr\"></div>}\n                  <CCol>\n                    <div className=\"fs-5 fw-semibold\">{value.value}</div>\n                    <div className=\"text-uppercase text-body-secondary small\">{value.title}</div>\n                  </CCol>\n                </React.Fragment>\n              )\n            })}\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsD.propTypes = {\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  values: PropTypes.arrayOf(PropTypes.any),\n}\n\nCWidgetStatsD.displayName = 'CWidgetStatsD'\n"],"names":["props","handleClick","sendDataToParent","_jsxs","CModal","scrollable","visible","onClose","size","className","children","_jsx","CModalHeader","CModalTitle","id","CModalBody","CForm","CRow","CCol","sm","CFormInput","type","label","placeholder","text","onChange","e","CModalFooter","CButton","color","onClick","localStorage","getItem","useFetchProyects","projectId","useQuery","queryKey","refetchType","refetchOnWindowFocus","queryFn","async","axios","get","headers","Authorization","data","fetchProducts","useFetchContract","contractId","fetchContracts","useFetchBasicData","staleTime","gcTime","fetchBasicData","useFetchUserList","fetchUsers","useFetchReportsData","fetchReportsData","isLoading","error","ContractSelector","navigate","useNavigate","getProject","saveContract","useRegisterGeneralData","contractList","setContractList","useState","getData","useGetCachedQueryData","projectsQuery","userType","contractData","useGetContracts","projectLS","JSON","parse","visibleContract","setVisibleContract","useEffect","projectFinded","find","projectData","contracts","contract","_Fragment","ModalAddContract","CCard","CCardTitle","CCardBody","CCardText","undefined","map","index","CWidgetStatsD","name","code","onClickHandler","icon","CIcon","height","chart","CContainer","style","cursor","values","title","value","trisemanal","progress","CCardHeader","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CModalContent","CModalDialog","alignment","fullscreen","concat","CModalContext","createContext","backdrop","_c","duration","_d","focus","_e","keyboard","onClosePrevented","onShow","_f","portal","_g","transition","_h","unmountOnClose","activeElementRef","useRef","modalRef","modalContentRef","forkedRef","useForkedRef","_j","_visible","setVisible","_k","staticBackdrop","setStaticBackdrop","contextValues","current","document","activeElement","addEventListener","handleClickOutside","handleKeyDown","removeEventListener","handleDismiss","useLayoutEffect","setTimeout","body","classList","add","overflow","paddingRight","remove","removeProperty","event","target","key","Transition","in","mountOnEnter","nodeRef","onEnter","onExit","unmountOnExit","timeout","state","CConditionalPortal","Provider","fade","show","tabIndex","role","display","CBackdrop","CCloseButton","dark","disabled","white","closeButton","useContext","colorPropType"],"sourceRoot":""}