{"version":3,"file":"static/js/419.6e5b2a95.chunk.js","mappings":"mNAMA,MAyBA,EAzBwBA,KACtB,IAAIC,GAAWC,EAAAA,EAAAA,MAEf,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,KACdC,EAAaF,EAAQ,UAQ3B,OANAG,EAAAA,EAAAA,YAAU,KACHD,GACHJ,EAAS,aACX,GACC,CAACI,KAGFE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAACG,EAAAA,EAAK,CAAAD,UACJF,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAAAF,UACRF,EAAAA,EAAAA,KAACK,EAAAA,EAAS,CAAAH,UACRF,EAAAA,EAAAA,KAACM,EAAAA,EAAmB,WAItB,C,4FCVGD,GAAoEE,EAAAA,EAAAA,aAG/E,SAACC,EAAuDC,GAArD,IAAAP,EAAQM,EAAAN,SAAEQ,EAAmBF,EAAAG,GAAfC,OAAY,IAAAF,EAAA,IAAGA,EAAET,EAASO,EAAAP,UAAKY,GAAIC,EAAAA,EAAAA,IAAAN,EAAnD,+BACD,OACEO,EAAAA,cAACH,GAASI,EAAAA,EAAAA,IAAA,CAACf,WAAWgB,EAAAA,EAAAA,GAAW,YAAahB,IAAgBY,EAAI,CAAEJ,IAAKA,IACtEP,EAGP,IAEAG,EAAUa,UAAY,CACpBP,GAAIQ,IAAAA,YACJjB,SAAUiB,IAAAA,KACVlB,UAAWkB,IAAAA,QAGbd,EAAUe,YAAc,W,uGCYXC,GAAcd,EAAAA,EAAAA,aACzB,SACEC,EAmBAC,G,MAlBEP,EAAQM,EAAAN,SACRD,EAASO,EAAAP,UACTqB,EAAQd,EAAAc,SACRC,EAAef,EAAAe,gBACfC,EAAahB,EAAAgB,cACbC,EAAiBjB,EAAAiB,kBACjBC,EAAalB,EAAAkB,cACbC,EAAQnB,EAAAmB,SACRC,EAAEpB,EAAAoB,GACFC,EAAOrB,EAAAqB,QACPC,EAAKtB,EAAAsB,MACLC,EAAOvB,EAAAuB,QACPC,EAAIxB,EAAAwB,KACJC,EAAIzB,EAAAyB,KACJC,EAAe1B,EAAA0B,gBACfC,EAAK3B,EAAA2B,MACFtB,GAjBLC,EAAAA,EAAAA,IAAAN,EAAA,+LAqBA,OACEO,EAAAA,cAACqB,EAAAA,EACC,CAAAC,YAAaxB,EAAK,oBAClBS,SAAUA,EACVC,gBAAiBA,EACjBC,cAAeA,EACfC,kBAAmBA,EACnBC,cAAeA,EACfE,GAAIA,EACJC,QAASA,EACTC,MAAOA,EACPG,KAAMA,EACNC,gBAAiBA,EACjBC,MAAOA,GAEPpB,EAAAA,cACE,UAAAC,EAAAA,EAAAA,IAAA,CAAAY,GAAIA,EACJ3B,WAAWgB,EAAAA,EAAAA,GACT,eAAaP,EAAA,GAEXA,EAAC,eAAe4B,OAAAN,IAASA,EACzBtB,EAAA,cAAcmB,EACdnB,EAAA,YAAYyB,EAEdzB,GAAAT,GAEF+B,KAAML,GACFd,EAAI,CACRJ,IAAKA,IAEJsB,EACGA,EAAQQ,KAAI,SAACC,EAAQC,GACnB,OACE1B,EAAAA,cACO,UAADC,EAAAA,EAAAA,IAAC,CAAD,EAAmB,kBAAXwB,GACVA,EAAOE,UAAY,CAAEA,SAAUF,EAAOE,UACjB,kBAAXF,QACOG,IAAjBH,EAAOI,OAAuB,CAAEA,MAAOJ,EAAOI,OAAQ,CACxDC,IAAKJ,IAEc,kBAAXD,EAAsBA,EAASA,EAAOV,MAGpD,IACA5B,GAIZ,IAGFmB,EAAYH,WAASF,EAAAA,EAAAA,IAAA,CACnBf,UAAWkB,IAAAA,OACXQ,SAAUR,IAAAA,OACVY,QAASZ,IAAAA,OACNiB,EAAAA,EAAoBlB,WAGzBG,EAAYD,YAAc,a,uGC1Fb0B,GAAgBvC,EAAAA,EAAAA,aAC3B,SACEC,EAiBAC,GAhBE,IAAAP,EAAQM,EAAAN,SACRD,EAASO,EAAAP,UACTqB,EAAQd,EAAAc,SACRC,EAAef,EAAAe,gBACfC,EAAahB,EAAAgB,cACbC,EAAiBjB,EAAAiB,kBACjBC,EAAalB,EAAAkB,cACbE,EAAEpB,EAAAoB,GACFC,EAAOrB,EAAAqB,QACPC,EAAKtB,EAAAsB,MACLiB,EAASvC,EAAAuC,UACTd,EAAIzB,EAAAyB,KACJC,EAAe1B,EAAA0B,gBACfC,EAAK3B,EAAA2B,MACFtB,GAfLC,EAAAA,EAAAA,IAAAN,EAAA,+KAmBA,OACEO,EAAAA,cAACqB,EAAAA,EACC,CAAAC,YAAaxB,EAAK,oBAClBS,SAAUA,EACVC,gBAAiBA,EACjBC,cAAeA,EACfC,kBAAmBA,EACnBC,cAAeA,EACfE,GAAIA,EACJC,QAASA,EACTC,MAAOA,EACPG,KAAMA,EACNC,gBAAiBA,EACjBC,MAAOA,GAEPpB,EAAAA,cAAA,YAAAC,EAAAA,EAAAA,IAAA,CACEf,WAAWgB,EAAAA,EAAAA,GACT8B,EAAY,yBAA2B,eACvC,CACE,aAAclB,EACd,WAAYM,GAEdlC,GAEF2B,GAAIA,GACAf,EACJ,CAAAJ,IAAKA,IAEJP,GAIT,IAGF4C,EAAc5B,WAASF,EAAAA,EAAAA,IAAA,CACrBf,UAAWkB,IAAAA,OACXS,GAAIT,IAAAA,OACJ4B,UAAW5B,IAAAA,MACRiB,EAAAA,EAAoBlB,WAGzB4B,EAAc1B,YAAc,e,mCCpG5B,MACA,GACE4B,WAFmC,qBAAXC,QAA0BA,OAAOD,YAAcC,OAAOD,WAAWE,KAAKD,SCGhG,IAAIE,EACJ,MAAMC,EAAQ,IAAIC,WAAW,IACd,SAASC,IAEtB,IAAKH,IAEHA,EAAoC,qBAAXF,QAA0BA,OAAOE,iBAAmBF,OAAOE,gBAAgBD,KAAKD,SAEpGE,GACH,MAAM,IAAII,MAAM,4GAIpB,OAAOJ,EAAgBC,EACzB,CCXA,MAAMI,EAAY,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,MAAM,IAGzC,SAASC,EAAgBC,GAAiB,IAAZC,EAAMC,UAAAC,OAAA,QAAAtB,IAAAqB,UAAA,GAAAA,UAAA,GAAG,EAG5C,OAAOR,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,IAChf,CCYA,QAxBA,SAAYhC,EAASmC,EAAKH,GACxB,GAAII,EAAOnB,aAAekB,IAAQnC,EAChC,OAAOoC,EAAOnB,aAIhB,MAAMoB,GADNrC,EAAUA,GAAW,CAAC,GACDsC,SAAWtC,EAAQuB,KAAOA,KAK/C,GAHAc,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBF,EAAK,CACPH,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBS,EAAIH,EAASN,GAAKW,EAAKX,GAGzB,OAAOS,CACT,CAEA,OAAOL,EAAgBO,EACzB,C","sources":["pages/DailyReportPage.jsx","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport DailyReportCollapse from 'src/components/DailyReportCollapse'\nimport { CCard, CCardBody, CCardText } from '@coreui/react'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\nimport { useNavigate } from 'react-router-dom'\n\nconst DailyReportPage = () => {\n  let navigate = useNavigate()\n\n  const { getData } = useGetCachedQueryData()\n  const basicQuery = getData('basics')\n\n  useEffect(() => {\n    if (!basicQuery) {\n      navigate(`/dashboard`)\n    }\n  }, [basicQuery])\n\n  return (\n    <div className=\"daily-report\">\n      <CCard>\n        <CCardBody>\n          <CCardText>\n            <DailyReportCollapse />\n          </CCardText>\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nexport default DailyReportPage\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardText: PolymorphicRefForwardingComponent<'p', CCardTextProps> = forwardRef<\n  HTMLParagraphElement,\n  CCardTextProps\n>(({ children, as: Component = 'p', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],"names":["DailyReportPage","navigate","useNavigate","getData","useGetCachedQueryData","basicQuery","useEffect","_jsx","className","children","CCard","CCardBody","CCardText","DailyReportCollapse","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CFormSelect","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","id","invalid","label","options","size","text","tooltipFeedback","valid","CFormControlWrapper","describedby","concat","map","option","index","disabled","undefined","value","key","CFormTextarea","plainText","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","arguments","length","buf","native","rnds","random"],"sourceRoot":""}