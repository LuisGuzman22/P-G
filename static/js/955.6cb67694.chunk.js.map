{"version":3,"file":"static/js/955.6cb67694.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","components/ModalAddProject.jsx","components/loading.jsx","hooks/useFetch.js","hooks/useGetCachedQueryData.js","hooks/useRegisterGeneralData.js","hooks/useGetProjects.js","pages/ProjectSelector.jsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n} from '@coreui/react'\nconst ModalAddProject = (props) => {\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">AÃ±adir Proyecto</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"projectName\"\n                label=\"Nombre de proyecto\"\n                placeholder=\"Nombre de proyecto\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n                onChange={(e) => {}}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contract\"\n                label=\"Contrato\"\n                placeholder=\"Contrato\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"manager\"\n                label=\"Encargado\"\n                placeholder=\"Encargado\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput type=\"file\" id=\"formFile\" label=\"Elegir archivo\" />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={12}>\n              <CFormTextarea id=\"description\" label=\"DescripciÃ³n\" rows={3} text=\"\"></CFormTextarea>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"color\"\n                id=\"color\"\n                defaultValue=\"#FFFFFF\"\n                label=\"Color de fondo\"\n                title=\"Color de fondo\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormCheck id=\"active\" label=\"Activo\" />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\">AÃ±adir proyecto</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddProject\n","import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://42c56e69edd041d8afddac6929f0ea8b.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n","import { useQueryClient } from '@tanstack/react-query'\n\nconst useGetCachedQueryData = () => {\n  const queryClient = useQueryClient()\n\n  // First create a helper function\n  const getData = (key) => {\n    // Make sure that the key is wrapped in an array for this to work\n    const data = queryClient.getQueryData([key])\n    return data\n  }\n\n  return { getData }\n}\n\nexport default useGetCachedQueryData\n","import { useEffect, useState } from 'react'\n\nconst useRegisterGeneralData = () => {\n  const saveProject = (data) => {\n    localStorage.setItem('project', JSON.stringify(data))\n  }\n  const saveContract = (data) => {\n    localStorage.setItem('contract', JSON.stringify(data))\n  }\n\n  const getProject = () => {\n    return localStorage.getItem('project')\n  }\n  const getContract = (data) => {\n    return localStorage.getItem('contract')\n  }\n\n  return { saveProject, saveContract, getProject, getContract }\n}\n\nexport default useRegisterGeneralData\n","import { useFetchProyects } from './useFetch'\n\nconst useGetProjects = (projectId) => {\n  const { data, isLoading, error } = useFetchProyects(projectId)\n  return { data, isLoading, error }\n}\n\nexport default useGetProjects\n","import { React, useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\nimport Loading from 'src/components/loading'\nimport useGetProjects from 'src/hooks/useGetProjects'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\nimport ModalAddProject from 'src/components/ModalAddProject'\n\nconst ProjectSelector = () => {\n  const navigate = useNavigate()\n  const userType = localStorage.getItem('USER_TYPE')\n  const { getData } = useGetCachedQueryData()\n\n  const contractsQuery = getData('contracts')\n  const { getContract, saveProject, saveContract } = useRegisterGeneralData()\n  const contractLS = JSON.parse(getContract())\n\n  const { data: projectData, isLoading, error } = useGetProjects(1)\n\n  const [selectedContract, setSelectedContract] = useState()\n  const [projectList, setProjectList] = useState()\n\n  const [visibleProject, setVisibleProject] = useState(false)\n\n  const onClickHandler = (project) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: project.name,\n        id: project.id,\n      }\n      saveProject(data)\n      navigate(`/contrato`)\n    } else {\n      const data = {\n        name: project.name,\n        id: project.id,\n      }\n      saveProject(data)\n      navigate(`/dashboard`)\n    }\n  }\n\n  const onClickNewProject = () => {\n    setVisibleProject(!visibleProject)\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      if (contractsQuery && contractLS) {\n      } else {\n        navigate(`/project_selector`)\n      }\n    } else {\n      const contractFinded = contractsQuery.contract.find((contractData) => {\n        return contractData.id === contractLS.id\n      })\n      setSelectedContract(contractFinded)\n      setProjectList(contractFinded.project)\n    }\n  }, [contractsQuery, contractLS])\n\n  useEffect(() => {\n    userType !== 'admin' && projectData?.projects && setProjectList(projectData.projects)\n  }, [projectData])\n\n  return (\n    <>\n      {visibleProject && (\n        <ModalAddProject\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleProject(data)\n          }}\n        />\n      )}\n      <CCol sm={6} className=\"project-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Proyecto</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {isLoading && <Loading />}\n              {!isLoading &&\n                projectList &&\n                projectList.map((project, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(project)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{project.name}</span>\n                              </CRow>\n                              <CRow>\n                                <span className=\"project-manager\">\n                                  Encargado: {project.manager}\n                                </span>\n                              </CRow>\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                          values={[{ title: 'Contratos', value: project?.contracts?.length || 0 }]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n              <CRow key={0}>\n                <CCol>\n                  <CWidgetStatsD\n                    onClick={() => {\n                      onClickNewProject()\n                    }}\n                    className=\"mb-3\"\n                    icon={\n                      <CIcon\n                        className=\"my-4 text-white\"\n                        icon={'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'}\n                        height={52}\n                      />\n                    }\n                    chart={\n                      <CContainer className=\"project-selector-container\">\n                        <CRow>\n                          <span className=\"project-title\">Crear nuevo proyecto</span>\n                        </CRow>\n                      </CContainer>\n                    }\n                    style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                  />\n                </CCol>\n              </CRow>\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ProjectSelector\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n"],"names":["CFormCheck","forwardRef","_a","ref","className","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","id","indeterminate","inline","invalid","label","reverse","_b","type","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","React","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","concat","color","size","shape","htmlFor","propTypes","PropTypes","displayName","props","handleClick","sendDataToParent","_jsxs","CModal","scrollable","visible","onClose","children","_jsx","CModalHeader","CModalTitle","CModalBody","CForm","CRow","CCol","sm","CFormInput","placeholder","text","onChange","e","CFormTextarea","rows","defaultValue","title","CModalFooter","CButton","onClick","Loading","Lottie","animationData","loadingjson","loop","width","useFetchProyects","projectId","useQuery","queryKey","queryFn","async","axios","get","data","fetchProducts","useFetchContract","contractId","fetchContracts","useGetCachedQueryData","queryClient","useQueryClient","getData","key","getQueryData","useRegisterGeneralData","saveProject","localStorage","setItem","JSON","stringify","saveContract","getProject","getItem","getContract","isLoading","error","ProjectSelector","navigate","useNavigate","userType","contractsQuery","contractLS","parse","projectData","useGetProjects","selectedContract","setSelectedContract","useState","projectList","setProjectList","visibleProject","setVisibleProject","contractFinded","contract","find","contractData","project","projects","_Fragment","ModalAddProject","CCard","CCardTitle","CCardBody","CCardText","map","index","_project$contracts","CWidgetStatsD","name","onClickHandler","icon","CIcon","height","chart","CContainer","manager","style","cursor","values","value","contracts","length","floatingClassName","plainText","CFormControlWrapper"],"sourceRoot":""}