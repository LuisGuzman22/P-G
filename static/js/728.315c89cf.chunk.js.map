{"version":3,"file":"static/js/728.315c89cf.chunk.js","mappings":"gPAgBA,MAwFA,EAxF0BA,IACxB,MAAMC,EAAcA,KAClBD,EAAME,kBAAiB,EAAM,EAG/B,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLC,YAAU,EACVC,QAASN,EAAMM,QACfC,QAASA,IAAMN,IACf,kBAAgB,oCAChBO,KAAK,KACLC,UAAU,yBAAwBC,SAAA,EAElCC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAF,UACXC,EAAAA,EAAAA,KAACE,EAAAA,EAAW,CAACC,GAAG,oCAAmCJ,SAAC,0BAEtDC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAAAL,UACTP,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAAAN,SAAA,EACJP,EAAAA,EAAAA,MAACc,EAAAA,EAAI,CAAAP,SAAA,EACHC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACC,GAAI,EAAET,UACVC,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACTC,KAAK,OACLP,GAAG,eACHQ,MAAM,SACNC,YAAY,SACZC,KAAK,GAELC,SAAWC,WAGff,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACC,GAAI,EAAET,UACVC,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACTC,KAAK,OACLP,GAAG,iBACHQ,MAAM,UACNC,YAAY,UACZC,KAAK,WAKXrB,EAAAA,EAAAA,MAACc,EAAAA,EAAI,CAAAP,SAAA,EACHC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACC,GAAI,EAAET,UACVC,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACTC,KAAK,OACLP,GAAG,cACHQ,MAAM,MACNC,YAAY,MACZC,KAAK,QAITrB,EAAAA,EAAAA,MAACe,EAAAA,EAAI,CAACC,GAAI,EAAET,SAAA,EACVC,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACTC,KAAK,OACLP,GAAG,gBACHQ,MAAM,cACNC,YAAY,cACZC,KAAK,KAEJ,WAGPb,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAP,UACHC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACC,GAAI,EAAET,UACVC,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACTC,KAAK,OACLP,GAAG,eACHQ,MAAM,QACNC,YAAY,QACZC,KAAK,eAOfrB,EAAAA,EAAAA,MAACwB,EAAAA,EAAY,CAAAjB,SAAA,EACXC,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAACC,MAAM,YAAYC,QAASA,IAAM7B,IAAcS,SAAC,YAGzDC,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAACnB,UAAU,UAASC,SAAC,4BAExB,C,+raCjGb,MAIA,EAJgBqB,KACPpB,EAAAA,EAAAA,KAACqB,IAAM,CAACC,cAAeC,EAAaC,MAAM,EAAMC,MAAO,GAAI3B,UAAU,W,wFCD9E,MAoBa4B,EAAoBC,IACxBC,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,YACXC,YAAa,MAEbC,sBAAsB,EACtBC,QAASC,SA1BSA,iBACFC,EAAAA,EAAMC,IAAI,0DACjBC,KAAKA,KAyBLC,KAKAC,EAAoBC,IACxBX,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,aACXC,YAAa,MACbE,QAASC,SA1BUA,iBACHC,EAAAA,EAAMC,IAAI,6DACjBC,KAAKA,KAyBLI,KAKAC,EAAqBF,IACzBX,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,UACXC,YAAa,MACbE,QAASC,SA/BUA,iBACHC,EAAAA,EAAMC,IAAI,6DACjBC,KAAKA,KA8BLM,KAKAC,EAAmBA,KACvBf,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,SACXC,YAAa,MACbE,QAASC,SAnDMA,iBACCC,EAAAA,EAAMC,IAAI,6DACjBC,KAAKA,KAkDLQ,I,kDC1Db,MAaA,EAb8BC,KAC5B,MAAMC,GAAcC,EAAAA,EAAAA,MASpB,MAAO,CAAEC,QANQC,GAEFH,EAAYI,aAAa,CAACD,IAIvB,C,4CCVpB,MAkBA,EAlB+BE,KAetB,CAAEC,YAdYhB,IACnBiB,aAAaC,QAAQ,UAAWC,KAAKC,UAAUpB,GAAM,EAajCqB,aAXArB,IACpBiB,aAAaC,QAAQ,WAAYC,KAAKC,UAAUpB,GAAM,EAUpBsB,WAPjBA,IACVL,aAAaM,QAAQ,WAMkBC,YAJ3BxB,GACZiB,aAAaM,QAAQ,a,iMCXhC,MAMA,EANyBpB,IACvB,MAAM,KAAEH,EAAI,UAAEyB,EAAS,MAAEC,IAAUxB,EAAAA,EAAAA,IAAiBC,GAEpD,MAAO,CAAEH,OAAMyB,YAAWC,QAAO,E,8CCcnC,MA6IA,EA7IyBC,KACvB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,WAAEP,EAAU,aAAED,IAAiBN,EAAAA,EAAAA,MAC9Be,EAAiBC,IAAsBC,EAAAA,EAAAA,aACvCC,EAAcC,IAAmBF,EAAAA,EAAAA,aAClC,QAAEpB,IAAYH,EAAAA,EAAAA,KAEd0B,EAAgBvB,EAAQ,YACxBwB,EAAWnB,aAAaM,QAAQ,cAC9BvB,KAAMqC,EAAY,UAAEZ,EAAS,MAAEC,GAAUY,EAAgB,GAC3DC,EAAYpB,KAAKqB,MAAMlB,MAEtBmB,EAAiBC,IAAsBV,EAAAA,EAAAA,WAAS,GA0CvD,OAlBAW,EAAAA,EAAAA,YAAU,KACR,GAAiB,UAAbP,EACF,GAAIG,GAAaJ,EAAe,CAC9B,MAAMS,EAAgBT,EAAcU,MAAMC,GACjCA,EAAY/E,KAAOwE,EAAUxE,KAEtCgE,EAAmBa,GACnBV,EAAgBU,EAAcG,UAChC,MACEnB,EAAS,oBAEb,GACC,CAACO,EAAeI,KAEnBI,EAAAA,EAAAA,YAAU,KACK,UAAbP,IAAoC,OAAZC,QAAY,IAAZA,OAAY,EAAZA,EAAcW,WAAYd,EAAgBG,EAAaW,SAAS,GACvF,CAACX,KAGFjF,EAAAA,EAAAA,MAAA6F,EAAAA,SAAA,CAAAtF,SAAA,CACG8E,IACC7E,EAAAA,EAAAA,KAACsF,EAAAA,EAAgB,CACf3F,SAAS,EACTJ,iBAAmB6C,IACjB0C,EAAmB1C,EAAK,KAI9BpC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAACC,GAAI,EAAGV,UAAU,8BAA6BC,UAClDP,EAAAA,EAAAA,MAAC+F,EAAAA,EAAK,CAAAxF,SAAA,EACJC,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CAAAzF,UACTC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6BAENC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,UACRP,EAAAA,EAAAA,MAACkG,EAAAA,EAAS,CAAA3F,SAAA,MACU4F,IAAjBtB,IAA8BrE,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0CAClCsE,IACa,OAAZA,QAAY,IAAZA,OAAY,EAAZA,EAAcuB,KAAI,CAACR,EAAUS,KAEzB7F,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAP,UACHC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAAAR,UACHC,EAAAA,EAAAA,KAAC8F,EAAAA,EAAa,CACZ3E,QAASA,KAhETiE,KACtB,GAAiB,UAAbZ,EAAsB,CACxB,MAAMpC,EAAO,CACX2D,KAAMX,EAASW,KACf5F,GAAIiF,EAASjF,IAEfsD,EAAarB,GACb4B,EAAS,aACX,KAAO,CACL,MAAM5B,EAAO,CACX2D,KAAMX,EAASW,KACf5F,GAAIiF,EAASjF,IAEfsD,EAAarB,GACb4B,EAAS,oBACX,GAkDwBgC,CAAeZ,EAAS,EAE1BtF,UAAU,OACVmG,MACEjG,EAAAA,EAAAA,KAACkG,EAAAA,EAAK,CACJpG,UAAU,kBACVmG,KACE,mEAEFE,OAAQ,KAGZC,OACEpG,EAAAA,EAAAA,KAACqG,EAAAA,EAAU,CAACvG,UAAU,6BAA4BC,UAChDC,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAP,UACHC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,gBAAeC,SAAEqF,EAASW,WAIhDO,MAAO,CAAE,oBAAqB,UAAWC,OAAQ,WACjDC,OAAQ,CACN,CAAEC,MAAO,eAAgBC,MAAOtB,EAASuB,YACzC,CAAEF,MAAO,SAAUC,MAAOtB,EAASwB,gBA1BhCf,OAiCjB7F,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAP,UACHC,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAAAR,UACHC,EAAAA,EAAAA,KAAC8F,EAAAA,EAAa,CACZ3E,QAASA,KA9EzB2D,GAAoBD,EA+EkB,EAEtB/E,UAAU,OACVmG,MACEjG,EAAAA,EAAAA,KAACkG,EAAAA,EAAK,CACJpG,UAAU,kBACVmG,KAAM,mEACNE,OAAQ,KAGZC,OACEpG,EAAAA,EAAAA,KAACqG,EAAAA,EAAU,CAACvG,UAAU,6BAA4BC,UAChDC,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAP,UACHC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,gBAAeC,SAAC,6BAItCuG,MAAO,CAAE,oBAAqB,UAAWC,OAAQ,gBArB5C,eA6BlB,C,4FC5IMM,GAA0EC,EAAAA,EAAAA,aAGrF,SAACC,EAAyDC,GAAvD,IAAAjH,EAAQgH,EAAAhH,SAAEkH,EAAqBF,EAAAG,GAAjBC,OAAY,IAAAF,EAAA,MAAKA,EAAEnH,EAASiH,EAAAjH,UAAKsH,GAAIC,EAAAA,EAAAA,IAAAN,EAArD,+BACD,OACEO,EAAAA,cAACH,GAASI,EAAAA,EAAAA,IAAA,CAACzH,WAAW0H,EAAAA,EAAAA,GAAW,cAAe1H,IAAgBsH,EAAI,CAAEJ,IAAKA,IACxEjH,EAGP,IAEA8G,EAAYY,UAAY,CACtBP,GAAIQ,IAAAA,YACJ3H,SAAU2H,IAAAA,KACV5H,UAAW4H,IAAAA,QAGbb,EAAYc,YAAc,a,4FCjBbnC,GAAuEsB,EAAAA,EAAAA,aAGlF,SAACC,EAAwDC,GAAtD,IAAAjH,EAAQgH,EAAAhH,SAAEkH,EAAoBF,EAAAG,GAAhBC,OAAY,IAAAF,EAAA,KAAIA,EAAEnH,EAASiH,EAAAjH,UAAKsH,GAAIC,EAAAA,EAAAA,IAAAN,EAApD,+BACD,OACEO,EAAAA,cAACH,GAASI,EAAAA,EAAAA,IAAA,CAACzH,WAAW0H,EAAAA,EAAAA,GAAW,aAAc1H,IAAgBsH,EAAI,CAAEJ,IAAKA,IACvEjH,EAGP,IAEAyF,EAAWiC,UAAY,CACrBP,GAAIQ,IAAAA,YACJ3H,SAAU2H,IAAAA,KACV5H,UAAW4H,IAAAA,QAGblC,EAAWmC,YAAc,Y,mJCMZ7B,GAAgBgB,EAAAA,EAAAA,aAC3B,SAACC,EAAoDC,G,MAAlDlH,EAASiH,EAAAjH,UAAEsG,EAAKW,EAAAX,MAAElF,EAAK6F,EAAA7F,MAAE+E,EAAIc,EAAAd,KAAEO,EAAMO,EAAAP,OAAKY,GAAIC,EAAAA,EAAAA,IAAAN,EAAhD,+CACC,OACEO,EAAAA,cAAC/B,EAAAA,GAAKgC,EAAAA,EAAAA,IAAA,CAACzH,UAAWA,GAAesH,EAAI,CAAEJ,IAAKA,IAC1CM,EAAAA,cAACT,EAAAA,EACC,CAAA/G,WAAW0H,EAAAA,EAAAA,GACT,sEAAoEP,EAAA,GAElEA,EAAC,MAAMW,OAAA1G,IAAUA,EAEpB+F,KAEAhB,EACAG,GAEHkB,EAAAA,cAAC7B,EAAAA,EAAU,CAAA3F,UAAU,mBAClB0G,GACCA,EAAOZ,KAAI,SAACc,EAAcb,GACxB,OACEyB,EAAAA,cAACA,EAAAA,SAAe,CAAArE,IAAK4C,GAClBA,EAAQ,IAAM,GAAKyB,EAAAA,cAAK,OAAAxH,UAAU,OACnCwH,EAAAA,cAAC/G,EAAAA,EAAI,KACH+G,EAAAA,cAAA,OAAKxH,UAAU,oBAAoB4G,EAAMA,OACzCY,EAAAA,cAAK,OAAAxH,UAAU,4CAA4C4G,EAAMD,QAIzE,KAIV,IAGFX,EAAc2B,UAAY,CACxBrB,MAAOsB,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAC9C5H,UAAW4H,IAAAA,OACXxG,MAAO2G,EAAAA,GACP5B,KAAMyB,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAC7ClB,OAAQkB,IAAAA,QAAkBA,IAAAA,MAG5B5B,EAAc6B,YAAc,e","sources":["components/ModalAddContract.jsx","components/loading.jsx","hooks/useFetch.js","hooks/useGetCachedQueryData.js","hooks/useRegisterGeneralData.js","hooks/useGetContracts.js","pages/ContractSelector.jsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/card/CCardTitle.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsD.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n} from '@coreui/react'\nconst ModalAddContract = (props) => {\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">Añadir Contrato</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractName\"\n                label=\"Nombre\"\n                placeholder=\"Nombre\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n                onChange={(e) => {}}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractDetail\"\n                label=\"Detalle\"\n                placeholder=\"Detalle\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractUrl\"\n                label=\"URL\"\n                placeholder=\"URL\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractPhone\"\n                label=\"Teléfono\"\n                placeholder=\"Teléfono\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />{' '}\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contractMail\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\">Añadir contrato</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddContract\n","import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://pyg-production.up.railway.app/api/v1/projects')\n  return res.data.data\n}\n\nconst fetchUsers = async () => {\n  const res = await axios.get('https://b4b07e25f42d4135b6fc3791a6e1d1f8.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchBasicData = async (contractId) => {\n  const res = await axios.get('https://07a397da689a439a8a9f86b1df79836e.api.mockbin.io/')\n  return res.data.data\n}\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    refetchType: 'all',\n    // refetchInterval: 10000,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n\nexport const useFetchBasicData = (contractId) => {\n  return useQuery({\n    queryKey: ['basics'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchBasicData(contractId)\n    },\n  })\n}\n\nexport const useFetchUserList = () => {\n  return useQuery({\n    queryKey: ['users'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchUsers()\n    },\n  })\n}\n","import { useQueryClient } from '@tanstack/react-query'\n\nconst useGetCachedQueryData = () => {\n  const queryClient = useQueryClient()\n\n  // First create a helper function\n  const getData = (key) => {\n    // Make sure that the key is wrapped in an array for this to work\n    const data = queryClient.getQueryData([key])\n    return data\n  }\n\n  return { getData }\n}\n\nexport default useGetCachedQueryData\n","import { useEffect, useState } from 'react'\n\nconst useRegisterGeneralData = () => {\n  const saveProject = (data) => {\n    localStorage.setItem('project', JSON.stringify(data))\n  }\n  const saveContract = (data) => {\n    localStorage.setItem('contract', JSON.stringify(data))\n  }\n\n  const getProject = () => {\n    return localStorage.getItem('project')\n  }\n  const getContract = (data) => {\n    return localStorage.getItem('contract')\n  }\n\n  return { saveProject, saveContract, getProject, getContract }\n}\n\nexport default useRegisterGeneralData\n","import { useEffect, useState } from 'react'\nimport { useFetchContract } from './useFetch'\n\nconst useGetContracts = (contractId) => {\n  const { data, isLoading, error } = useFetchContract(contractId)\n\n  return { data, isLoading, error }\n}\n\nexport default useGetContracts\n","import { React, useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\n\nimport CIcon from '@coreui/icons-react'\nimport useGetContracts from 'src/hooks/useGetContracts'\nimport Loading from 'src/components/loading'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\nimport ModalAddContract from 'src/components/ModalAddContract'\n\nconst ContractSelector = () => {\n  const navigate = useNavigate()\n  const { getProject, saveContract } = useRegisterGeneralData()\n  const [selectedProject, setSelectedProject] = useState()\n  const [contractList, setContractList] = useState()\n  const { getData } = useGetCachedQueryData()\n\n  const projectsQuery = getData('projects')\n  const userType = localStorage.getItem('USER_TYPE')\n  const { data: contractData, isLoading, error } = useGetContracts(1)\n  const projectLS = JSON.parse(getProject())\n\n  const [visibleContract, setVisibleContract] = useState(false)\n\n  const onClickHandler = (contract) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: contract.name,\n        id: contract.id,\n      }\n      saveContract(data)\n      navigate(`/dashboard`)\n    } else {\n      const data = {\n        name: contract.name,\n        id: contract.id,\n      }\n      saveContract(data)\n      navigate(`/project_selector`)\n    }\n  }\n\n  const onClickNewContract = () => {\n    setVisibleContract(!visibleContract)\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      if (projectLS && projectsQuery) {\n        const projectFinded = projectsQuery.find((projectData) => {\n          return projectData.id === projectLS.id\n        })\n        setSelectedProject(projectFinded)\n        setContractList(projectFinded.contracts)\n      } else {\n        navigate(`/project_selector`)\n      }\n    }\n  }, [projectsQuery, projectLS])\n\n  useEffect(() => {\n    userType === 'admin' && contractData?.contract && setContractList(contractData.contract)\n  }, [contractData])\n\n  return (\n    <>\n      {visibleContract && (\n        <ModalAddContract\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleContract(data)\n          }}\n        />\n      )}\n      <CCol sm={6} className=\"contract-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Contrato</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {contractList === undefined && <h3>No se encontraron contratos asociados</h3>}\n              {contractList &&\n                contractList?.map((contract, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(contract)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{contract.name}</span>\n                              </CRow>\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                          values={[\n                            { title: 'Trisemanales', value: contract.trisemanal },\n                            { title: 'Avance', value: contract.progress },\n                          ]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n              <CRow key={0}>\n                <CCol>\n                  <CWidgetStatsD\n                    onClick={() => {\n                      onClickNewContract()\n                    }}\n                    className=\"mb-3\"\n                    icon={\n                      <CIcon\n                        className=\"my-4 text-white\"\n                        icon={'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'}\n                        height={52}\n                      />\n                    }\n                    chart={\n                      <CContainer className=\"project-selector-container\">\n                        <CRow>\n                          <span className=\"project-title\">Crear nuevo contrato</span>\n                        </CRow>\n                      </CContainer>\n                    }\n                    style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                  />\n                </CCol>\n              </CRow>\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ContractSelector\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardTitle: PolymorphicRefForwardingComponent<'h5', CCardTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  CCardTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody, CCardHeader } from '../card'\nimport { CCol } from '../grid/CCol'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\ntype Value = {\n  title?: string | ReactNode\n  value?: number | string | ReactNode\n}\n\nexport interface CWidgetStatsDProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Values and titles for your component.\n   */\n  values?: Value[]\n}\n\nexport const CWidgetStatsD = forwardRef<HTMLDivElement, CWidgetStatsDProps>(\n  ({ className, chart, color, icon, values, ...rest }, ref) => {\n    return (\n      <CCard className={className} {...rest} ref={ref}>\n        <CCardHeader\n          className={classNames(\n            'position-relative d-flex justify-content-center align-items-center',\n            {\n              [`bg-${color}`]: color,\n            },\n          )}\n        >\n          {icon}\n          {chart}\n        </CCardHeader>\n        <CCardBody className=\"row text-center\">\n          {values &&\n            values.map((value: Value, index: number) => {\n              return (\n                <React.Fragment key={index}>\n                  {index % 2 !== 0 && <div className=\"vr\"></div>}\n                  <CCol>\n                    <div className=\"fs-5 fw-semibold\">{value.value}</div>\n                    <div className=\"text-uppercase text-body-secondary small\">{value.title}</div>\n                  </CCol>\n                </React.Fragment>\n              )\n            })}\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsD.propTypes = {\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  values: PropTypes.arrayOf(PropTypes.any),\n}\n\nCWidgetStatsD.displayName = 'CWidgetStatsD'\n"],"names":["props","handleClick","sendDataToParent","_jsxs","CModal","scrollable","visible","onClose","size","className","children","_jsx","CModalHeader","CModalTitle","id","CModalBody","CForm","CRow","CCol","sm","CFormInput","type","label","placeholder","text","onChange","e","CModalFooter","CButton","color","onClick","Loading","Lottie","animationData","loadingjson","loop","width","useFetchProyects","projectId","useQuery","queryKey","refetchType","refetchOnWindowFocus","queryFn","async","axios","get","data","fetchProducts","useFetchContract","contractId","fetchContracts","useFetchBasicData","fetchBasicData","useFetchUserList","fetchUsers","useGetCachedQueryData","queryClient","useQueryClient","getData","key","getQueryData","useRegisterGeneralData","saveProject","localStorage","setItem","JSON","stringify","saveContract","getProject","getItem","getContract","isLoading","error","ContractSelector","navigate","useNavigate","selectedProject","setSelectedProject","useState","contractList","setContractList","projectsQuery","userType","contractData","useGetContracts","projectLS","parse","visibleContract","setVisibleContract","useEffect","projectFinded","find","projectData","contracts","contract","_Fragment","ModalAddContract","CCard","CCardTitle","CCardBody","CCardText","undefined","map","index","CWidgetStatsD","name","onClickHandler","icon","CIcon","height","chart","CContainer","style","cursor","values","title","value","trisemanal","progress","CCardHeader","forwardRef","_a","ref","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","concat","colorPropType"],"sourceRoot":""}