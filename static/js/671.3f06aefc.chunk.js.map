{"version":3,"file":"static/js/671.3f06aefc.chunk.js","mappings":"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","sources":["components/loading.jsx","hooks/useFetch.js","hooks/useGetCachedQueryData.js","hooks/useRegisterGeneralData.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/card/CCardTitle.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsD.tsx"],"sourcesContent":["import { React } from 'react'\nimport Lottie from 'lottie-react'\nimport loadingjson from '../lottie/loading.json'\nconst Loading = () => {\n  return <Lottie animationData={loadingjson} loop={true} width={20} className=\"loading\" />\n}\n\nexport default Loading\n","import { useQuery } from '@tanstack/react-query'\nimport axios from 'axios'\n\nconst fetchProducts = async (projectId) => {\n  const res = await axios.get('https://057fad5c781541ef9564e00a00f8e38f.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchUsers = async () => {\n  const res = await axios.get('https://b4b07e25f42d4135b6fc3791a6e1d1f8.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchContracts = async (contractId) => {\n  const res = await axios.get('https://2b3570b8072a44e09ce5b5a80a4c8012.api.mockbin.io/')\n  return res.data.data\n}\n\nconst fetchBasicData = async (contractId) => {\n  const res = await axios.get('https://07a397da689a439a8a9f86b1df79836e.api.mockbin.io/')\n  return res.data.data\n}\n\nexport const useFetchProyects = (projectId) => {\n  return useQuery({\n    queryKey: ['projects'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchProducts(projectId)\n    },\n  })\n}\n\nexport const useFetchContract = (contractId) => {\n  return useQuery({\n    queryKey: ['contracts'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchContracts(contractId)\n    },\n  })\n}\n\nexport const useFetchBasicData = (contractId) => {\n  return useQuery({\n    queryKey: ['basics'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchBasicData(contractId)\n    },\n  })\n}\n\nexport const useFetchUserList = () => {\n  return useQuery({\n    queryKey: ['users'],\n    refetchType: 'all',\n    queryFn: async () => {\n      return fetchUsers()\n    },\n  })\n}\n","import { useQueryClient } from '@tanstack/react-query'\n\nconst useGetCachedQueryData = () => {\n  const queryClient = useQueryClient()\n\n  // First create a helper function\n  const getData = (key) => {\n    // Make sure that the key is wrapped in an array for this to work\n    const data = queryClient.getQueryData([key])\n    return data\n  }\n\n  return { getData }\n}\n\nexport default useGetCachedQueryData\n","import { useEffect, useState } from 'react'\n\nconst useRegisterGeneralData = () => {\n  const saveProject = (data) => {\n    localStorage.setItem('project', JSON.stringify(data))\n  }\n  const saveContract = (data) => {\n    localStorage.setItem('contract', JSON.stringify(data))\n  }\n\n  const getProject = () => {\n    return localStorage.getItem('project')\n  }\n  const getContract = (data) => {\n    return localStorage.getItem('contract')\n  }\n\n  return { saveProject, saveContract, getProject, getContract }\n}\n\nexport default useRegisterGeneralData\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardText: PolymorphicRefForwardingComponent<'p', CCardTextProps> = forwardRef<\n  HTMLParagraphElement,\n  CCardTextProps\n>(({ children, as: Component = 'p', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardTitle: PolymorphicRefForwardingComponent<'h5', CCardTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  CCardTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody, CCardHeader } from '../card'\nimport { CCol } from '../grid/CCol'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\ntype Value = {\n  title?: string | ReactNode\n  value?: number | string | ReactNode\n}\n\nexport interface CWidgetStatsDProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Values and titles for your component.\n   */\n  values?: Value[]\n}\n\nexport const CWidgetStatsD = forwardRef<HTMLDivElement, CWidgetStatsDProps>(\n  ({ className, chart, color, icon, values, ...rest }, ref) => {\n    return (\n      <CCard className={className} {...rest} ref={ref}>\n        <CCardHeader\n          className={classNames(\n            'position-relative d-flex justify-content-center align-items-center',\n            {\n              [`bg-${color}`]: color,\n            },\n          )}\n        >\n          {icon}\n          {chart}\n        </CCardHeader>\n        <CCardBody className=\"row text-center\">\n          {values &&\n            values.map((value: Value, index: number) => {\n              return (\n                <React.Fragment key={index}>\n                  {index % 2 !== 0 && <div className=\"vr\"></div>}\n                  <CCol>\n                    <div className=\"fs-5 fw-semibold\">{value.value}</div>\n                    <div className=\"text-uppercase text-body-secondary small\">{value.title}</div>\n                  </CCol>\n                </React.Fragment>\n              )\n            })}\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsD.propTypes = {\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  values: PropTypes.arrayOf(PropTypes.any),\n}\n\nCWidgetStatsD.displayName = 'CWidgetStatsD'\n"],"names":["Loading","_jsx","Lottie","animationData","loadingjson","loop","width","className","useFetchProyects","projectId","useQuery","queryKey","refetchType","queryFn","async","axios","get","data","fetchProducts","useFetchContract","contractId","fetchContracts","useFetchBasicData","fetchBasicData","useFetchUserList","fetchUsers","useGetCachedQueryData","queryClient","useQueryClient","getData","key","getQueryData","useRegisterGeneralData","saveProject","localStorage","setItem","JSON","stringify","saveContract","getProject","getItem","getContract","CCardHeader","forwardRef","_a","ref","children","_b","as","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CCardText","CCardTitle","CWidgetStatsD","chart","color","icon","values","CCard","concat","CCardBody","map","value","index","CCol","title","colorPropType"],"sourceRoot":""}