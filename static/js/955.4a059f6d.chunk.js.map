{"version":3,"file":"static/js/955.4a059f6d.chunk.js","mappings":"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","sources":["components/ModalAddProject.jsx","hooks/useGetProjects.js","pages/ProjectSelector.jsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport {\n  CButton,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CModal,\n  CModalBody,\n  CForm,\n  CFormInput,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CFormCheck,\n} from '@coreui/react'\nconst ModalAddProject = (props) => {\n  const handleClick = () => {\n    props.sendDataToParent(false)\n  }\n\n  return (\n    <CModal\n      scrollable\n      visible={props.visible}\n      onClose={() => handleClick()}\n      aria-labelledby=\"ScrollingLongContentExampleLabel2\"\n      size=\"xl\"\n      className=\"project-creation-modal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"ScrollingLongContentExampleLabel2\">AÃ±adir Proyecto</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CForm>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"projectName\"\n                label=\"Nombre de proyecto\"\n                placeholder=\"Nombre de proyecto\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n                onChange={(e) => {}}\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"contract\"\n                label=\"Contrato\"\n                placeholder=\"Contrato\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"text\"\n                id=\"manager\"\n                label=\"Encargado\"\n                placeholder=\"Encargado\"\n                text=\"\"\n                // aria-describedby=\"exampleFormControlInputHelpInline\"\n              />\n            </CCol>\n            <CCol sm={6}>\n              <CFormInput type=\"file\" id=\"formFile\" label=\"Elegir archivo\" />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={12}>\n              <CFormTextarea id=\"description\" label=\"DescripciÃ³n\" rows={3} text=\"\"></CFormTextarea>\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormInput\n                type=\"color\"\n                id=\"color\"\n                defaultValue=\"#FFFFFF\"\n                label=\"Color de fondo\"\n                title=\"Color de fondo\"\n              />\n            </CCol>\n          </CRow>\n          <CRow>\n            <CCol sm={6}>\n              <CFormCheck id=\"active\" label=\"Activo\" />\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => handleClick()}>\n          Cerrar\n        </CButton>\n        <CButton className=\"btn-add\">AÃ±adir proyecto</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ModalAddProject\n","import { useFetchProyects } from './useFetch'\n\nconst useGetProjects = (projectId) => {\n  const { data, isLoading, error } = useFetchProyects(projectId)\n  return { data, isLoading, error }\n}\n\nexport default useGetProjects\n","import { React, useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CWidgetStatsD,\n  CRow,\n  CCol,\n  CContainer,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCardTitle,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport useRegisterGeneralData from 'src/hooks/useRegisterGeneralData'\nimport Loading from 'src/components/loading'\nimport useGetProjects from 'src/hooks/useGetProjects'\nimport useGetCachedQueryData from 'src/hooks/useGetCachedQueryData'\nimport ModalAddProject from 'src/components/ModalAddProject'\n\nconst ProjectSelector = () => {\n  const navigate = useNavigate()\n  const userType = localStorage.getItem('USER_TYPE')\n  const { getData } = useGetCachedQueryData()\n\n  const contractsQuery = getData('contracts')\n  const { getContract, saveProject, saveContract } = useRegisterGeneralData()\n  const contractLS = JSON.parse(getContract())\n\n  const { data: projectData, isLoading, error } = useGetProjects(1)\n\n  const [selectedContract, setSelectedContract] = useState()\n  const [projectList, setProjectList] = useState()\n\n  const [visibleProject, setVisibleProject] = useState(false)\n\n  const onClickHandler = (project) => {\n    if (userType !== 'admin') {\n      const data = {\n        name: project.name,\n        id: project.id,\n      }\n      saveProject(data)\n      navigate(`/contrato`)\n    } else {\n      const data = {\n        name: project.name,\n        id: project.id,\n      }\n      saveProject(data)\n      navigate(`/dashboard`)\n    }\n  }\n\n  const onClickNewProject = () => {\n    setVisibleProject(!visibleProject)\n  }\n\n  useEffect(() => {\n    if (userType !== 'admin') {\n      if (contractsQuery && contractLS) {\n      } else {\n        navigate(`/project_selector`)\n      }\n    } else {\n      const contractFinded = contractsQuery.contract.find((contractData) => {\n        return contractData.id === contractLS.id\n      })\n      setSelectedContract(contractFinded)\n      setProjectList(contractFinded.project)\n    }\n  }, [contractsQuery, contractLS])\n\n  useEffect(() => {\n    userType !== 'admin' && projectData && setProjectList(projectData)\n  }, [projectData])\n\n  return (\n    <>\n      {visibleProject && (\n        <ModalAddProject\n          visible={true}\n          sendDataToParent={(data) => {\n            setVisibleProject(data)\n          }}\n        />\n      )}\n      <CCol sm={6} className=\"project-selector-container\">\n        <CCard>\n          <CCardTitle>\n            <h3>Seleccion de Proyecto</h3>\n          </CCardTitle>\n          <CCardBody>\n            <CCardText>\n              {isLoading && <Loading />}\n              {!isLoading &&\n                projectList &&\n                projectList.map((project, index) => {\n                  return (\n                    <CRow key={index}>\n                      <CCol>\n                        <CWidgetStatsD\n                          onClick={() => {\n                            onClickHandler(project)\n                          }}\n                          className=\"mb-3\"\n                          icon={\n                            <CIcon\n                              className=\"my-4 text-white\"\n                              icon={\n                                'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'\n                              }\n                              height={52}\n                            />\n                          }\n                          chart={\n                            <CContainer className=\"project-selector-container\">\n                              <CRow>\n                                <span className=\"project-title\">{project.name}</span>\n                              </CRow>\n                              {project.manager && (\n                                <CRow>\n                                  <span className=\"project-manager\">\n                                    Encargado: {project.manager}\n                                  </span>\n                                </CRow>\n                              )}\n                            </CContainer>\n                          }\n                          style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                          values={[{ title: 'Contratos', value: project?.contracts?.length || 0 }]}\n                        />\n                      </CCol>\n                    </CRow>\n                  )\n                })}\n              <CRow key={0}>\n                <CCol>\n                  <CWidgetStatsD\n                    onClick={() => {\n                      onClickNewProject()\n                    }}\n                    className=\"mb-3\"\n                    icon={\n                      <CIcon\n                        className=\"my-4 text-white\"\n                        icon={'https://pgproject.cl/uploads/1705996608_a41c61e65ecf2a35c699.jpg'}\n                        height={52}\n                      />\n                    }\n                    chart={\n                      <CContainer className=\"project-selector-container\">\n                        <CRow>\n                          <span className=\"project-title\">Crear nuevo proyecto</span>\n                        </CRow>\n                      </CContainer>\n                    }\n                    style={{ '--cui-card-cap-bg': '#1A4D55', cursor: 'pointer' }}\n                  />\n                </CCol>\n              </CRow>\n            </CCardText>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ProjectSelector\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUIâs themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n"],"names":["props","handleClick","sendDataToParent","_jsxs","CModal","scrollable","visible","onClose","size","className","children","_jsx","CModalHeader","CModalTitle","id","CModalBody","CForm","CRow","CCol","sm","CFormInput","type","label","placeholder","text","onChange","e","CFormTextarea","rows","defaultValue","title","CFormCheck","CModalFooter","CButton","color","onClick","projectId","data","isLoading","error","useFetchProyects","ProjectSelector","navigate","useNavigate","userType","localStorage","getItem","getData","useGetCachedQueryData","contractsQuery","getContract","saveProject","saveContract","useRegisterGeneralData","contractLS","JSON","parse","projectData","useGetProjects","selectedContract","setSelectedContract","useState","projectList","setProjectList","visibleProject","setVisibleProject","useEffect","contractFinded","contract","find","contractData","project","_Fragment","ModalAddProject","CCard","CCardTitle","CCardBody","CCardText","Loading","map","index","_project$contracts","CWidgetStatsD","name","onClickHandler","icon","CIcon","height","chart","CContainer","manager","style","cursor","values","value","contracts","length","forwardRef","_a","ref","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","invalid","reverse","_b","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","current","FormControl","React","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","concat","shape","htmlFor","propTypes","PropTypes","displayName","floatingClassName","plainText","CFormControlWrapper"],"sourceRoot":""}